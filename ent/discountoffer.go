// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wallit/ent/discountoffer"
	"wallit/ent/merchant"
	"wallit/ent/notification"

	"entgo.io/ent/dialect/sql"
)

// DiscountOffer is the model entity for the DiscountOffer schema.
type DiscountOffer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// Type holds the value of the "type" field.
	Type discountoffer.Type `json:"type,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// MerchantSpecificIdentification holds the value of the "merchant_specific_identification" field.
	MerchantSpecificIdentification string `json:"merchant_specific_identification,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscountOfferQuery when eager-loading is set.
	Edges                                    DiscountOfferEdges `json:"edges"`
	merchant_discount_offers                 *int
	notification_notification_discount_offer *int
}

// DiscountOfferEdges holds the relations/edges for other nodes in the graph.
type DiscountOfferEdges struct {
	// OwnerMerchant holds the value of the owner_merchant edge.
	OwnerMerchant *Merchant `json:"owner_merchant,omitempty"`
	// DiscountEligibleUsers holds the value of the discount_eligible_users edge.
	DiscountEligibleUsers []*User `json:"discount_eligible_users,omitempty"`
	// DiscountOfferNotification holds the value of the discount_offer_notification edge.
	DiscountOfferNotification *Notification `json:"discount_offer_notification,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedDiscountEligibleUsers map[string][]*User
}

// OwnerMerchantOrErr returns the OwnerMerchant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscountOfferEdges) OwnerMerchantOrErr() (*Merchant, error) {
	if e.loadedTypes[0] {
		if e.OwnerMerchant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: merchant.Label}
		}
		return e.OwnerMerchant, nil
	}
	return nil, &NotLoadedError{edge: "owner_merchant"}
}

// DiscountEligibleUsersOrErr returns the DiscountEligibleUsers value or an error if the edge
// was not loaded in eager-loading.
func (e DiscountOfferEdges) DiscountEligibleUsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.DiscountEligibleUsers, nil
	}
	return nil, &NotLoadedError{edge: "discount_eligible_users"}
}

// DiscountOfferNotificationOrErr returns the DiscountOfferNotification value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscountOfferEdges) DiscountOfferNotificationOrErr() (*Notification, error) {
	if e.loadedTypes[2] {
		if e.DiscountOfferNotification == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: notification.Label}
		}
		return e.DiscountOfferNotification, nil
	}
	return nil, &NotLoadedError{edge: "discount_offer_notification"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscountOffer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case discountoffer.FieldID, discountoffer.FieldAmount:
			values[i] = new(sql.NullInt64)
		case discountoffer.FieldType, discountoffer.FieldCurrency, discountoffer.FieldDescription, discountoffer.FieldMerchantSpecificIdentification:
			values[i] = new(sql.NullString)
		case discountoffer.FieldCreatedAt, discountoffer.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case discountoffer.ForeignKeys[0]: // merchant_discount_offers
			values[i] = new(sql.NullInt64)
		case discountoffer.ForeignKeys[1]: // notification_notification_discount_offer
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DiscountOffer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscountOffer fields.
func (do *DiscountOffer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discountoffer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			do.ID = int(value.Int64)
		case discountoffer.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				do.Amount = int(value.Int64)
			}
		case discountoffer.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				do.Type = discountoffer.Type(value.String)
			}
		case discountoffer.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				do.Currency = value.String
			}
		case discountoffer.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				do.Description = value.String
			}
		case discountoffer.FieldMerchantSpecificIdentification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_specific_identification", values[i])
			} else if value.Valid {
				do.MerchantSpecificIdentification = value.String
			}
		case discountoffer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				do.CreatedAt = value.Time
			}
		case discountoffer.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				do.ExpiresAt = value.Time
			}
		case discountoffer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field merchant_discount_offers", value)
			} else if value.Valid {
				do.merchant_discount_offers = new(int)
				*do.merchant_discount_offers = int(value.Int64)
			}
		case discountoffer.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field notification_notification_discount_offer", value)
			} else if value.Valid {
				do.notification_notification_discount_offer = new(int)
				*do.notification_notification_discount_offer = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwnerMerchant queries the "owner_merchant" edge of the DiscountOffer entity.
func (do *DiscountOffer) QueryOwnerMerchant() *MerchantQuery {
	return NewDiscountOfferClient(do.config).QueryOwnerMerchant(do)
}

// QueryDiscountEligibleUsers queries the "discount_eligible_users" edge of the DiscountOffer entity.
func (do *DiscountOffer) QueryDiscountEligibleUsers() *UserQuery {
	return NewDiscountOfferClient(do.config).QueryDiscountEligibleUsers(do)
}

// QueryDiscountOfferNotification queries the "discount_offer_notification" edge of the DiscountOffer entity.
func (do *DiscountOffer) QueryDiscountOfferNotification() *NotificationQuery {
	return NewDiscountOfferClient(do.config).QueryDiscountOfferNotification(do)
}

// Update returns a builder for updating this DiscountOffer.
// Note that you need to call DiscountOffer.Unwrap() before calling this method if this DiscountOffer
// was returned from a transaction, and the transaction was committed or rolled back.
func (do *DiscountOffer) Update() *DiscountOfferUpdateOne {
	return NewDiscountOfferClient(do.config).UpdateOne(do)
}

// Unwrap unwraps the DiscountOffer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (do *DiscountOffer) Unwrap() *DiscountOffer {
	_tx, ok := do.config.driver.(*txDriver)
	if !ok {
		panic("ent: DiscountOffer is not a transactional entity")
	}
	do.config.driver = _tx.drv
	return do
}

// String implements the fmt.Stringer.
func (do *DiscountOffer) String() string {
	var builder strings.Builder
	builder.WriteString("DiscountOffer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", do.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", do.Amount))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", do.Type))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(do.Currency)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(do.Description)
	builder.WriteString(", ")
	builder.WriteString("merchant_specific_identification=")
	builder.WriteString(do.MerchantSpecificIdentification)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(do.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(do.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDiscountEligibleUsers returns the DiscountEligibleUsers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (do *DiscountOffer) NamedDiscountEligibleUsers(name string) ([]*User, error) {
	if do.Edges.namedDiscountEligibleUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := do.Edges.namedDiscountEligibleUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (do *DiscountOffer) appendNamedDiscountEligibleUsers(name string, edges ...*User) {
	if do.Edges.namedDiscountEligibleUsers == nil {
		do.Edges.namedDiscountEligibleUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		do.Edges.namedDiscountEligibleUsers[name] = []*User{}
	} else {
		do.Edges.namedDiscountEligibleUsers[name] = append(do.Edges.namedDiscountEligibleUsers[name], edges...)
	}
}

// DiscountOffers is a parsable slice of DiscountOffer.
type DiscountOffers []*DiscountOffer

func (do DiscountOffers) config(cfg config) {
	for _i := range do {
		do[_i].config = cfg
	}
}
