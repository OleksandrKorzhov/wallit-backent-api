// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"wallit/ent/plaidinstitution"
	"wallit/ent/plaidinstitutionaccount"
	"wallit/ent/plaiditem"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaidInstitutionCreate is the builder for creating a PlaidInstitution entity.
type PlaidInstitutionCreate struct {
	config
	mutation *PlaidInstitutionMutation
	hooks    []Hook
}

// SetInstitutionID sets the "institution_id" field.
func (pic *PlaidInstitutionCreate) SetInstitutionID(s string) *PlaidInstitutionCreate {
	pic.mutation.SetInstitutionID(s)
	return pic
}

// SetName sets the "name" field.
func (pic *PlaidInstitutionCreate) SetName(s string) *PlaidInstitutionCreate {
	pic.mutation.SetName(s)
	return pic
}

// SetPlaidItemID sets the "plaid_item" edge to the PlaidItem entity by ID.
func (pic *PlaidInstitutionCreate) SetPlaidItemID(id int) *PlaidInstitutionCreate {
	pic.mutation.SetPlaidItemID(id)
	return pic
}

// SetNillablePlaidItemID sets the "plaid_item" edge to the PlaidItem entity by ID if the given value is not nil.
func (pic *PlaidInstitutionCreate) SetNillablePlaidItemID(id *int) *PlaidInstitutionCreate {
	if id != nil {
		pic = pic.SetPlaidItemID(*id)
	}
	return pic
}

// SetPlaidItem sets the "plaid_item" edge to the PlaidItem entity.
func (pic *PlaidInstitutionCreate) SetPlaidItem(p *PlaidItem) *PlaidInstitutionCreate {
	return pic.SetPlaidItemID(p.ID)
}

// AddAccountIDs adds the "accounts" edge to the PlaidInstitutionAccount entity by IDs.
func (pic *PlaidInstitutionCreate) AddAccountIDs(ids ...int) *PlaidInstitutionCreate {
	pic.mutation.AddAccountIDs(ids...)
	return pic
}

// AddAccounts adds the "accounts" edges to the PlaidInstitutionAccount entity.
func (pic *PlaidInstitutionCreate) AddAccounts(p ...*PlaidInstitutionAccount) *PlaidInstitutionCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pic.AddAccountIDs(ids...)
}

// Mutation returns the PlaidInstitutionMutation object of the builder.
func (pic *PlaidInstitutionCreate) Mutation() *PlaidInstitutionMutation {
	return pic.mutation
}

// Save creates the PlaidInstitution in the database.
func (pic *PlaidInstitutionCreate) Save(ctx context.Context) (*PlaidInstitution, error) {
	return withHooks[*PlaidInstitution, PlaidInstitutionMutation](ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PlaidInstitutionCreate) SaveX(ctx context.Context) *PlaidInstitution {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *PlaidInstitutionCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *PlaidInstitutionCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *PlaidInstitutionCreate) check() error {
	if _, ok := pic.mutation.InstitutionID(); !ok {
		return &ValidationError{Name: "institution_id", err: errors.New(`ent: missing required field "PlaidInstitution.institution_id"`)}
	}
	if _, ok := pic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PlaidInstitution.name"`)}
	}
	return nil
}

func (pic *PlaidInstitutionCreate) sqlSave(ctx context.Context) (*PlaidInstitution, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *PlaidInstitutionCreate) createSpec() (*PlaidInstitution, *sqlgraph.CreateSpec) {
	var (
		_node = &PlaidInstitution{config: pic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: plaidinstitution.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plaidinstitution.FieldID,
			},
		}
	)
	if value, ok := pic.mutation.InstitutionID(); ok {
		_spec.SetField(plaidinstitution.FieldInstitutionID, field.TypeString, value)
		_node.InstitutionID = value
	}
	if value, ok := pic.mutation.Name(); ok {
		_spec.SetField(plaidinstitution.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := pic.mutation.PlaidItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   plaidinstitution.PlaidItemTable,
			Columns: []string{plaidinstitution.PlaidItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.plaid_item_institution = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitution.AccountsTable,
			Columns: []string{plaidinstitution.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitutionaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlaidInstitutionCreateBulk is the builder for creating many PlaidInstitution entities in bulk.
type PlaidInstitutionCreateBulk struct {
	config
	builders []*PlaidInstitutionCreate
}

// Save creates the PlaidInstitution entities in the database.
func (picb *PlaidInstitutionCreateBulk) Save(ctx context.Context) ([]*PlaidInstitution, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*PlaidInstitution, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaidInstitutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *PlaidInstitutionCreateBulk) SaveX(ctx context.Context) []*PlaidInstitution {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *PlaidInstitutionCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *PlaidInstitutionCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
