// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"wallit/ent/user"
	"wallit/ent/usernotificationchannelpreferences"

	"entgo.io/ent/dialect/sql"
)

// UserNotificationChannelPreferences is the model entity for the UserNotificationChannelPreferences schema.
type UserNotificationChannelPreferences struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Chanel holds the value of the "chanel" field.
	Chanel usernotificationchannelpreferences.Chanel `json:"chanel,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserNotificationChannelPreferencesQuery when eager-loading is set.
	Edges                      UserNotificationChannelPreferencesEdges `json:"edges"`
	user_notification_channels *int
}

// UserNotificationChannelPreferencesEdges holds the relations/edges for other nodes in the graph.
type UserNotificationChannelPreferencesEdges struct {
	// ChanelUsers holds the value of the chanel_users edge.
	ChanelUsers *User `json:"chanel_users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ChanelUsersOrErr returns the ChanelUsers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserNotificationChannelPreferencesEdges) ChanelUsersOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.ChanelUsers == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ChanelUsers, nil
	}
	return nil, &NotLoadedError{edge: "chanel_users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserNotificationChannelPreferences) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usernotificationchannelpreferences.FieldID:
			values[i] = new(sql.NullInt64)
		case usernotificationchannelpreferences.FieldChanel:
			values[i] = new(sql.NullString)
		case usernotificationchannelpreferences.ForeignKeys[0]: // user_notification_channels
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserNotificationChannelPreferences", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserNotificationChannelPreferences fields.
func (uncp *UserNotificationChannelPreferences) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usernotificationchannelpreferences.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uncp.ID = int(value.Int64)
		case usernotificationchannelpreferences.FieldChanel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chanel", values[i])
			} else if value.Valid {
				uncp.Chanel = usernotificationchannelpreferences.Chanel(value.String)
			}
		case usernotificationchannelpreferences.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_notification_channels", value)
			} else if value.Valid {
				uncp.user_notification_channels = new(int)
				*uncp.user_notification_channels = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryChanelUsers queries the "chanel_users" edge of the UserNotificationChannelPreferences entity.
func (uncp *UserNotificationChannelPreferences) QueryChanelUsers() *UserQuery {
	return NewUserNotificationChannelPreferencesClient(uncp.config).QueryChanelUsers(uncp)
}

// Update returns a builder for updating this UserNotificationChannelPreferences.
// Note that you need to call UserNotificationChannelPreferences.Unwrap() before calling this method if this UserNotificationChannelPreferences
// was returned from a transaction, and the transaction was committed or rolled back.
func (uncp *UserNotificationChannelPreferences) Update() *UserNotificationChannelPreferencesUpdateOne {
	return NewUserNotificationChannelPreferencesClient(uncp.config).UpdateOne(uncp)
}

// Unwrap unwraps the UserNotificationChannelPreferences entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uncp *UserNotificationChannelPreferences) Unwrap() *UserNotificationChannelPreferences {
	_tx, ok := uncp.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserNotificationChannelPreferences is not a transactional entity")
	}
	uncp.config.driver = _tx.drv
	return uncp
}

// String implements the fmt.Stringer.
func (uncp *UserNotificationChannelPreferences) String() string {
	var builder strings.Builder
	builder.WriteString("UserNotificationChannelPreferences(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uncp.ID))
	builder.WriteString("chanel=")
	builder.WriteString(fmt.Sprintf("%v", uncp.Chanel))
	builder.WriteByte(')')
	return builder.String()
}

// UserNotificationChannelPreferencesSlice is a parsable slice of UserNotificationChannelPreferences.
type UserNotificationChannelPreferencesSlice []*UserNotificationChannelPreferences

func (uncp UserNotificationChannelPreferencesSlice) config(cfg config) {
	for _i := range uncp {
		uncp[_i].config = cfg
	}
}
