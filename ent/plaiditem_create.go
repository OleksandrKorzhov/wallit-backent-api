// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wallit/ent/plaidinstitution"
	"wallit/ent/plaiditem"
	"wallit/ent/transactionsync"
	"wallit/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaidItemCreate is the builder for creating a PlaidItem entity.
type PlaidItemCreate struct {
	config
	mutation *PlaidItemMutation
	hooks    []Hook
}

// SetItemID sets the "item_id" field.
func (pic *PlaidItemCreate) SetItemID(s string) *PlaidItemCreate {
	pic.mutation.SetItemID(s)
	return pic
}

// SetAccessToken sets the "access_token" field.
func (pic *PlaidItemCreate) SetAccessToken(s string) *PlaidItemCreate {
	pic.mutation.SetAccessToken(s)
	return pic
}

// SetCreatedAt sets the "created_at" field.
func (pic *PlaidItemCreate) SetCreatedAt(t time.Time) *PlaidItemCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pic *PlaidItemCreate) SetNillableCreatedAt(t *time.Time) *PlaidItemCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetUpdatedAt sets the "updated_at" field.
func (pic *PlaidItemCreate) SetUpdatedAt(t time.Time) *PlaidItemCreate {
	pic.mutation.SetUpdatedAt(t)
	return pic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pic *PlaidItemCreate) SetNillableUpdatedAt(t *time.Time) *PlaidItemCreate {
	if t != nil {
		pic.SetUpdatedAt(*t)
	}
	return pic
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pic *PlaidItemCreate) SetOwnerID(id int) *PlaidItemCreate {
	pic.mutation.SetOwnerID(id)
	return pic
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (pic *PlaidItemCreate) SetNillableOwnerID(id *int) *PlaidItemCreate {
	if id != nil {
		pic = pic.SetOwnerID(*id)
	}
	return pic
}

// SetOwner sets the "owner" edge to the User entity.
func (pic *PlaidItemCreate) SetOwner(u *User) *PlaidItemCreate {
	return pic.SetOwnerID(u.ID)
}

// AddTransactionSyncIDs adds the "transaction_syncs" edge to the TransactionSync entity by IDs.
func (pic *PlaidItemCreate) AddTransactionSyncIDs(ids ...int) *PlaidItemCreate {
	pic.mutation.AddTransactionSyncIDs(ids...)
	return pic
}

// AddTransactionSyncs adds the "transaction_syncs" edges to the TransactionSync entity.
func (pic *PlaidItemCreate) AddTransactionSyncs(t ...*TransactionSync) *PlaidItemCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pic.AddTransactionSyncIDs(ids...)
}

// SetInstitutionID sets the "institution" edge to the PlaidInstitution entity by ID.
func (pic *PlaidItemCreate) SetInstitutionID(id int) *PlaidItemCreate {
	pic.mutation.SetInstitutionID(id)
	return pic
}

// SetNillableInstitutionID sets the "institution" edge to the PlaidInstitution entity by ID if the given value is not nil.
func (pic *PlaidItemCreate) SetNillableInstitutionID(id *int) *PlaidItemCreate {
	if id != nil {
		pic = pic.SetInstitutionID(*id)
	}
	return pic
}

// SetInstitution sets the "institution" edge to the PlaidInstitution entity.
func (pic *PlaidItemCreate) SetInstitution(p *PlaidInstitution) *PlaidItemCreate {
	return pic.SetInstitutionID(p.ID)
}

// Mutation returns the PlaidItemMutation object of the builder.
func (pic *PlaidItemCreate) Mutation() *PlaidItemMutation {
	return pic.mutation
}

// Save creates the PlaidItem in the database.
func (pic *PlaidItemCreate) Save(ctx context.Context) (*PlaidItem, error) {
	pic.defaults()
	return withHooks[*PlaidItem, PlaidItemMutation](ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PlaidItemCreate) SaveX(ctx context.Context) *PlaidItem {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *PlaidItemCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *PlaidItemCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *PlaidItemCreate) defaults() {
	if _, ok := pic.mutation.CreatedAt(); !ok {
		v := plaiditem.DefaultCreatedAt()
		pic.mutation.SetCreatedAt(v)
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		v := plaiditem.DefaultUpdatedAt()
		pic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *PlaidItemCreate) check() error {
	if _, ok := pic.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item_id", err: errors.New(`ent: missing required field "PlaidItem.item_id"`)}
	}
	if v, ok := pic.mutation.ItemID(); ok {
		if err := plaiditem.ItemIDValidator(v); err != nil {
			return &ValidationError{Name: "item_id", err: fmt.Errorf(`ent: validator failed for field "PlaidItem.item_id": %w`, err)}
		}
	}
	if _, ok := pic.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "PlaidItem.access_token"`)}
	}
	if v, ok := pic.mutation.AccessToken(); ok {
		if err := plaiditem.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "PlaidItem.access_token": %w`, err)}
		}
	}
	if _, ok := pic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PlaidItem.created_at"`)}
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PlaidItem.updated_at"`)}
	}
	return nil
}

func (pic *PlaidItemCreate) sqlSave(ctx context.Context) (*PlaidItem, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *PlaidItemCreate) createSpec() (*PlaidItem, *sqlgraph.CreateSpec) {
	var (
		_node = &PlaidItem{config: pic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: plaiditem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plaiditem.FieldID,
			},
		}
	)
	if value, ok := pic.mutation.ItemID(); ok {
		_spec.SetField(plaiditem.FieldItemID, field.TypeString, value)
		_node.ItemID = value
	}
	if value, ok := pic.mutation.AccessToken(); ok {
		_spec.SetField(plaiditem.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.SetField(plaiditem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.UpdatedAt(); ok {
		_spec.SetField(plaiditem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pic.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plaiditem.OwnerTable,
			Columns: []string{plaiditem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_plaid_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.TransactionSyncsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaiditem.TransactionSyncsTable,
			Columns: []string{plaiditem.TransactionSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactionsync.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plaiditem.InstitutionTable,
			Columns: []string{plaiditem.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlaidItemCreateBulk is the builder for creating many PlaidItem entities in bulk.
type PlaidItemCreateBulk struct {
	config
	builders []*PlaidItemCreate
}

// Save creates the PlaidItem entities in the database.
func (picb *PlaidItemCreateBulk) Save(ctx context.Context) ([]*PlaidItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*PlaidItem, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaidItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *PlaidItemCreateBulk) SaveX(ctx context.Context) []*PlaidItem {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *PlaidItemCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *PlaidItemCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
