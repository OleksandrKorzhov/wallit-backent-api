// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"wallit/ent/migrate"

	"wallit/ent/discountoffer"
	"wallit/ent/merchant"
	"wallit/ent/notification"
	"wallit/ent/plaidinstitution"
	"wallit/ent/plaidinstitutionaccount"
	"wallit/ent/plaiditem"
	"wallit/ent/spendingcategory"
	"wallit/ent/transaction"
	"wallit/ent/transactionsync"
	"wallit/ent/user"
	"wallit/ent/usernotificationchannelpreferences"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DiscountOffer is the client for interacting with the DiscountOffer builders.
	DiscountOffer *DiscountOfferClient
	// Merchant is the client for interacting with the Merchant builders.
	Merchant *MerchantClient
	// Notification is the client for interacting with the Notification builders.
	Notification *NotificationClient
	// PlaidInstitution is the client for interacting with the PlaidInstitution builders.
	PlaidInstitution *PlaidInstitutionClient
	// PlaidInstitutionAccount is the client for interacting with the PlaidInstitutionAccount builders.
	PlaidInstitutionAccount *PlaidInstitutionAccountClient
	// PlaidItem is the client for interacting with the PlaidItem builders.
	PlaidItem *PlaidItemClient
	// SpendingCategory is the client for interacting with the SpendingCategory builders.
	SpendingCategory *SpendingCategoryClient
	// Transaction is the client for interacting with the Transaction builders.
	Transaction *TransactionClient
	// TransactionSync is the client for interacting with the TransactionSync builders.
	TransactionSync *TransactionSyncClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserNotificationChannelPreferences is the client for interacting with the UserNotificationChannelPreferences builders.
	UserNotificationChannelPreferences *UserNotificationChannelPreferencesClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DiscountOffer = NewDiscountOfferClient(c.config)
	c.Merchant = NewMerchantClient(c.config)
	c.Notification = NewNotificationClient(c.config)
	c.PlaidInstitution = NewPlaidInstitutionClient(c.config)
	c.PlaidInstitutionAccount = NewPlaidInstitutionAccountClient(c.config)
	c.PlaidItem = NewPlaidItemClient(c.config)
	c.SpendingCategory = NewSpendingCategoryClient(c.config)
	c.Transaction = NewTransactionClient(c.config)
	c.TransactionSync = NewTransactionSyncClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserNotificationChannelPreferences = NewUserNotificationChannelPreferencesClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                                ctx,
		config:                             cfg,
		DiscountOffer:                      NewDiscountOfferClient(cfg),
		Merchant:                           NewMerchantClient(cfg),
		Notification:                       NewNotificationClient(cfg),
		PlaidInstitution:                   NewPlaidInstitutionClient(cfg),
		PlaidInstitutionAccount:            NewPlaidInstitutionAccountClient(cfg),
		PlaidItem:                          NewPlaidItemClient(cfg),
		SpendingCategory:                   NewSpendingCategoryClient(cfg),
		Transaction:                        NewTransactionClient(cfg),
		TransactionSync:                    NewTransactionSyncClient(cfg),
		User:                               NewUserClient(cfg),
		UserNotificationChannelPreferences: NewUserNotificationChannelPreferencesClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                                ctx,
		config:                             cfg,
		DiscountOffer:                      NewDiscountOfferClient(cfg),
		Merchant:                           NewMerchantClient(cfg),
		Notification:                       NewNotificationClient(cfg),
		PlaidInstitution:                   NewPlaidInstitutionClient(cfg),
		PlaidInstitutionAccount:            NewPlaidInstitutionAccountClient(cfg),
		PlaidItem:                          NewPlaidItemClient(cfg),
		SpendingCategory:                   NewSpendingCategoryClient(cfg),
		Transaction:                        NewTransactionClient(cfg),
		TransactionSync:                    NewTransactionSyncClient(cfg),
		User:                               NewUserClient(cfg),
		UserNotificationChannelPreferences: NewUserNotificationChannelPreferencesClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DiscountOffer.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.DiscountOffer.Use(hooks...)
	c.Merchant.Use(hooks...)
	c.Notification.Use(hooks...)
	c.PlaidInstitution.Use(hooks...)
	c.PlaidInstitutionAccount.Use(hooks...)
	c.PlaidItem.Use(hooks...)
	c.SpendingCategory.Use(hooks...)
	c.Transaction.Use(hooks...)
	c.TransactionSync.Use(hooks...)
	c.User.Use(hooks...)
	c.UserNotificationChannelPreferences.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.DiscountOffer.Intercept(interceptors...)
	c.Merchant.Intercept(interceptors...)
	c.Notification.Intercept(interceptors...)
	c.PlaidInstitution.Intercept(interceptors...)
	c.PlaidInstitutionAccount.Intercept(interceptors...)
	c.PlaidItem.Intercept(interceptors...)
	c.SpendingCategory.Intercept(interceptors...)
	c.Transaction.Intercept(interceptors...)
	c.TransactionSync.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.UserNotificationChannelPreferences.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DiscountOfferMutation:
		return c.DiscountOffer.mutate(ctx, m)
	case *MerchantMutation:
		return c.Merchant.mutate(ctx, m)
	case *NotificationMutation:
		return c.Notification.mutate(ctx, m)
	case *PlaidInstitutionMutation:
		return c.PlaidInstitution.mutate(ctx, m)
	case *PlaidInstitutionAccountMutation:
		return c.PlaidInstitutionAccount.mutate(ctx, m)
	case *PlaidItemMutation:
		return c.PlaidItem.mutate(ctx, m)
	case *SpendingCategoryMutation:
		return c.SpendingCategory.mutate(ctx, m)
	case *TransactionMutation:
		return c.Transaction.mutate(ctx, m)
	case *TransactionSyncMutation:
		return c.TransactionSync.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserNotificationChannelPreferencesMutation:
		return c.UserNotificationChannelPreferences.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DiscountOfferClient is a client for the DiscountOffer schema.
type DiscountOfferClient struct {
	config
}

// NewDiscountOfferClient returns a client for the DiscountOffer from the given config.
func NewDiscountOfferClient(c config) *DiscountOfferClient {
	return &DiscountOfferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `discountoffer.Hooks(f(g(h())))`.
func (c *DiscountOfferClient) Use(hooks ...Hook) {
	c.hooks.DiscountOffer = append(c.hooks.DiscountOffer, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `discountoffer.Intercept(f(g(h())))`.
func (c *DiscountOfferClient) Intercept(interceptors ...Interceptor) {
	c.inters.DiscountOffer = append(c.inters.DiscountOffer, interceptors...)
}

// Create returns a builder for creating a DiscountOffer entity.
func (c *DiscountOfferClient) Create() *DiscountOfferCreate {
	mutation := newDiscountOfferMutation(c.config, OpCreate)
	return &DiscountOfferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DiscountOffer entities.
func (c *DiscountOfferClient) CreateBulk(builders ...*DiscountOfferCreate) *DiscountOfferCreateBulk {
	return &DiscountOfferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DiscountOffer.
func (c *DiscountOfferClient) Update() *DiscountOfferUpdate {
	mutation := newDiscountOfferMutation(c.config, OpUpdate)
	return &DiscountOfferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiscountOfferClient) UpdateOne(do *DiscountOffer) *DiscountOfferUpdateOne {
	mutation := newDiscountOfferMutation(c.config, OpUpdateOne, withDiscountOffer(do))
	return &DiscountOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiscountOfferClient) UpdateOneID(id int) *DiscountOfferUpdateOne {
	mutation := newDiscountOfferMutation(c.config, OpUpdateOne, withDiscountOfferID(id))
	return &DiscountOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DiscountOffer.
func (c *DiscountOfferClient) Delete() *DiscountOfferDelete {
	mutation := newDiscountOfferMutation(c.config, OpDelete)
	return &DiscountOfferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DiscountOfferClient) DeleteOne(do *DiscountOffer) *DiscountOfferDeleteOne {
	return c.DeleteOneID(do.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DiscountOfferClient) DeleteOneID(id int) *DiscountOfferDeleteOne {
	builder := c.Delete().Where(discountoffer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiscountOfferDeleteOne{builder}
}

// Query returns a query builder for DiscountOffer.
func (c *DiscountOfferClient) Query() *DiscountOfferQuery {
	return &DiscountOfferQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDiscountOffer},
		inters: c.Interceptors(),
	}
}

// Get returns a DiscountOffer entity by its id.
func (c *DiscountOfferClient) Get(ctx context.Context, id int) (*DiscountOffer, error) {
	return c.Query().Where(discountoffer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiscountOfferClient) GetX(ctx context.Context, id int) *DiscountOffer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwnerMerchant queries the owner_merchant edge of a DiscountOffer.
func (c *DiscountOfferClient) QueryOwnerMerchant(do *DiscountOffer) *MerchantQuery {
	query := (&MerchantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discountoffer.Table, discountoffer.FieldID, id),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, discountoffer.OwnerMerchantTable, discountoffer.OwnerMerchantColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiscountEligibleUsers queries the discount_eligible_users edge of a DiscountOffer.
func (c *DiscountOfferClient) QueryDiscountEligibleUsers(do *DiscountOffer) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discountoffer.Table, discountoffer.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, discountoffer.DiscountEligibleUsersTable, discountoffer.DiscountEligibleUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiscountOfferNotification queries the discount_offer_notification edge of a DiscountOffer.
func (c *DiscountOfferClient) QueryDiscountOfferNotification(do *DiscountOffer) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discountoffer.Table, discountoffer.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, discountoffer.DiscountOfferNotificationTable, discountoffer.DiscountOfferNotificationColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiscountOfferClient) Hooks() []Hook {
	return c.hooks.DiscountOffer
}

// Interceptors returns the client interceptors.
func (c *DiscountOfferClient) Interceptors() []Interceptor {
	return c.inters.DiscountOffer
}

func (c *DiscountOfferClient) mutate(ctx context.Context, m *DiscountOfferMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DiscountOfferCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DiscountOfferUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DiscountOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DiscountOfferDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DiscountOffer mutation op: %q", m.Op())
	}
}

// MerchantClient is a client for the Merchant schema.
type MerchantClient struct {
	config
}

// NewMerchantClient returns a client for the Merchant from the given config.
func NewMerchantClient(c config) *MerchantClient {
	return &MerchantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `merchant.Hooks(f(g(h())))`.
func (c *MerchantClient) Use(hooks ...Hook) {
	c.hooks.Merchant = append(c.hooks.Merchant, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `merchant.Intercept(f(g(h())))`.
func (c *MerchantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Merchant = append(c.inters.Merchant, interceptors...)
}

// Create returns a builder for creating a Merchant entity.
func (c *MerchantClient) Create() *MerchantCreate {
	mutation := newMerchantMutation(c.config, OpCreate)
	return &MerchantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Merchant entities.
func (c *MerchantClient) CreateBulk(builders ...*MerchantCreate) *MerchantCreateBulk {
	return &MerchantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Merchant.
func (c *MerchantClient) Update() *MerchantUpdate {
	mutation := newMerchantMutation(c.config, OpUpdate)
	return &MerchantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MerchantClient) UpdateOne(m *Merchant) *MerchantUpdateOne {
	mutation := newMerchantMutation(c.config, OpUpdateOne, withMerchant(m))
	return &MerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MerchantClient) UpdateOneID(id int) *MerchantUpdateOne {
	mutation := newMerchantMutation(c.config, OpUpdateOne, withMerchantID(id))
	return &MerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Merchant.
func (c *MerchantClient) Delete() *MerchantDelete {
	mutation := newMerchantMutation(c.config, OpDelete)
	return &MerchantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MerchantClient) DeleteOne(m *Merchant) *MerchantDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MerchantClient) DeleteOneID(id int) *MerchantDeleteOne {
	builder := c.Delete().Where(merchant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MerchantDeleteOne{builder}
}

// Query returns a query builder for Merchant.
func (c *MerchantClient) Query() *MerchantQuery {
	return &MerchantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMerchant},
		inters: c.Interceptors(),
	}
}

// Get returns a Merchant entity by its id.
func (c *MerchantClient) Get(ctx context.Context, id int) (*Merchant, error) {
	return c.Query().Where(merchant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MerchantClient) GetX(ctx context.Context, id int) *Merchant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDiscountOffers queries the discount_offers edge of a Merchant.
func (c *MerchantClient) QueryDiscountOffers(m *Merchant) *DiscountOfferQuery {
	query := (&DiscountOfferClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchant.Table, merchant.FieldID, id),
			sqlgraph.To(discountoffer.Table, discountoffer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, merchant.DiscountOffersTable, merchant.DiscountOffersColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MerchantClient) Hooks() []Hook {
	return c.hooks.Merchant
}

// Interceptors returns the client interceptors.
func (c *MerchantClient) Interceptors() []Interceptor {
	return c.inters.Merchant
}

func (c *MerchantClient) mutate(ctx context.Context, m *MerchantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MerchantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MerchantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MerchantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Merchant mutation op: %q", m.Op())
	}
}

// NotificationClient is a client for the Notification schema.
type NotificationClient struct {
	config
}

// NewNotificationClient returns a client for the Notification from the given config.
func NewNotificationClient(c config) *NotificationClient {
	return &NotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notification.Hooks(f(g(h())))`.
func (c *NotificationClient) Use(hooks ...Hook) {
	c.hooks.Notification = append(c.hooks.Notification, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notification.Intercept(f(g(h())))`.
func (c *NotificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Notification = append(c.inters.Notification, interceptors...)
}

// Create returns a builder for creating a Notification entity.
func (c *NotificationClient) Create() *NotificationCreate {
	mutation := newNotificationMutation(c.config, OpCreate)
	return &NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notification entities.
func (c *NotificationClient) CreateBulk(builders ...*NotificationCreate) *NotificationCreateBulk {
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notification.
func (c *NotificationClient) Update() *NotificationUpdate {
	mutation := newNotificationMutation(c.config, OpUpdate)
	return &NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationClient) UpdateOne(n *Notification) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotification(n))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationClient) UpdateOneID(id int) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotificationID(id))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notification.
func (c *NotificationClient) Delete() *NotificationDelete {
	mutation := newNotificationMutation(c.config, OpDelete)
	return &NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationClient) DeleteOne(n *Notification) *NotificationDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationClient) DeleteOneID(id int) *NotificationDeleteOne {
	builder := c.Delete().Where(notification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationDeleteOne{builder}
}

// Query returns a query builder for Notification.
func (c *NotificationClient) Query() *NotificationQuery {
	return &NotificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotification},
		inters: c.Interceptors(),
	}
}

// Get returns a Notification entity by its id.
func (c *NotificationClient) Get(ctx context.Context, id int) (*Notification, error) {
	return c.Query().Where(notification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationClient) GetX(ctx context.Context, id int) *Notification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotificationRecipient queries the notification_recipient edge of a Notification.
func (c *NotificationClient) QueryNotificationRecipient(n *Notification) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notification.NotificationRecipientTable, notification.NotificationRecipientColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationDiscountOffer queries the notification_discount_offer edge of a Notification.
func (c *NotificationClient) QueryNotificationDiscountOffer(n *Notification) *DiscountOfferQuery {
	query := (&DiscountOfferClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(discountoffer.Table, discountoffer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, notification.NotificationDiscountOfferTable, notification.NotificationDiscountOfferColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationClient) Hooks() []Hook {
	return c.hooks.Notification
}

// Interceptors returns the client interceptors.
func (c *NotificationClient) Interceptors() []Interceptor {
	return c.inters.Notification
}

func (c *NotificationClient) mutate(ctx context.Context, m *NotificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Notification mutation op: %q", m.Op())
	}
}

// PlaidInstitutionClient is a client for the PlaidInstitution schema.
type PlaidInstitutionClient struct {
	config
}

// NewPlaidInstitutionClient returns a client for the PlaidInstitution from the given config.
func NewPlaidInstitutionClient(c config) *PlaidInstitutionClient {
	return &PlaidInstitutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plaidinstitution.Hooks(f(g(h())))`.
func (c *PlaidInstitutionClient) Use(hooks ...Hook) {
	c.hooks.PlaidInstitution = append(c.hooks.PlaidInstitution, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `plaidinstitution.Intercept(f(g(h())))`.
func (c *PlaidInstitutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlaidInstitution = append(c.inters.PlaidInstitution, interceptors...)
}

// Create returns a builder for creating a PlaidInstitution entity.
func (c *PlaidInstitutionClient) Create() *PlaidInstitutionCreate {
	mutation := newPlaidInstitutionMutation(c.config, OpCreate)
	return &PlaidInstitutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlaidInstitution entities.
func (c *PlaidInstitutionClient) CreateBulk(builders ...*PlaidInstitutionCreate) *PlaidInstitutionCreateBulk {
	return &PlaidInstitutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlaidInstitution.
func (c *PlaidInstitutionClient) Update() *PlaidInstitutionUpdate {
	mutation := newPlaidInstitutionMutation(c.config, OpUpdate)
	return &PlaidInstitutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaidInstitutionClient) UpdateOne(pi *PlaidInstitution) *PlaidInstitutionUpdateOne {
	mutation := newPlaidInstitutionMutation(c.config, OpUpdateOne, withPlaidInstitution(pi))
	return &PlaidInstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaidInstitutionClient) UpdateOneID(id int) *PlaidInstitutionUpdateOne {
	mutation := newPlaidInstitutionMutation(c.config, OpUpdateOne, withPlaidInstitutionID(id))
	return &PlaidInstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlaidInstitution.
func (c *PlaidInstitutionClient) Delete() *PlaidInstitutionDelete {
	mutation := newPlaidInstitutionMutation(c.config, OpDelete)
	return &PlaidInstitutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlaidInstitutionClient) DeleteOne(pi *PlaidInstitution) *PlaidInstitutionDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlaidInstitutionClient) DeleteOneID(id int) *PlaidInstitutionDeleteOne {
	builder := c.Delete().Where(plaidinstitution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaidInstitutionDeleteOne{builder}
}

// Query returns a query builder for PlaidInstitution.
func (c *PlaidInstitutionClient) Query() *PlaidInstitutionQuery {
	return &PlaidInstitutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlaidInstitution},
		inters: c.Interceptors(),
	}
}

// Get returns a PlaidInstitution entity by its id.
func (c *PlaidInstitutionClient) Get(ctx context.Context, id int) (*PlaidInstitution, error) {
	return c.Query().Where(plaidinstitution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaidInstitutionClient) GetX(ctx context.Context, id int) *PlaidInstitution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlaidItem queries the plaid_item edge of a PlaidInstitution.
func (c *PlaidInstitutionClient) QueryPlaidItem(pi *PlaidInstitution) *PlaidItemQuery {
	query := (&PlaidItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plaidinstitution.Table, plaidinstitution.FieldID, id),
			sqlgraph.To(plaiditem.Table, plaiditem.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, plaidinstitution.PlaidItemTable, plaidinstitution.PlaidItemColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccounts queries the accounts edge of a PlaidInstitution.
func (c *PlaidInstitutionClient) QueryAccounts(pi *PlaidInstitution) *PlaidInstitutionAccountQuery {
	query := (&PlaidInstitutionAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plaidinstitution.Table, plaidinstitution.FieldID, id),
			sqlgraph.To(plaidinstitutionaccount.Table, plaidinstitutionaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plaidinstitution.AccountsTable, plaidinstitution.AccountsColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlaidInstitutionClient) Hooks() []Hook {
	return c.hooks.PlaidInstitution
}

// Interceptors returns the client interceptors.
func (c *PlaidInstitutionClient) Interceptors() []Interceptor {
	return c.inters.PlaidInstitution
}

func (c *PlaidInstitutionClient) mutate(ctx context.Context, m *PlaidInstitutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlaidInstitutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlaidInstitutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlaidInstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlaidInstitutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlaidInstitution mutation op: %q", m.Op())
	}
}

// PlaidInstitutionAccountClient is a client for the PlaidInstitutionAccount schema.
type PlaidInstitutionAccountClient struct {
	config
}

// NewPlaidInstitutionAccountClient returns a client for the PlaidInstitutionAccount from the given config.
func NewPlaidInstitutionAccountClient(c config) *PlaidInstitutionAccountClient {
	return &PlaidInstitutionAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plaidinstitutionaccount.Hooks(f(g(h())))`.
func (c *PlaidInstitutionAccountClient) Use(hooks ...Hook) {
	c.hooks.PlaidInstitutionAccount = append(c.hooks.PlaidInstitutionAccount, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `plaidinstitutionaccount.Intercept(f(g(h())))`.
func (c *PlaidInstitutionAccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlaidInstitutionAccount = append(c.inters.PlaidInstitutionAccount, interceptors...)
}

// Create returns a builder for creating a PlaidInstitutionAccount entity.
func (c *PlaidInstitutionAccountClient) Create() *PlaidInstitutionAccountCreate {
	mutation := newPlaidInstitutionAccountMutation(c.config, OpCreate)
	return &PlaidInstitutionAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlaidInstitutionAccount entities.
func (c *PlaidInstitutionAccountClient) CreateBulk(builders ...*PlaidInstitutionAccountCreate) *PlaidInstitutionAccountCreateBulk {
	return &PlaidInstitutionAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlaidInstitutionAccount.
func (c *PlaidInstitutionAccountClient) Update() *PlaidInstitutionAccountUpdate {
	mutation := newPlaidInstitutionAccountMutation(c.config, OpUpdate)
	return &PlaidInstitutionAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaidInstitutionAccountClient) UpdateOne(pia *PlaidInstitutionAccount) *PlaidInstitutionAccountUpdateOne {
	mutation := newPlaidInstitutionAccountMutation(c.config, OpUpdateOne, withPlaidInstitutionAccount(pia))
	return &PlaidInstitutionAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaidInstitutionAccountClient) UpdateOneID(id int) *PlaidInstitutionAccountUpdateOne {
	mutation := newPlaidInstitutionAccountMutation(c.config, OpUpdateOne, withPlaidInstitutionAccountID(id))
	return &PlaidInstitutionAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlaidInstitutionAccount.
func (c *PlaidInstitutionAccountClient) Delete() *PlaidInstitutionAccountDelete {
	mutation := newPlaidInstitutionAccountMutation(c.config, OpDelete)
	return &PlaidInstitutionAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlaidInstitutionAccountClient) DeleteOne(pia *PlaidInstitutionAccount) *PlaidInstitutionAccountDeleteOne {
	return c.DeleteOneID(pia.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlaidInstitutionAccountClient) DeleteOneID(id int) *PlaidInstitutionAccountDeleteOne {
	builder := c.Delete().Where(plaidinstitutionaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaidInstitutionAccountDeleteOne{builder}
}

// Query returns a query builder for PlaidInstitutionAccount.
func (c *PlaidInstitutionAccountClient) Query() *PlaidInstitutionAccountQuery {
	return &PlaidInstitutionAccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlaidInstitutionAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a PlaidInstitutionAccount entity by its id.
func (c *PlaidInstitutionAccountClient) Get(ctx context.Context, id int) (*PlaidInstitutionAccount, error) {
	return c.Query().Where(plaidinstitutionaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaidInstitutionAccountClient) GetX(ctx context.Context, id int) *PlaidInstitutionAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParentInstitution queries the parent_institution edge of a PlaidInstitutionAccount.
func (c *PlaidInstitutionAccountClient) QueryParentInstitution(pia *PlaidInstitutionAccount) *PlaidInstitutionQuery {
	query := (&PlaidInstitutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plaidinstitutionaccount.Table, plaidinstitutionaccount.FieldID, id),
			sqlgraph.To(plaidinstitution.Table, plaidinstitution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, plaidinstitutionaccount.ParentInstitutionTable, plaidinstitutionaccount.ParentInstitutionColumn),
		)
		fromV = sqlgraph.Neighbors(pia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransactions queries the transactions edge of a PlaidInstitutionAccount.
func (c *PlaidInstitutionAccountClient) QueryTransactions(pia *PlaidInstitutionAccount) *TransactionQuery {
	query := (&TransactionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plaidinstitutionaccount.Table, plaidinstitutionaccount.FieldID, id),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plaidinstitutionaccount.TransactionsTable, plaidinstitutionaccount.TransactionsColumn),
		)
		fromV = sqlgraph.Neighbors(pia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlaidInstitutionAccountClient) Hooks() []Hook {
	return c.hooks.PlaidInstitutionAccount
}

// Interceptors returns the client interceptors.
func (c *PlaidInstitutionAccountClient) Interceptors() []Interceptor {
	return c.inters.PlaidInstitutionAccount
}

func (c *PlaidInstitutionAccountClient) mutate(ctx context.Context, m *PlaidInstitutionAccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlaidInstitutionAccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlaidInstitutionAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlaidInstitutionAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlaidInstitutionAccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlaidInstitutionAccount mutation op: %q", m.Op())
	}
}

// PlaidItemClient is a client for the PlaidItem schema.
type PlaidItemClient struct {
	config
}

// NewPlaidItemClient returns a client for the PlaidItem from the given config.
func NewPlaidItemClient(c config) *PlaidItemClient {
	return &PlaidItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plaiditem.Hooks(f(g(h())))`.
func (c *PlaidItemClient) Use(hooks ...Hook) {
	c.hooks.PlaidItem = append(c.hooks.PlaidItem, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `plaiditem.Intercept(f(g(h())))`.
func (c *PlaidItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlaidItem = append(c.inters.PlaidItem, interceptors...)
}

// Create returns a builder for creating a PlaidItem entity.
func (c *PlaidItemClient) Create() *PlaidItemCreate {
	mutation := newPlaidItemMutation(c.config, OpCreate)
	return &PlaidItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlaidItem entities.
func (c *PlaidItemClient) CreateBulk(builders ...*PlaidItemCreate) *PlaidItemCreateBulk {
	return &PlaidItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlaidItem.
func (c *PlaidItemClient) Update() *PlaidItemUpdate {
	mutation := newPlaidItemMutation(c.config, OpUpdate)
	return &PlaidItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaidItemClient) UpdateOne(pi *PlaidItem) *PlaidItemUpdateOne {
	mutation := newPlaidItemMutation(c.config, OpUpdateOne, withPlaidItem(pi))
	return &PlaidItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaidItemClient) UpdateOneID(id int) *PlaidItemUpdateOne {
	mutation := newPlaidItemMutation(c.config, OpUpdateOne, withPlaidItemID(id))
	return &PlaidItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlaidItem.
func (c *PlaidItemClient) Delete() *PlaidItemDelete {
	mutation := newPlaidItemMutation(c.config, OpDelete)
	return &PlaidItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlaidItemClient) DeleteOne(pi *PlaidItem) *PlaidItemDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlaidItemClient) DeleteOneID(id int) *PlaidItemDeleteOne {
	builder := c.Delete().Where(plaiditem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaidItemDeleteOne{builder}
}

// Query returns a query builder for PlaidItem.
func (c *PlaidItemClient) Query() *PlaidItemQuery {
	return &PlaidItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlaidItem},
		inters: c.Interceptors(),
	}
}

// Get returns a PlaidItem entity by its id.
func (c *PlaidItemClient) Get(ctx context.Context, id int) (*PlaidItem, error) {
	return c.Query().Where(plaiditem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaidItemClient) GetX(ctx context.Context, id int) *PlaidItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a PlaidItem.
func (c *PlaidItemClient) QueryOwner(pi *PlaidItem) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plaiditem.Table, plaiditem.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, plaiditem.OwnerTable, plaiditem.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransactionSyncs queries the transaction_syncs edge of a PlaidItem.
func (c *PlaidItemClient) QueryTransactionSyncs(pi *PlaidItem) *TransactionSyncQuery {
	query := (&TransactionSyncClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plaiditem.Table, plaiditem.FieldID, id),
			sqlgraph.To(transactionsync.Table, transactionsync.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plaiditem.TransactionSyncsTable, plaiditem.TransactionSyncsColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstitution queries the institution edge of a PlaidItem.
func (c *PlaidItemClient) QueryInstitution(pi *PlaidItem) *PlaidInstitutionQuery {
	query := (&PlaidInstitutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plaiditem.Table, plaiditem.FieldID, id),
			sqlgraph.To(plaidinstitution.Table, plaidinstitution.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plaiditem.InstitutionTable, plaiditem.InstitutionColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlaidItemClient) Hooks() []Hook {
	return c.hooks.PlaidItem
}

// Interceptors returns the client interceptors.
func (c *PlaidItemClient) Interceptors() []Interceptor {
	return c.inters.PlaidItem
}

func (c *PlaidItemClient) mutate(ctx context.Context, m *PlaidItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlaidItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlaidItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlaidItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlaidItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlaidItem mutation op: %q", m.Op())
	}
}

// SpendingCategoryClient is a client for the SpendingCategory schema.
type SpendingCategoryClient struct {
	config
}

// NewSpendingCategoryClient returns a client for the SpendingCategory from the given config.
func NewSpendingCategoryClient(c config) *SpendingCategoryClient {
	return &SpendingCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `spendingcategory.Hooks(f(g(h())))`.
func (c *SpendingCategoryClient) Use(hooks ...Hook) {
	c.hooks.SpendingCategory = append(c.hooks.SpendingCategory, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `spendingcategory.Intercept(f(g(h())))`.
func (c *SpendingCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.SpendingCategory = append(c.inters.SpendingCategory, interceptors...)
}

// Create returns a builder for creating a SpendingCategory entity.
func (c *SpendingCategoryClient) Create() *SpendingCategoryCreate {
	mutation := newSpendingCategoryMutation(c.config, OpCreate)
	return &SpendingCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpendingCategory entities.
func (c *SpendingCategoryClient) CreateBulk(builders ...*SpendingCategoryCreate) *SpendingCategoryCreateBulk {
	return &SpendingCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpendingCategory.
func (c *SpendingCategoryClient) Update() *SpendingCategoryUpdate {
	mutation := newSpendingCategoryMutation(c.config, OpUpdate)
	return &SpendingCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpendingCategoryClient) UpdateOne(sc *SpendingCategory) *SpendingCategoryUpdateOne {
	mutation := newSpendingCategoryMutation(c.config, OpUpdateOne, withSpendingCategory(sc))
	return &SpendingCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpendingCategoryClient) UpdateOneID(id int) *SpendingCategoryUpdateOne {
	mutation := newSpendingCategoryMutation(c.config, OpUpdateOne, withSpendingCategoryID(id))
	return &SpendingCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpendingCategory.
func (c *SpendingCategoryClient) Delete() *SpendingCategoryDelete {
	mutation := newSpendingCategoryMutation(c.config, OpDelete)
	return &SpendingCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SpendingCategoryClient) DeleteOne(sc *SpendingCategory) *SpendingCategoryDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SpendingCategoryClient) DeleteOneID(id int) *SpendingCategoryDeleteOne {
	builder := c.Delete().Where(spendingcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpendingCategoryDeleteOne{builder}
}

// Query returns a query builder for SpendingCategory.
func (c *SpendingCategoryClient) Query() *SpendingCategoryQuery {
	return &SpendingCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSpendingCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a SpendingCategory entity by its id.
func (c *SpendingCategoryClient) Get(ctx context.Context, id int) (*SpendingCategory, error) {
	return c.Query().Where(spendingcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpendingCategoryClient) GetX(ctx context.Context, id int) *SpendingCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategoryTransactions queries the category_transactions edge of a SpendingCategory.
func (c *SpendingCategoryClient) QueryCategoryTransactions(sc *SpendingCategory) *TransactionQuery {
	query := (&TransactionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spendingcategory.Table, spendingcategory.FieldID, id),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, spendingcategory.CategoryTransactionsTable, spendingcategory.CategoryTransactionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInterestedUsers queries the interested_users edge of a SpendingCategory.
func (c *SpendingCategoryClient) QueryInterestedUsers(sc *SpendingCategory) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spendingcategory.Table, spendingcategory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, spendingcategory.InterestedUsersTable, spendingcategory.InterestedUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SpendingCategoryClient) Hooks() []Hook {
	return c.hooks.SpendingCategory
}

// Interceptors returns the client interceptors.
func (c *SpendingCategoryClient) Interceptors() []Interceptor {
	return c.inters.SpendingCategory
}

func (c *SpendingCategoryClient) mutate(ctx context.Context, m *SpendingCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SpendingCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SpendingCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SpendingCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SpendingCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SpendingCategory mutation op: %q", m.Op())
	}
}

// TransactionClient is a client for the Transaction schema.
type TransactionClient struct {
	config
}

// NewTransactionClient returns a client for the Transaction from the given config.
func NewTransactionClient(c config) *TransactionClient {
	return &TransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transaction.Hooks(f(g(h())))`.
func (c *TransactionClient) Use(hooks ...Hook) {
	c.hooks.Transaction = append(c.hooks.Transaction, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transaction.Intercept(f(g(h())))`.
func (c *TransactionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Transaction = append(c.inters.Transaction, interceptors...)
}

// Create returns a builder for creating a Transaction entity.
func (c *TransactionClient) Create() *TransactionCreate {
	mutation := newTransactionMutation(c.config, OpCreate)
	return &TransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transaction entities.
func (c *TransactionClient) CreateBulk(builders ...*TransactionCreate) *TransactionCreateBulk {
	return &TransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transaction.
func (c *TransactionClient) Update() *TransactionUpdate {
	mutation := newTransactionMutation(c.config, OpUpdate)
	return &TransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionClient) UpdateOne(t *Transaction) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransaction(t))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionClient) UpdateOneID(id int) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransactionID(id))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transaction.
func (c *TransactionClient) Delete() *TransactionDelete {
	mutation := newTransactionMutation(c.config, OpDelete)
	return &TransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransactionClient) DeleteOne(t *Transaction) *TransactionDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransactionClient) DeleteOneID(id int) *TransactionDeleteOne {
	builder := c.Delete().Where(transaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionDeleteOne{builder}
}

// Query returns a query builder for Transaction.
func (c *TransactionClient) Query() *TransactionQuery {
	return &TransactionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransaction},
		inters: c.Interceptors(),
	}
}

// Get returns a Transaction entity by its id.
func (c *TransactionClient) Get(ctx context.Context, id int) (*Transaction, error) {
	return c.Query().Where(transaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionClient) GetX(ctx context.Context, id int) *Transaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInstitutionAccount queries the institution_account edge of a Transaction.
func (c *TransactionClient) QueryInstitutionAccount(t *Transaction) *PlaidInstitutionAccountQuery {
	query := (&PlaidInstitutionAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(plaidinstitutionaccount.Table, plaidinstitutionaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transaction.InstitutionAccountTable, transaction.InstitutionAccountColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransactionCategories queries the transaction_categories edge of a Transaction.
func (c *TransactionClient) QueryTransactionCategories(t *Transaction) *SpendingCategoryQuery {
	query := (&SpendingCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(spendingcategory.Table, spendingcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, transaction.TransactionCategoriesTable, transaction.TransactionCategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionClient) Hooks() []Hook {
	return c.hooks.Transaction
}

// Interceptors returns the client interceptors.
func (c *TransactionClient) Interceptors() []Interceptor {
	return c.inters.Transaction
}

func (c *TransactionClient) mutate(ctx context.Context, m *TransactionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransactionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransactionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Transaction mutation op: %q", m.Op())
	}
}

// TransactionSyncClient is a client for the TransactionSync schema.
type TransactionSyncClient struct {
	config
}

// NewTransactionSyncClient returns a client for the TransactionSync from the given config.
func NewTransactionSyncClient(c config) *TransactionSyncClient {
	return &TransactionSyncClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transactionsync.Hooks(f(g(h())))`.
func (c *TransactionSyncClient) Use(hooks ...Hook) {
	c.hooks.TransactionSync = append(c.hooks.TransactionSync, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transactionsync.Intercept(f(g(h())))`.
func (c *TransactionSyncClient) Intercept(interceptors ...Interceptor) {
	c.inters.TransactionSync = append(c.inters.TransactionSync, interceptors...)
}

// Create returns a builder for creating a TransactionSync entity.
func (c *TransactionSyncClient) Create() *TransactionSyncCreate {
	mutation := newTransactionSyncMutation(c.config, OpCreate)
	return &TransactionSyncCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TransactionSync entities.
func (c *TransactionSyncClient) CreateBulk(builders ...*TransactionSyncCreate) *TransactionSyncCreateBulk {
	return &TransactionSyncCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TransactionSync.
func (c *TransactionSyncClient) Update() *TransactionSyncUpdate {
	mutation := newTransactionSyncMutation(c.config, OpUpdate)
	return &TransactionSyncUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionSyncClient) UpdateOne(ts *TransactionSync) *TransactionSyncUpdateOne {
	mutation := newTransactionSyncMutation(c.config, OpUpdateOne, withTransactionSync(ts))
	return &TransactionSyncUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionSyncClient) UpdateOneID(id int) *TransactionSyncUpdateOne {
	mutation := newTransactionSyncMutation(c.config, OpUpdateOne, withTransactionSyncID(id))
	return &TransactionSyncUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TransactionSync.
func (c *TransactionSyncClient) Delete() *TransactionSyncDelete {
	mutation := newTransactionSyncMutation(c.config, OpDelete)
	return &TransactionSyncDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransactionSyncClient) DeleteOne(ts *TransactionSync) *TransactionSyncDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransactionSyncClient) DeleteOneID(id int) *TransactionSyncDeleteOne {
	builder := c.Delete().Where(transactionsync.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionSyncDeleteOne{builder}
}

// Query returns a query builder for TransactionSync.
func (c *TransactionSyncClient) Query() *TransactionSyncQuery {
	return &TransactionSyncQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransactionSync},
		inters: c.Interceptors(),
	}
}

// Get returns a TransactionSync entity by its id.
func (c *TransactionSyncClient) Get(ctx context.Context, id int) (*TransactionSync, error) {
	return c.Query().Where(transactionsync.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionSyncClient) GetX(ctx context.Context, id int) *TransactionSync {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItem queries the item edge of a TransactionSync.
func (c *TransactionSyncClient) QueryItem(ts *TransactionSync) *PlaidItemQuery {
	query := (&PlaidItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transactionsync.Table, transactionsync.FieldID, id),
			sqlgraph.To(plaiditem.Table, plaiditem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transactionsync.ItemTable, transactionsync.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(ts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionSyncClient) Hooks() []Hook {
	return c.hooks.TransactionSync
}

// Interceptors returns the client interceptors.
func (c *TransactionSyncClient) Interceptors() []Interceptor {
	return c.inters.TransactionSync
}

func (c *TransactionSyncClient) mutate(ctx context.Context, m *TransactionSyncMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransactionSyncCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransactionSyncUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransactionSyncUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransactionSyncDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TransactionSync mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlaidItems queries the plaid_items edge of a User.
func (c *UserClient) QueryPlaidItems(u *User) *PlaidItemQuery {
	query := (&PlaidItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(plaiditem.Table, plaiditem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PlaidItemsTable, user.PlaidItemsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySpendingCategories queries the spending_categories edge of a User.
func (c *UserClient) QuerySpendingCategories(u *User) *SpendingCategoryQuery {
	query := (&SpendingCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(spendingcategory.Table, spendingcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.SpendingCategoriesTable, user.SpendingCategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationChannels queries the notification_channels edge of a User.
func (c *UserClient) QueryNotificationChannels(u *User) *UserNotificationChannelPreferencesQuery {
	query := (&UserNotificationChannelPreferencesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usernotificationchannelpreferences.Table, usernotificationchannelpreferences.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotificationChannelsTable, user.NotificationChannelsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifications queries the notifications edge of a User.
func (c *UserClient) QueryNotifications(u *User) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotificationsTable, user.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAvailableDiscountOffers queries the available_discount_offers edge of a User.
func (c *UserClient) QueryAvailableDiscountOffers(u *User) *DiscountOfferQuery {
	query := (&DiscountOfferClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(discountoffer.Table, discountoffer.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.AvailableDiscountOffersTable, user.AvailableDiscountOffersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserNotificationChannelPreferencesClient is a client for the UserNotificationChannelPreferences schema.
type UserNotificationChannelPreferencesClient struct {
	config
}

// NewUserNotificationChannelPreferencesClient returns a client for the UserNotificationChannelPreferences from the given config.
func NewUserNotificationChannelPreferencesClient(c config) *UserNotificationChannelPreferencesClient {
	return &UserNotificationChannelPreferencesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usernotificationchannelpreferences.Hooks(f(g(h())))`.
func (c *UserNotificationChannelPreferencesClient) Use(hooks ...Hook) {
	c.hooks.UserNotificationChannelPreferences = append(c.hooks.UserNotificationChannelPreferences, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usernotificationchannelpreferences.Intercept(f(g(h())))`.
func (c *UserNotificationChannelPreferencesClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserNotificationChannelPreferences = append(c.inters.UserNotificationChannelPreferences, interceptors...)
}

// Create returns a builder for creating a UserNotificationChannelPreferences entity.
func (c *UserNotificationChannelPreferencesClient) Create() *UserNotificationChannelPreferencesCreate {
	mutation := newUserNotificationChannelPreferencesMutation(c.config, OpCreate)
	return &UserNotificationChannelPreferencesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserNotificationChannelPreferences entities.
func (c *UserNotificationChannelPreferencesClient) CreateBulk(builders ...*UserNotificationChannelPreferencesCreate) *UserNotificationChannelPreferencesCreateBulk {
	return &UserNotificationChannelPreferencesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserNotificationChannelPreferences.
func (c *UserNotificationChannelPreferencesClient) Update() *UserNotificationChannelPreferencesUpdate {
	mutation := newUserNotificationChannelPreferencesMutation(c.config, OpUpdate)
	return &UserNotificationChannelPreferencesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserNotificationChannelPreferencesClient) UpdateOne(uncp *UserNotificationChannelPreferences) *UserNotificationChannelPreferencesUpdateOne {
	mutation := newUserNotificationChannelPreferencesMutation(c.config, OpUpdateOne, withUserNotificationChannelPreferences(uncp))
	return &UserNotificationChannelPreferencesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserNotificationChannelPreferencesClient) UpdateOneID(id int) *UserNotificationChannelPreferencesUpdateOne {
	mutation := newUserNotificationChannelPreferencesMutation(c.config, OpUpdateOne, withUserNotificationChannelPreferencesID(id))
	return &UserNotificationChannelPreferencesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserNotificationChannelPreferences.
func (c *UserNotificationChannelPreferencesClient) Delete() *UserNotificationChannelPreferencesDelete {
	mutation := newUserNotificationChannelPreferencesMutation(c.config, OpDelete)
	return &UserNotificationChannelPreferencesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserNotificationChannelPreferencesClient) DeleteOne(uncp *UserNotificationChannelPreferences) *UserNotificationChannelPreferencesDeleteOne {
	return c.DeleteOneID(uncp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserNotificationChannelPreferencesClient) DeleteOneID(id int) *UserNotificationChannelPreferencesDeleteOne {
	builder := c.Delete().Where(usernotificationchannelpreferences.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserNotificationChannelPreferencesDeleteOne{builder}
}

// Query returns a query builder for UserNotificationChannelPreferences.
func (c *UserNotificationChannelPreferencesClient) Query() *UserNotificationChannelPreferencesQuery {
	return &UserNotificationChannelPreferencesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserNotificationChannelPreferences},
		inters: c.Interceptors(),
	}
}

// Get returns a UserNotificationChannelPreferences entity by its id.
func (c *UserNotificationChannelPreferencesClient) Get(ctx context.Context, id int) (*UserNotificationChannelPreferences, error) {
	return c.Query().Where(usernotificationchannelpreferences.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserNotificationChannelPreferencesClient) GetX(ctx context.Context, id int) *UserNotificationChannelPreferences {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChanelUsers queries the chanel_users edge of a UserNotificationChannelPreferences.
func (c *UserNotificationChannelPreferencesClient) QueryChanelUsers(uncp *UserNotificationChannelPreferences) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uncp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usernotificationchannelpreferences.Table, usernotificationchannelpreferences.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usernotificationchannelpreferences.ChanelUsersTable, usernotificationchannelpreferences.ChanelUsersColumn),
		)
		fromV = sqlgraph.Neighbors(uncp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserNotificationChannelPreferencesClient) Hooks() []Hook {
	return c.hooks.UserNotificationChannelPreferences
}

// Interceptors returns the client interceptors.
func (c *UserNotificationChannelPreferencesClient) Interceptors() []Interceptor {
	return c.inters.UserNotificationChannelPreferences
}

func (c *UserNotificationChannelPreferencesClient) mutate(ctx context.Context, m *UserNotificationChannelPreferencesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserNotificationChannelPreferencesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserNotificationChannelPreferencesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserNotificationChannelPreferencesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserNotificationChannelPreferencesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserNotificationChannelPreferences mutation op: %q", m.Op())
	}
}
