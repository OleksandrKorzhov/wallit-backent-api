// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"wallit/ent/plaidinstitution"
	"wallit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaidInstitutionDelete is the builder for deleting a PlaidInstitution entity.
type PlaidInstitutionDelete struct {
	config
	hooks    []Hook
	mutation *PlaidInstitutionMutation
}

// Where appends a list predicates to the PlaidInstitutionDelete builder.
func (pid *PlaidInstitutionDelete) Where(ps ...predicate.PlaidInstitution) *PlaidInstitutionDelete {
	pid.mutation.Where(ps...)
	return pid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pid *PlaidInstitutionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, PlaidInstitutionMutation](ctx, pid.sqlExec, pid.mutation, pid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pid *PlaidInstitutionDelete) ExecX(ctx context.Context) int {
	n, err := pid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pid *PlaidInstitutionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: plaidinstitution.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plaidinstitution.FieldID,
			},
		},
	}
	if ps := pid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pid.mutation.done = true
	return affected, err
}

// PlaidInstitutionDeleteOne is the builder for deleting a single PlaidInstitution entity.
type PlaidInstitutionDeleteOne struct {
	pid *PlaidInstitutionDelete
}

// Where appends a list predicates to the PlaidInstitutionDelete builder.
func (pido *PlaidInstitutionDeleteOne) Where(ps ...predicate.PlaidInstitution) *PlaidInstitutionDeleteOne {
	pido.pid.mutation.Where(ps...)
	return pido
}

// Exec executes the deletion query.
func (pido *PlaidInstitutionDeleteOne) Exec(ctx context.Context) error {
	n, err := pido.pid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{plaidinstitution.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pido *PlaidInstitutionDeleteOne) ExecX(ctx context.Context) {
	if err := pido.Exec(ctx); err != nil {
		panic(err)
	}
}
