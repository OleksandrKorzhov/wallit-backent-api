// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"wallit/ent/plaidinstitution"
	"wallit/ent/plaidinstitutionaccount"
	"wallit/ent/plaiditem"
	"wallit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaidInstitutionUpdate is the builder for updating PlaidInstitution entities.
type PlaidInstitutionUpdate struct {
	config
	hooks    []Hook
	mutation *PlaidInstitutionMutation
}

// Where appends a list predicates to the PlaidInstitutionUpdate builder.
func (piu *PlaidInstitutionUpdate) Where(ps ...predicate.PlaidInstitution) *PlaidInstitutionUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetInstitutionID sets the "institution_id" field.
func (piu *PlaidInstitutionUpdate) SetInstitutionID(s string) *PlaidInstitutionUpdate {
	piu.mutation.SetInstitutionID(s)
	return piu
}

// SetName sets the "name" field.
func (piu *PlaidInstitutionUpdate) SetName(s string) *PlaidInstitutionUpdate {
	piu.mutation.SetName(s)
	return piu
}

// SetPlaidItemID sets the "plaid_item" edge to the PlaidItem entity by ID.
func (piu *PlaidInstitutionUpdate) SetPlaidItemID(id int) *PlaidInstitutionUpdate {
	piu.mutation.SetPlaidItemID(id)
	return piu
}

// SetNillablePlaidItemID sets the "plaid_item" edge to the PlaidItem entity by ID if the given value is not nil.
func (piu *PlaidInstitutionUpdate) SetNillablePlaidItemID(id *int) *PlaidInstitutionUpdate {
	if id != nil {
		piu = piu.SetPlaidItemID(*id)
	}
	return piu
}

// SetPlaidItem sets the "plaid_item" edge to the PlaidItem entity.
func (piu *PlaidInstitutionUpdate) SetPlaidItem(p *PlaidItem) *PlaidInstitutionUpdate {
	return piu.SetPlaidItemID(p.ID)
}

// AddAccountIDs adds the "accounts" edge to the PlaidInstitutionAccount entity by IDs.
func (piu *PlaidInstitutionUpdate) AddAccountIDs(ids ...int) *PlaidInstitutionUpdate {
	piu.mutation.AddAccountIDs(ids...)
	return piu
}

// AddAccounts adds the "accounts" edges to the PlaidInstitutionAccount entity.
func (piu *PlaidInstitutionUpdate) AddAccounts(p ...*PlaidInstitutionAccount) *PlaidInstitutionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.AddAccountIDs(ids...)
}

// Mutation returns the PlaidInstitutionMutation object of the builder.
func (piu *PlaidInstitutionUpdate) Mutation() *PlaidInstitutionMutation {
	return piu.mutation
}

// ClearPlaidItem clears the "plaid_item" edge to the PlaidItem entity.
func (piu *PlaidInstitutionUpdate) ClearPlaidItem() *PlaidInstitutionUpdate {
	piu.mutation.ClearPlaidItem()
	return piu
}

// ClearAccounts clears all "accounts" edges to the PlaidInstitutionAccount entity.
func (piu *PlaidInstitutionUpdate) ClearAccounts() *PlaidInstitutionUpdate {
	piu.mutation.ClearAccounts()
	return piu
}

// RemoveAccountIDs removes the "accounts" edge to PlaidInstitutionAccount entities by IDs.
func (piu *PlaidInstitutionUpdate) RemoveAccountIDs(ids ...int) *PlaidInstitutionUpdate {
	piu.mutation.RemoveAccountIDs(ids...)
	return piu
}

// RemoveAccounts removes "accounts" edges to PlaidInstitutionAccount entities.
func (piu *PlaidInstitutionUpdate) RemoveAccounts(p ...*PlaidInstitutionAccount) *PlaidInstitutionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.RemoveAccountIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PlaidInstitutionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PlaidInstitutionMutation](ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PlaidInstitutionUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PlaidInstitutionUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PlaidInstitutionUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piu *PlaidInstitutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plaidinstitution.Table,
			Columns: plaidinstitution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plaidinstitution.FieldID,
			},
		},
	}
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.InstitutionID(); ok {
		_spec.SetField(plaidinstitution.FieldInstitutionID, field.TypeString, value)
	}
	if value, ok := piu.mutation.Name(); ok {
		_spec.SetField(plaidinstitution.FieldName, field.TypeString, value)
	}
	if piu.mutation.PlaidItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   plaidinstitution.PlaidItemTable,
			Columns: []string{plaidinstitution.PlaidItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.PlaidItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   plaidinstitution.PlaidItemTable,
			Columns: []string{plaidinstitution.PlaidItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitution.AccountsTable,
			Columns: []string{plaidinstitution.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitutionaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !piu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitution.AccountsTable,
			Columns: []string{plaidinstitution.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitutionaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitution.AccountsTable,
			Columns: []string{plaidinstitution.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitutionaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plaidinstitution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PlaidInstitutionUpdateOne is the builder for updating a single PlaidInstitution entity.
type PlaidInstitutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaidInstitutionMutation
}

// SetInstitutionID sets the "institution_id" field.
func (piuo *PlaidInstitutionUpdateOne) SetInstitutionID(s string) *PlaidInstitutionUpdateOne {
	piuo.mutation.SetInstitutionID(s)
	return piuo
}

// SetName sets the "name" field.
func (piuo *PlaidInstitutionUpdateOne) SetName(s string) *PlaidInstitutionUpdateOne {
	piuo.mutation.SetName(s)
	return piuo
}

// SetPlaidItemID sets the "plaid_item" edge to the PlaidItem entity by ID.
func (piuo *PlaidInstitutionUpdateOne) SetPlaidItemID(id int) *PlaidInstitutionUpdateOne {
	piuo.mutation.SetPlaidItemID(id)
	return piuo
}

// SetNillablePlaidItemID sets the "plaid_item" edge to the PlaidItem entity by ID if the given value is not nil.
func (piuo *PlaidInstitutionUpdateOne) SetNillablePlaidItemID(id *int) *PlaidInstitutionUpdateOne {
	if id != nil {
		piuo = piuo.SetPlaidItemID(*id)
	}
	return piuo
}

// SetPlaidItem sets the "plaid_item" edge to the PlaidItem entity.
func (piuo *PlaidInstitutionUpdateOne) SetPlaidItem(p *PlaidItem) *PlaidInstitutionUpdateOne {
	return piuo.SetPlaidItemID(p.ID)
}

// AddAccountIDs adds the "accounts" edge to the PlaidInstitutionAccount entity by IDs.
func (piuo *PlaidInstitutionUpdateOne) AddAccountIDs(ids ...int) *PlaidInstitutionUpdateOne {
	piuo.mutation.AddAccountIDs(ids...)
	return piuo
}

// AddAccounts adds the "accounts" edges to the PlaidInstitutionAccount entity.
func (piuo *PlaidInstitutionUpdateOne) AddAccounts(p ...*PlaidInstitutionAccount) *PlaidInstitutionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.AddAccountIDs(ids...)
}

// Mutation returns the PlaidInstitutionMutation object of the builder.
func (piuo *PlaidInstitutionUpdateOne) Mutation() *PlaidInstitutionMutation {
	return piuo.mutation
}

// ClearPlaidItem clears the "plaid_item" edge to the PlaidItem entity.
func (piuo *PlaidInstitutionUpdateOne) ClearPlaidItem() *PlaidInstitutionUpdateOne {
	piuo.mutation.ClearPlaidItem()
	return piuo
}

// ClearAccounts clears all "accounts" edges to the PlaidInstitutionAccount entity.
func (piuo *PlaidInstitutionUpdateOne) ClearAccounts() *PlaidInstitutionUpdateOne {
	piuo.mutation.ClearAccounts()
	return piuo
}

// RemoveAccountIDs removes the "accounts" edge to PlaidInstitutionAccount entities by IDs.
func (piuo *PlaidInstitutionUpdateOne) RemoveAccountIDs(ids ...int) *PlaidInstitutionUpdateOne {
	piuo.mutation.RemoveAccountIDs(ids...)
	return piuo
}

// RemoveAccounts removes "accounts" edges to PlaidInstitutionAccount entities.
func (piuo *PlaidInstitutionUpdateOne) RemoveAccounts(p ...*PlaidInstitutionAccount) *PlaidInstitutionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.RemoveAccountIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PlaidInstitutionUpdateOne) Select(field string, fields ...string) *PlaidInstitutionUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PlaidInstitution entity.
func (piuo *PlaidInstitutionUpdateOne) Save(ctx context.Context) (*PlaidInstitution, error) {
	return withHooks[*PlaidInstitution, PlaidInstitutionMutation](ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PlaidInstitutionUpdateOne) SaveX(ctx context.Context) *PlaidInstitution {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PlaidInstitutionUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PlaidInstitutionUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piuo *PlaidInstitutionUpdateOne) sqlSave(ctx context.Context) (_node *PlaidInstitution, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plaidinstitution.Table,
			Columns: plaidinstitution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plaidinstitution.FieldID,
			},
		},
	}
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlaidInstitution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plaidinstitution.FieldID)
		for _, f := range fields {
			if !plaidinstitution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plaidinstitution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.InstitutionID(); ok {
		_spec.SetField(plaidinstitution.FieldInstitutionID, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Name(); ok {
		_spec.SetField(plaidinstitution.FieldName, field.TypeString, value)
	}
	if piuo.mutation.PlaidItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   plaidinstitution.PlaidItemTable,
			Columns: []string{plaidinstitution.PlaidItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.PlaidItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   plaidinstitution.PlaidItemTable,
			Columns: []string{plaidinstitution.PlaidItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitution.AccountsTable,
			Columns: []string{plaidinstitution.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitutionaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !piuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitution.AccountsTable,
			Columns: []string{plaidinstitution.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitutionaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitution.AccountsTable,
			Columns: []string{plaidinstitution.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitutionaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlaidInstitution{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plaidinstitution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
