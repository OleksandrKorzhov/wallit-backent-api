// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wallit/ent/predicate"
	"wallit/ent/spendingcategory"
	"wallit/ent/transaction"
	"wallit/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpendingCategoryUpdate is the builder for updating SpendingCategory entities.
type SpendingCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *SpendingCategoryMutation
}

// Where appends a list predicates to the SpendingCategoryUpdate builder.
func (scu *SpendingCategoryUpdate) Where(ps ...predicate.SpendingCategory) *SpendingCategoryUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetName sets the "name" field.
func (scu *SpendingCategoryUpdate) SetName(s string) *SpendingCategoryUpdate {
	scu.mutation.SetName(s)
	return scu
}

// SetCategoryID sets the "category_id" field.
func (scu *SpendingCategoryUpdate) SetCategoryID(s string) *SpendingCategoryUpdate {
	scu.mutation.SetCategoryID(s)
	return scu
}

// SetCreatedAt sets the "created_at" field.
func (scu *SpendingCategoryUpdate) SetCreatedAt(t time.Time) *SpendingCategoryUpdate {
	scu.mutation.SetCreatedAt(t)
	return scu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scu *SpendingCategoryUpdate) SetNillableCreatedAt(t *time.Time) *SpendingCategoryUpdate {
	if t != nil {
		scu.SetCreatedAt(*t)
	}
	return scu
}

// AddCategoryTransactionIDs adds the "category_transactions" edge to the Transaction entity by IDs.
func (scu *SpendingCategoryUpdate) AddCategoryTransactionIDs(ids ...int) *SpendingCategoryUpdate {
	scu.mutation.AddCategoryTransactionIDs(ids...)
	return scu
}

// AddCategoryTransactions adds the "category_transactions" edges to the Transaction entity.
func (scu *SpendingCategoryUpdate) AddCategoryTransactions(t ...*Transaction) *SpendingCategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return scu.AddCategoryTransactionIDs(ids...)
}

// AddInterestedUserIDs adds the "interested_users" edge to the User entity by IDs.
func (scu *SpendingCategoryUpdate) AddInterestedUserIDs(ids ...int) *SpendingCategoryUpdate {
	scu.mutation.AddInterestedUserIDs(ids...)
	return scu
}

// AddInterestedUsers adds the "interested_users" edges to the User entity.
func (scu *SpendingCategoryUpdate) AddInterestedUsers(u ...*User) *SpendingCategoryUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return scu.AddInterestedUserIDs(ids...)
}

// Mutation returns the SpendingCategoryMutation object of the builder.
func (scu *SpendingCategoryUpdate) Mutation() *SpendingCategoryMutation {
	return scu.mutation
}

// ClearCategoryTransactions clears all "category_transactions" edges to the Transaction entity.
func (scu *SpendingCategoryUpdate) ClearCategoryTransactions() *SpendingCategoryUpdate {
	scu.mutation.ClearCategoryTransactions()
	return scu
}

// RemoveCategoryTransactionIDs removes the "category_transactions" edge to Transaction entities by IDs.
func (scu *SpendingCategoryUpdate) RemoveCategoryTransactionIDs(ids ...int) *SpendingCategoryUpdate {
	scu.mutation.RemoveCategoryTransactionIDs(ids...)
	return scu
}

// RemoveCategoryTransactions removes "category_transactions" edges to Transaction entities.
func (scu *SpendingCategoryUpdate) RemoveCategoryTransactions(t ...*Transaction) *SpendingCategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return scu.RemoveCategoryTransactionIDs(ids...)
}

// ClearInterestedUsers clears all "interested_users" edges to the User entity.
func (scu *SpendingCategoryUpdate) ClearInterestedUsers() *SpendingCategoryUpdate {
	scu.mutation.ClearInterestedUsers()
	return scu
}

// RemoveInterestedUserIDs removes the "interested_users" edge to User entities by IDs.
func (scu *SpendingCategoryUpdate) RemoveInterestedUserIDs(ids ...int) *SpendingCategoryUpdate {
	scu.mutation.RemoveInterestedUserIDs(ids...)
	return scu
}

// RemoveInterestedUsers removes "interested_users" edges to User entities.
func (scu *SpendingCategoryUpdate) RemoveInterestedUsers(u ...*User) *SpendingCategoryUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return scu.RemoveInterestedUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SpendingCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SpendingCategoryMutation](ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SpendingCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SpendingCategoryUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SpendingCategoryUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (scu *SpendingCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spendingcategory.Table,
			Columns: spendingcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: spendingcategory.FieldID,
			},
		},
	}
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.Name(); ok {
		_spec.SetField(spendingcategory.FieldName, field.TypeString, value)
	}
	if value, ok := scu.mutation.CategoryID(); ok {
		_spec.SetField(spendingcategory.FieldCategoryID, field.TypeString, value)
	}
	if value, ok := scu.mutation.CreatedAt(); ok {
		_spec.SetField(spendingcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if scu.mutation.CategoryTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.CategoryTransactionsTable,
			Columns: spendingcategory.CategoryTransactionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedCategoryTransactionsIDs(); len(nodes) > 0 && !scu.mutation.CategoryTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.CategoryTransactionsTable,
			Columns: spendingcategory.CategoryTransactionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.CategoryTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.CategoryTransactionsTable,
			Columns: spendingcategory.CategoryTransactionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.InterestedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.InterestedUsersTable,
			Columns: spendingcategory.InterestedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedInterestedUsersIDs(); len(nodes) > 0 && !scu.mutation.InterestedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.InterestedUsersTable,
			Columns: spendingcategory.InterestedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.InterestedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.InterestedUsersTable,
			Columns: spendingcategory.InterestedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spendingcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SpendingCategoryUpdateOne is the builder for updating a single SpendingCategory entity.
type SpendingCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpendingCategoryMutation
}

// SetName sets the "name" field.
func (scuo *SpendingCategoryUpdateOne) SetName(s string) *SpendingCategoryUpdateOne {
	scuo.mutation.SetName(s)
	return scuo
}

// SetCategoryID sets the "category_id" field.
func (scuo *SpendingCategoryUpdateOne) SetCategoryID(s string) *SpendingCategoryUpdateOne {
	scuo.mutation.SetCategoryID(s)
	return scuo
}

// SetCreatedAt sets the "created_at" field.
func (scuo *SpendingCategoryUpdateOne) SetCreatedAt(t time.Time) *SpendingCategoryUpdateOne {
	scuo.mutation.SetCreatedAt(t)
	return scuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scuo *SpendingCategoryUpdateOne) SetNillableCreatedAt(t *time.Time) *SpendingCategoryUpdateOne {
	if t != nil {
		scuo.SetCreatedAt(*t)
	}
	return scuo
}

// AddCategoryTransactionIDs adds the "category_transactions" edge to the Transaction entity by IDs.
func (scuo *SpendingCategoryUpdateOne) AddCategoryTransactionIDs(ids ...int) *SpendingCategoryUpdateOne {
	scuo.mutation.AddCategoryTransactionIDs(ids...)
	return scuo
}

// AddCategoryTransactions adds the "category_transactions" edges to the Transaction entity.
func (scuo *SpendingCategoryUpdateOne) AddCategoryTransactions(t ...*Transaction) *SpendingCategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return scuo.AddCategoryTransactionIDs(ids...)
}

// AddInterestedUserIDs adds the "interested_users" edge to the User entity by IDs.
func (scuo *SpendingCategoryUpdateOne) AddInterestedUserIDs(ids ...int) *SpendingCategoryUpdateOne {
	scuo.mutation.AddInterestedUserIDs(ids...)
	return scuo
}

// AddInterestedUsers adds the "interested_users" edges to the User entity.
func (scuo *SpendingCategoryUpdateOne) AddInterestedUsers(u ...*User) *SpendingCategoryUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return scuo.AddInterestedUserIDs(ids...)
}

// Mutation returns the SpendingCategoryMutation object of the builder.
func (scuo *SpendingCategoryUpdateOne) Mutation() *SpendingCategoryMutation {
	return scuo.mutation
}

// ClearCategoryTransactions clears all "category_transactions" edges to the Transaction entity.
func (scuo *SpendingCategoryUpdateOne) ClearCategoryTransactions() *SpendingCategoryUpdateOne {
	scuo.mutation.ClearCategoryTransactions()
	return scuo
}

// RemoveCategoryTransactionIDs removes the "category_transactions" edge to Transaction entities by IDs.
func (scuo *SpendingCategoryUpdateOne) RemoveCategoryTransactionIDs(ids ...int) *SpendingCategoryUpdateOne {
	scuo.mutation.RemoveCategoryTransactionIDs(ids...)
	return scuo
}

// RemoveCategoryTransactions removes "category_transactions" edges to Transaction entities.
func (scuo *SpendingCategoryUpdateOne) RemoveCategoryTransactions(t ...*Transaction) *SpendingCategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return scuo.RemoveCategoryTransactionIDs(ids...)
}

// ClearInterestedUsers clears all "interested_users" edges to the User entity.
func (scuo *SpendingCategoryUpdateOne) ClearInterestedUsers() *SpendingCategoryUpdateOne {
	scuo.mutation.ClearInterestedUsers()
	return scuo
}

// RemoveInterestedUserIDs removes the "interested_users" edge to User entities by IDs.
func (scuo *SpendingCategoryUpdateOne) RemoveInterestedUserIDs(ids ...int) *SpendingCategoryUpdateOne {
	scuo.mutation.RemoveInterestedUserIDs(ids...)
	return scuo
}

// RemoveInterestedUsers removes "interested_users" edges to User entities.
func (scuo *SpendingCategoryUpdateOne) RemoveInterestedUsers(u ...*User) *SpendingCategoryUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return scuo.RemoveInterestedUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SpendingCategoryUpdateOne) Select(field string, fields ...string) *SpendingCategoryUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SpendingCategory entity.
func (scuo *SpendingCategoryUpdateOne) Save(ctx context.Context) (*SpendingCategory, error) {
	return withHooks[*SpendingCategory, SpendingCategoryMutation](ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SpendingCategoryUpdateOne) SaveX(ctx context.Context) *SpendingCategory {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SpendingCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SpendingCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (scuo *SpendingCategoryUpdateOne) sqlSave(ctx context.Context) (_node *SpendingCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spendingcategory.Table,
			Columns: spendingcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: spendingcategory.FieldID,
			},
		},
	}
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpendingCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spendingcategory.FieldID)
		for _, f := range fields {
			if !spendingcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spendingcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.Name(); ok {
		_spec.SetField(spendingcategory.FieldName, field.TypeString, value)
	}
	if value, ok := scuo.mutation.CategoryID(); ok {
		_spec.SetField(spendingcategory.FieldCategoryID, field.TypeString, value)
	}
	if value, ok := scuo.mutation.CreatedAt(); ok {
		_spec.SetField(spendingcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if scuo.mutation.CategoryTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.CategoryTransactionsTable,
			Columns: spendingcategory.CategoryTransactionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedCategoryTransactionsIDs(); len(nodes) > 0 && !scuo.mutation.CategoryTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.CategoryTransactionsTable,
			Columns: spendingcategory.CategoryTransactionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.CategoryTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.CategoryTransactionsTable,
			Columns: spendingcategory.CategoryTransactionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.InterestedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.InterestedUsersTable,
			Columns: spendingcategory.InterestedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedInterestedUsersIDs(); len(nodes) > 0 && !scuo.mutation.InterestedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.InterestedUsersTable,
			Columns: spendingcategory.InterestedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.InterestedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.InterestedUsersTable,
			Columns: spendingcategory.InterestedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SpendingCategory{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spendingcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
