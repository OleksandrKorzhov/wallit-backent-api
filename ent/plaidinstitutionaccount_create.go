// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"wallit/ent/plaidinstitution"
	"wallit/ent/plaidinstitutionaccount"
	"wallit/ent/transaction"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaidInstitutionAccountCreate is the builder for creating a PlaidInstitutionAccount entity.
type PlaidInstitutionAccountCreate struct {
	config
	mutation *PlaidInstitutionAccountMutation
	hooks    []Hook
}

// SetAccountID sets the "account_id" field.
func (piac *PlaidInstitutionAccountCreate) SetAccountID(s string) *PlaidInstitutionAccountCreate {
	piac.mutation.SetAccountID(s)
	return piac
}

// SetBalanceAvailable sets the "balance_available" field.
func (piac *PlaidInstitutionAccountCreate) SetBalanceAvailable(f float64) *PlaidInstitutionAccountCreate {
	piac.mutation.SetBalanceAvailable(f)
	return piac
}

// SetBalanceCurrent sets the "balance_current" field.
func (piac *PlaidInstitutionAccountCreate) SetBalanceCurrent(f float64) *PlaidInstitutionAccountCreate {
	piac.mutation.SetBalanceCurrent(f)
	return piac
}

// SetBalanceIsoCurrencyCode sets the "balance_iso_currency_code" field.
func (piac *PlaidInstitutionAccountCreate) SetBalanceIsoCurrencyCode(s string) *PlaidInstitutionAccountCreate {
	piac.mutation.SetBalanceIsoCurrencyCode(s)
	return piac
}

// SetMask sets the "mask" field.
func (piac *PlaidInstitutionAccountCreate) SetMask(s string) *PlaidInstitutionAccountCreate {
	piac.mutation.SetMask(s)
	return piac
}

// SetName sets the "name" field.
func (piac *PlaidInstitutionAccountCreate) SetName(s string) *PlaidInstitutionAccountCreate {
	piac.mutation.SetName(s)
	return piac
}

// SetOfficialName sets the "official_name" field.
func (piac *PlaidInstitutionAccountCreate) SetOfficialName(s string) *PlaidInstitutionAccountCreate {
	piac.mutation.SetOfficialName(s)
	return piac
}

// SetNillableOfficialName sets the "official_name" field if the given value is not nil.
func (piac *PlaidInstitutionAccountCreate) SetNillableOfficialName(s *string) *PlaidInstitutionAccountCreate {
	if s != nil {
		piac.SetOfficialName(*s)
	}
	return piac
}

// SetType sets the "type" field.
func (piac *PlaidInstitutionAccountCreate) SetType(s string) *PlaidInstitutionAccountCreate {
	piac.mutation.SetType(s)
	return piac
}

// SetParentInstitutionID sets the "parent_institution" edge to the PlaidInstitution entity by ID.
func (piac *PlaidInstitutionAccountCreate) SetParentInstitutionID(id int) *PlaidInstitutionAccountCreate {
	piac.mutation.SetParentInstitutionID(id)
	return piac
}

// SetNillableParentInstitutionID sets the "parent_institution" edge to the PlaidInstitution entity by ID if the given value is not nil.
func (piac *PlaidInstitutionAccountCreate) SetNillableParentInstitutionID(id *int) *PlaidInstitutionAccountCreate {
	if id != nil {
		piac = piac.SetParentInstitutionID(*id)
	}
	return piac
}

// SetParentInstitution sets the "parent_institution" edge to the PlaidInstitution entity.
func (piac *PlaidInstitutionAccountCreate) SetParentInstitution(p *PlaidInstitution) *PlaidInstitutionAccountCreate {
	return piac.SetParentInstitutionID(p.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (piac *PlaidInstitutionAccountCreate) AddTransactionIDs(ids ...int) *PlaidInstitutionAccountCreate {
	piac.mutation.AddTransactionIDs(ids...)
	return piac
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (piac *PlaidInstitutionAccountCreate) AddTransactions(t ...*Transaction) *PlaidInstitutionAccountCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piac.AddTransactionIDs(ids...)
}

// Mutation returns the PlaidInstitutionAccountMutation object of the builder.
func (piac *PlaidInstitutionAccountCreate) Mutation() *PlaidInstitutionAccountMutation {
	return piac.mutation
}

// Save creates the PlaidInstitutionAccount in the database.
func (piac *PlaidInstitutionAccountCreate) Save(ctx context.Context) (*PlaidInstitutionAccount, error) {
	return withHooks[*PlaidInstitutionAccount, PlaidInstitutionAccountMutation](ctx, piac.sqlSave, piac.mutation, piac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (piac *PlaidInstitutionAccountCreate) SaveX(ctx context.Context) *PlaidInstitutionAccount {
	v, err := piac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (piac *PlaidInstitutionAccountCreate) Exec(ctx context.Context) error {
	_, err := piac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piac *PlaidInstitutionAccountCreate) ExecX(ctx context.Context) {
	if err := piac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piac *PlaidInstitutionAccountCreate) check() error {
	if _, ok := piac.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "PlaidInstitutionAccount.account_id"`)}
	}
	if _, ok := piac.mutation.BalanceAvailable(); !ok {
		return &ValidationError{Name: "balance_available", err: errors.New(`ent: missing required field "PlaidInstitutionAccount.balance_available"`)}
	}
	if _, ok := piac.mutation.BalanceCurrent(); !ok {
		return &ValidationError{Name: "balance_current", err: errors.New(`ent: missing required field "PlaidInstitutionAccount.balance_current"`)}
	}
	if _, ok := piac.mutation.BalanceIsoCurrencyCode(); !ok {
		return &ValidationError{Name: "balance_iso_currency_code", err: errors.New(`ent: missing required field "PlaidInstitutionAccount.balance_iso_currency_code"`)}
	}
	if _, ok := piac.mutation.Mask(); !ok {
		return &ValidationError{Name: "mask", err: errors.New(`ent: missing required field "PlaidInstitutionAccount.mask"`)}
	}
	if _, ok := piac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PlaidInstitutionAccount.name"`)}
	}
	if _, ok := piac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PlaidInstitutionAccount.type"`)}
	}
	return nil
}

func (piac *PlaidInstitutionAccountCreate) sqlSave(ctx context.Context) (*PlaidInstitutionAccount, error) {
	if err := piac.check(); err != nil {
		return nil, err
	}
	_node, _spec := piac.createSpec()
	if err := sqlgraph.CreateNode(ctx, piac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	piac.mutation.id = &_node.ID
	piac.mutation.done = true
	return _node, nil
}

func (piac *PlaidInstitutionAccountCreate) createSpec() (*PlaidInstitutionAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &PlaidInstitutionAccount{config: piac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: plaidinstitutionaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plaidinstitutionaccount.FieldID,
			},
		}
	)
	if value, ok := piac.mutation.AccountID(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldAccountID, field.TypeString, value)
		_node.AccountID = value
	}
	if value, ok := piac.mutation.BalanceAvailable(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldBalanceAvailable, field.TypeFloat64, value)
		_node.BalanceAvailable = value
	}
	if value, ok := piac.mutation.BalanceCurrent(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldBalanceCurrent, field.TypeFloat64, value)
		_node.BalanceCurrent = value
	}
	if value, ok := piac.mutation.BalanceIsoCurrencyCode(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldBalanceIsoCurrencyCode, field.TypeString, value)
		_node.BalanceIsoCurrencyCode = value
	}
	if value, ok := piac.mutation.Mask(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldMask, field.TypeString, value)
		_node.Mask = value
	}
	if value, ok := piac.mutation.Name(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := piac.mutation.OfficialName(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldOfficialName, field.TypeString, value)
		_node.OfficialName = value
	}
	if value, ok := piac.mutation.GetType(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := piac.mutation.ParentInstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plaidinstitutionaccount.ParentInstitutionTable,
			Columns: []string{plaidinstitutionaccount.ParentInstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.plaid_institution_accounts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := piac.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitutionaccount.TransactionsTable,
			Columns: []string{plaidinstitutionaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlaidInstitutionAccountCreateBulk is the builder for creating many PlaidInstitutionAccount entities in bulk.
type PlaidInstitutionAccountCreateBulk struct {
	config
	builders []*PlaidInstitutionAccountCreate
}

// Save creates the PlaidInstitutionAccount entities in the database.
func (piacb *PlaidInstitutionAccountCreateBulk) Save(ctx context.Context) ([]*PlaidInstitutionAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(piacb.builders))
	nodes := make([]*PlaidInstitutionAccount, len(piacb.builders))
	mutators := make([]Mutator, len(piacb.builders))
	for i := range piacb.builders {
		func(i int, root context.Context) {
			builder := piacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaidInstitutionAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, piacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, piacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, piacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (piacb *PlaidInstitutionAccountCreateBulk) SaveX(ctx context.Context) []*PlaidInstitutionAccount {
	v, err := piacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (piacb *PlaidInstitutionAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := piacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piacb *PlaidInstitutionAccountCreateBulk) ExecX(ctx context.Context) {
	if err := piacb.Exec(ctx); err != nil {
		panic(err)
	}
}
