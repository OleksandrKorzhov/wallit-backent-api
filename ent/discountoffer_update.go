// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wallit/ent/discountoffer"
	"wallit/ent/merchant"
	"wallit/ent/notification"
	"wallit/ent/predicate"
	"wallit/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiscountOfferUpdate is the builder for updating DiscountOffer entities.
type DiscountOfferUpdate struct {
	config
	hooks    []Hook
	mutation *DiscountOfferMutation
}

// Where appends a list predicates to the DiscountOfferUpdate builder.
func (dou *DiscountOfferUpdate) Where(ps ...predicate.DiscountOffer) *DiscountOfferUpdate {
	dou.mutation.Where(ps...)
	return dou
}

// SetAmount sets the "amount" field.
func (dou *DiscountOfferUpdate) SetAmount(i int) *DiscountOfferUpdate {
	dou.mutation.ResetAmount()
	dou.mutation.SetAmount(i)
	return dou
}

// AddAmount adds i to the "amount" field.
func (dou *DiscountOfferUpdate) AddAmount(i int) *DiscountOfferUpdate {
	dou.mutation.AddAmount(i)
	return dou
}

// SetType sets the "type" field.
func (dou *DiscountOfferUpdate) SetType(d discountoffer.Type) *DiscountOfferUpdate {
	dou.mutation.SetType(d)
	return dou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dou *DiscountOfferUpdate) SetNillableType(d *discountoffer.Type) *DiscountOfferUpdate {
	if d != nil {
		dou.SetType(*d)
	}
	return dou
}

// SetCurrency sets the "currency" field.
func (dou *DiscountOfferUpdate) SetCurrency(s string) *DiscountOfferUpdate {
	dou.mutation.SetCurrency(s)
	return dou
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (dou *DiscountOfferUpdate) SetNillableCurrency(s *string) *DiscountOfferUpdate {
	if s != nil {
		dou.SetCurrency(*s)
	}
	return dou
}

// ClearCurrency clears the value of the "currency" field.
func (dou *DiscountOfferUpdate) ClearCurrency() *DiscountOfferUpdate {
	dou.mutation.ClearCurrency()
	return dou
}

// SetDescription sets the "description" field.
func (dou *DiscountOfferUpdate) SetDescription(s string) *DiscountOfferUpdate {
	dou.mutation.SetDescription(s)
	return dou
}

// SetMerchantSpecificIdentification sets the "merchant_specific_identification" field.
func (dou *DiscountOfferUpdate) SetMerchantSpecificIdentification(s string) *DiscountOfferUpdate {
	dou.mutation.SetMerchantSpecificIdentification(s)
	return dou
}

// SetExpiresAt sets the "expires_at" field.
func (dou *DiscountOfferUpdate) SetExpiresAt(t time.Time) *DiscountOfferUpdate {
	dou.mutation.SetExpiresAt(t)
	return dou
}

// SetOwnerMerchantID sets the "owner_merchant" edge to the Merchant entity by ID.
func (dou *DiscountOfferUpdate) SetOwnerMerchantID(id int) *DiscountOfferUpdate {
	dou.mutation.SetOwnerMerchantID(id)
	return dou
}

// SetOwnerMerchant sets the "owner_merchant" edge to the Merchant entity.
func (dou *DiscountOfferUpdate) SetOwnerMerchant(m *Merchant) *DiscountOfferUpdate {
	return dou.SetOwnerMerchantID(m.ID)
}

// AddDiscountEligibleUserIDs adds the "discount_eligible_users" edge to the User entity by IDs.
func (dou *DiscountOfferUpdate) AddDiscountEligibleUserIDs(ids ...int) *DiscountOfferUpdate {
	dou.mutation.AddDiscountEligibleUserIDs(ids...)
	return dou
}

// AddDiscountEligibleUsers adds the "discount_eligible_users" edges to the User entity.
func (dou *DiscountOfferUpdate) AddDiscountEligibleUsers(u ...*User) *DiscountOfferUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dou.AddDiscountEligibleUserIDs(ids...)
}

// SetDiscountOfferNotificationID sets the "discount_offer_notification" edge to the Notification entity by ID.
func (dou *DiscountOfferUpdate) SetDiscountOfferNotificationID(id int) *DiscountOfferUpdate {
	dou.mutation.SetDiscountOfferNotificationID(id)
	return dou
}

// SetNillableDiscountOfferNotificationID sets the "discount_offer_notification" edge to the Notification entity by ID if the given value is not nil.
func (dou *DiscountOfferUpdate) SetNillableDiscountOfferNotificationID(id *int) *DiscountOfferUpdate {
	if id != nil {
		dou = dou.SetDiscountOfferNotificationID(*id)
	}
	return dou
}

// SetDiscountOfferNotification sets the "discount_offer_notification" edge to the Notification entity.
func (dou *DiscountOfferUpdate) SetDiscountOfferNotification(n *Notification) *DiscountOfferUpdate {
	return dou.SetDiscountOfferNotificationID(n.ID)
}

// Mutation returns the DiscountOfferMutation object of the builder.
func (dou *DiscountOfferUpdate) Mutation() *DiscountOfferMutation {
	return dou.mutation
}

// ClearOwnerMerchant clears the "owner_merchant" edge to the Merchant entity.
func (dou *DiscountOfferUpdate) ClearOwnerMerchant() *DiscountOfferUpdate {
	dou.mutation.ClearOwnerMerchant()
	return dou
}

// ClearDiscountEligibleUsers clears all "discount_eligible_users" edges to the User entity.
func (dou *DiscountOfferUpdate) ClearDiscountEligibleUsers() *DiscountOfferUpdate {
	dou.mutation.ClearDiscountEligibleUsers()
	return dou
}

// RemoveDiscountEligibleUserIDs removes the "discount_eligible_users" edge to User entities by IDs.
func (dou *DiscountOfferUpdate) RemoveDiscountEligibleUserIDs(ids ...int) *DiscountOfferUpdate {
	dou.mutation.RemoveDiscountEligibleUserIDs(ids...)
	return dou
}

// RemoveDiscountEligibleUsers removes "discount_eligible_users" edges to User entities.
func (dou *DiscountOfferUpdate) RemoveDiscountEligibleUsers(u ...*User) *DiscountOfferUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dou.RemoveDiscountEligibleUserIDs(ids...)
}

// ClearDiscountOfferNotification clears the "discount_offer_notification" edge to the Notification entity.
func (dou *DiscountOfferUpdate) ClearDiscountOfferNotification() *DiscountOfferUpdate {
	dou.mutation.ClearDiscountOfferNotification()
	return dou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dou *DiscountOfferUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DiscountOfferMutation](ctx, dou.sqlSave, dou.mutation, dou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dou *DiscountOfferUpdate) SaveX(ctx context.Context) int {
	affected, err := dou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dou *DiscountOfferUpdate) Exec(ctx context.Context) error {
	_, err := dou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dou *DiscountOfferUpdate) ExecX(ctx context.Context) {
	if err := dou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dou *DiscountOfferUpdate) check() error {
	if v, ok := dou.mutation.Amount(); ok {
		if err := discountoffer.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "DiscountOffer.amount": %w`, err)}
		}
	}
	if v, ok := dou.mutation.GetType(); ok {
		if err := discountoffer.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "DiscountOffer.type": %w`, err)}
		}
	}
	if v, ok := dou.mutation.Description(); ok {
		if err := discountoffer.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "DiscountOffer.description": %w`, err)}
		}
	}
	if v, ok := dou.mutation.MerchantSpecificIdentification(); ok {
		if err := discountoffer.MerchantSpecificIdentificationValidator(v); err != nil {
			return &ValidationError{Name: "merchant_specific_identification", err: fmt.Errorf(`ent: validator failed for field "DiscountOffer.merchant_specific_identification": %w`, err)}
		}
	}
	if _, ok := dou.mutation.OwnerMerchantID(); dou.mutation.OwnerMerchantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DiscountOffer.owner_merchant"`)
	}
	return nil
}

func (dou *DiscountOfferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dou.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discountoffer.Table,
			Columns: discountoffer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discountoffer.FieldID,
			},
		},
	}
	if ps := dou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dou.mutation.Amount(); ok {
		_spec.SetField(discountoffer.FieldAmount, field.TypeInt, value)
	}
	if value, ok := dou.mutation.AddedAmount(); ok {
		_spec.AddField(discountoffer.FieldAmount, field.TypeInt, value)
	}
	if value, ok := dou.mutation.GetType(); ok {
		_spec.SetField(discountoffer.FieldType, field.TypeEnum, value)
	}
	if value, ok := dou.mutation.Currency(); ok {
		_spec.SetField(discountoffer.FieldCurrency, field.TypeString, value)
	}
	if dou.mutation.CurrencyCleared() {
		_spec.ClearField(discountoffer.FieldCurrency, field.TypeString)
	}
	if value, ok := dou.mutation.Description(); ok {
		_spec.SetField(discountoffer.FieldDescription, field.TypeString, value)
	}
	if value, ok := dou.mutation.MerchantSpecificIdentification(); ok {
		_spec.SetField(discountoffer.FieldMerchantSpecificIdentification, field.TypeString, value)
	}
	if value, ok := dou.mutation.ExpiresAt(); ok {
		_spec.SetField(discountoffer.FieldExpiresAt, field.TypeTime, value)
	}
	if dou.mutation.OwnerMerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountoffer.OwnerMerchantTable,
			Columns: []string{discountoffer.OwnerMerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.OwnerMerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountoffer.OwnerMerchantTable,
			Columns: []string{discountoffer.OwnerMerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.DiscountEligibleUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discountoffer.DiscountEligibleUsersTable,
			Columns: discountoffer.DiscountEligibleUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.RemovedDiscountEligibleUsersIDs(); len(nodes) > 0 && !dou.mutation.DiscountEligibleUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discountoffer.DiscountEligibleUsersTable,
			Columns: discountoffer.DiscountEligibleUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.DiscountEligibleUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discountoffer.DiscountEligibleUsersTable,
			Columns: discountoffer.DiscountEligibleUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.DiscountOfferNotificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   discountoffer.DiscountOfferNotificationTable,
			Columns: []string{discountoffer.DiscountOfferNotificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.DiscountOfferNotificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   discountoffer.DiscountOfferNotificationTable,
			Columns: []string{discountoffer.DiscountOfferNotificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discountoffer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dou.mutation.done = true
	return n, nil
}

// DiscountOfferUpdateOne is the builder for updating a single DiscountOffer entity.
type DiscountOfferUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscountOfferMutation
}

// SetAmount sets the "amount" field.
func (douo *DiscountOfferUpdateOne) SetAmount(i int) *DiscountOfferUpdateOne {
	douo.mutation.ResetAmount()
	douo.mutation.SetAmount(i)
	return douo
}

// AddAmount adds i to the "amount" field.
func (douo *DiscountOfferUpdateOne) AddAmount(i int) *DiscountOfferUpdateOne {
	douo.mutation.AddAmount(i)
	return douo
}

// SetType sets the "type" field.
func (douo *DiscountOfferUpdateOne) SetType(d discountoffer.Type) *DiscountOfferUpdateOne {
	douo.mutation.SetType(d)
	return douo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (douo *DiscountOfferUpdateOne) SetNillableType(d *discountoffer.Type) *DiscountOfferUpdateOne {
	if d != nil {
		douo.SetType(*d)
	}
	return douo
}

// SetCurrency sets the "currency" field.
func (douo *DiscountOfferUpdateOne) SetCurrency(s string) *DiscountOfferUpdateOne {
	douo.mutation.SetCurrency(s)
	return douo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (douo *DiscountOfferUpdateOne) SetNillableCurrency(s *string) *DiscountOfferUpdateOne {
	if s != nil {
		douo.SetCurrency(*s)
	}
	return douo
}

// ClearCurrency clears the value of the "currency" field.
func (douo *DiscountOfferUpdateOne) ClearCurrency() *DiscountOfferUpdateOne {
	douo.mutation.ClearCurrency()
	return douo
}

// SetDescription sets the "description" field.
func (douo *DiscountOfferUpdateOne) SetDescription(s string) *DiscountOfferUpdateOne {
	douo.mutation.SetDescription(s)
	return douo
}

// SetMerchantSpecificIdentification sets the "merchant_specific_identification" field.
func (douo *DiscountOfferUpdateOne) SetMerchantSpecificIdentification(s string) *DiscountOfferUpdateOne {
	douo.mutation.SetMerchantSpecificIdentification(s)
	return douo
}

// SetExpiresAt sets the "expires_at" field.
func (douo *DiscountOfferUpdateOne) SetExpiresAt(t time.Time) *DiscountOfferUpdateOne {
	douo.mutation.SetExpiresAt(t)
	return douo
}

// SetOwnerMerchantID sets the "owner_merchant" edge to the Merchant entity by ID.
func (douo *DiscountOfferUpdateOne) SetOwnerMerchantID(id int) *DiscountOfferUpdateOne {
	douo.mutation.SetOwnerMerchantID(id)
	return douo
}

// SetOwnerMerchant sets the "owner_merchant" edge to the Merchant entity.
func (douo *DiscountOfferUpdateOne) SetOwnerMerchant(m *Merchant) *DiscountOfferUpdateOne {
	return douo.SetOwnerMerchantID(m.ID)
}

// AddDiscountEligibleUserIDs adds the "discount_eligible_users" edge to the User entity by IDs.
func (douo *DiscountOfferUpdateOne) AddDiscountEligibleUserIDs(ids ...int) *DiscountOfferUpdateOne {
	douo.mutation.AddDiscountEligibleUserIDs(ids...)
	return douo
}

// AddDiscountEligibleUsers adds the "discount_eligible_users" edges to the User entity.
func (douo *DiscountOfferUpdateOne) AddDiscountEligibleUsers(u ...*User) *DiscountOfferUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return douo.AddDiscountEligibleUserIDs(ids...)
}

// SetDiscountOfferNotificationID sets the "discount_offer_notification" edge to the Notification entity by ID.
func (douo *DiscountOfferUpdateOne) SetDiscountOfferNotificationID(id int) *DiscountOfferUpdateOne {
	douo.mutation.SetDiscountOfferNotificationID(id)
	return douo
}

// SetNillableDiscountOfferNotificationID sets the "discount_offer_notification" edge to the Notification entity by ID if the given value is not nil.
func (douo *DiscountOfferUpdateOne) SetNillableDiscountOfferNotificationID(id *int) *DiscountOfferUpdateOne {
	if id != nil {
		douo = douo.SetDiscountOfferNotificationID(*id)
	}
	return douo
}

// SetDiscountOfferNotification sets the "discount_offer_notification" edge to the Notification entity.
func (douo *DiscountOfferUpdateOne) SetDiscountOfferNotification(n *Notification) *DiscountOfferUpdateOne {
	return douo.SetDiscountOfferNotificationID(n.ID)
}

// Mutation returns the DiscountOfferMutation object of the builder.
func (douo *DiscountOfferUpdateOne) Mutation() *DiscountOfferMutation {
	return douo.mutation
}

// ClearOwnerMerchant clears the "owner_merchant" edge to the Merchant entity.
func (douo *DiscountOfferUpdateOne) ClearOwnerMerchant() *DiscountOfferUpdateOne {
	douo.mutation.ClearOwnerMerchant()
	return douo
}

// ClearDiscountEligibleUsers clears all "discount_eligible_users" edges to the User entity.
func (douo *DiscountOfferUpdateOne) ClearDiscountEligibleUsers() *DiscountOfferUpdateOne {
	douo.mutation.ClearDiscountEligibleUsers()
	return douo
}

// RemoveDiscountEligibleUserIDs removes the "discount_eligible_users" edge to User entities by IDs.
func (douo *DiscountOfferUpdateOne) RemoveDiscountEligibleUserIDs(ids ...int) *DiscountOfferUpdateOne {
	douo.mutation.RemoveDiscountEligibleUserIDs(ids...)
	return douo
}

// RemoveDiscountEligibleUsers removes "discount_eligible_users" edges to User entities.
func (douo *DiscountOfferUpdateOne) RemoveDiscountEligibleUsers(u ...*User) *DiscountOfferUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return douo.RemoveDiscountEligibleUserIDs(ids...)
}

// ClearDiscountOfferNotification clears the "discount_offer_notification" edge to the Notification entity.
func (douo *DiscountOfferUpdateOne) ClearDiscountOfferNotification() *DiscountOfferUpdateOne {
	douo.mutation.ClearDiscountOfferNotification()
	return douo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (douo *DiscountOfferUpdateOne) Select(field string, fields ...string) *DiscountOfferUpdateOne {
	douo.fields = append([]string{field}, fields...)
	return douo
}

// Save executes the query and returns the updated DiscountOffer entity.
func (douo *DiscountOfferUpdateOne) Save(ctx context.Context) (*DiscountOffer, error) {
	return withHooks[*DiscountOffer, DiscountOfferMutation](ctx, douo.sqlSave, douo.mutation, douo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (douo *DiscountOfferUpdateOne) SaveX(ctx context.Context) *DiscountOffer {
	node, err := douo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (douo *DiscountOfferUpdateOne) Exec(ctx context.Context) error {
	_, err := douo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (douo *DiscountOfferUpdateOne) ExecX(ctx context.Context) {
	if err := douo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (douo *DiscountOfferUpdateOne) check() error {
	if v, ok := douo.mutation.Amount(); ok {
		if err := discountoffer.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "DiscountOffer.amount": %w`, err)}
		}
	}
	if v, ok := douo.mutation.GetType(); ok {
		if err := discountoffer.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "DiscountOffer.type": %w`, err)}
		}
	}
	if v, ok := douo.mutation.Description(); ok {
		if err := discountoffer.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "DiscountOffer.description": %w`, err)}
		}
	}
	if v, ok := douo.mutation.MerchantSpecificIdentification(); ok {
		if err := discountoffer.MerchantSpecificIdentificationValidator(v); err != nil {
			return &ValidationError{Name: "merchant_specific_identification", err: fmt.Errorf(`ent: validator failed for field "DiscountOffer.merchant_specific_identification": %w`, err)}
		}
	}
	if _, ok := douo.mutation.OwnerMerchantID(); douo.mutation.OwnerMerchantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DiscountOffer.owner_merchant"`)
	}
	return nil
}

func (douo *DiscountOfferUpdateOne) sqlSave(ctx context.Context) (_node *DiscountOffer, err error) {
	if err := douo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discountoffer.Table,
			Columns: discountoffer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discountoffer.FieldID,
			},
		},
	}
	id, ok := douo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DiscountOffer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := douo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discountoffer.FieldID)
		for _, f := range fields {
			if !discountoffer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discountoffer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := douo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := douo.mutation.Amount(); ok {
		_spec.SetField(discountoffer.FieldAmount, field.TypeInt, value)
	}
	if value, ok := douo.mutation.AddedAmount(); ok {
		_spec.AddField(discountoffer.FieldAmount, field.TypeInt, value)
	}
	if value, ok := douo.mutation.GetType(); ok {
		_spec.SetField(discountoffer.FieldType, field.TypeEnum, value)
	}
	if value, ok := douo.mutation.Currency(); ok {
		_spec.SetField(discountoffer.FieldCurrency, field.TypeString, value)
	}
	if douo.mutation.CurrencyCleared() {
		_spec.ClearField(discountoffer.FieldCurrency, field.TypeString)
	}
	if value, ok := douo.mutation.Description(); ok {
		_spec.SetField(discountoffer.FieldDescription, field.TypeString, value)
	}
	if value, ok := douo.mutation.MerchantSpecificIdentification(); ok {
		_spec.SetField(discountoffer.FieldMerchantSpecificIdentification, field.TypeString, value)
	}
	if value, ok := douo.mutation.ExpiresAt(); ok {
		_spec.SetField(discountoffer.FieldExpiresAt, field.TypeTime, value)
	}
	if douo.mutation.OwnerMerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountoffer.OwnerMerchantTable,
			Columns: []string{discountoffer.OwnerMerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.OwnerMerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountoffer.OwnerMerchantTable,
			Columns: []string{discountoffer.OwnerMerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.DiscountEligibleUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discountoffer.DiscountEligibleUsersTable,
			Columns: discountoffer.DiscountEligibleUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.RemovedDiscountEligibleUsersIDs(); len(nodes) > 0 && !douo.mutation.DiscountEligibleUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discountoffer.DiscountEligibleUsersTable,
			Columns: discountoffer.DiscountEligibleUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.DiscountEligibleUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discountoffer.DiscountEligibleUsersTable,
			Columns: discountoffer.DiscountEligibleUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.DiscountOfferNotificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   discountoffer.DiscountOfferNotificationTable,
			Columns: []string{discountoffer.DiscountOfferNotificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.DiscountOfferNotificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   discountoffer.DiscountOfferNotificationTable,
			Columns: []string{discountoffer.DiscountOfferNotificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiscountOffer{config: douo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, douo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discountoffer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	douo.mutation.done = true
	return _node, nil
}
