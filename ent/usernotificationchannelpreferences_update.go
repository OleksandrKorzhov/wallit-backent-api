// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"wallit/ent/predicate"
	"wallit/ent/user"
	"wallit/ent/usernotificationchannelpreferences"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserNotificationChannelPreferencesUpdate is the builder for updating UserNotificationChannelPreferences entities.
type UserNotificationChannelPreferencesUpdate struct {
	config
	hooks    []Hook
	mutation *UserNotificationChannelPreferencesMutation
}

// Where appends a list predicates to the UserNotificationChannelPreferencesUpdate builder.
func (uncpu *UserNotificationChannelPreferencesUpdate) Where(ps ...predicate.UserNotificationChannelPreferences) *UserNotificationChannelPreferencesUpdate {
	uncpu.mutation.Where(ps...)
	return uncpu
}

// SetChanel sets the "chanel" field.
func (uncpu *UserNotificationChannelPreferencesUpdate) SetChanel(u usernotificationchannelpreferences.Chanel) *UserNotificationChannelPreferencesUpdate {
	uncpu.mutation.SetChanel(u)
	return uncpu
}

// SetChanelUsersID sets the "chanel_users" edge to the User entity by ID.
func (uncpu *UserNotificationChannelPreferencesUpdate) SetChanelUsersID(id int) *UserNotificationChannelPreferencesUpdate {
	uncpu.mutation.SetChanelUsersID(id)
	return uncpu
}

// SetNillableChanelUsersID sets the "chanel_users" edge to the User entity by ID if the given value is not nil.
func (uncpu *UserNotificationChannelPreferencesUpdate) SetNillableChanelUsersID(id *int) *UserNotificationChannelPreferencesUpdate {
	if id != nil {
		uncpu = uncpu.SetChanelUsersID(*id)
	}
	return uncpu
}

// SetChanelUsers sets the "chanel_users" edge to the User entity.
func (uncpu *UserNotificationChannelPreferencesUpdate) SetChanelUsers(u *User) *UserNotificationChannelPreferencesUpdate {
	return uncpu.SetChanelUsersID(u.ID)
}

// Mutation returns the UserNotificationChannelPreferencesMutation object of the builder.
func (uncpu *UserNotificationChannelPreferencesUpdate) Mutation() *UserNotificationChannelPreferencesMutation {
	return uncpu.mutation
}

// ClearChanelUsers clears the "chanel_users" edge to the User entity.
func (uncpu *UserNotificationChannelPreferencesUpdate) ClearChanelUsers() *UserNotificationChannelPreferencesUpdate {
	uncpu.mutation.ClearChanelUsers()
	return uncpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uncpu *UserNotificationChannelPreferencesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserNotificationChannelPreferencesMutation](ctx, uncpu.sqlSave, uncpu.mutation, uncpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uncpu *UserNotificationChannelPreferencesUpdate) SaveX(ctx context.Context) int {
	affected, err := uncpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uncpu *UserNotificationChannelPreferencesUpdate) Exec(ctx context.Context) error {
	_, err := uncpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uncpu *UserNotificationChannelPreferencesUpdate) ExecX(ctx context.Context) {
	if err := uncpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uncpu *UserNotificationChannelPreferencesUpdate) check() error {
	if v, ok := uncpu.mutation.Chanel(); ok {
		if err := usernotificationchannelpreferences.ChanelValidator(v); err != nil {
			return &ValidationError{Name: "chanel", err: fmt.Errorf(`ent: validator failed for field "UserNotificationChannelPreferences.chanel": %w`, err)}
		}
	}
	return nil
}

func (uncpu *UserNotificationChannelPreferencesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uncpu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usernotificationchannelpreferences.Table,
			Columns: usernotificationchannelpreferences.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usernotificationchannelpreferences.FieldID,
			},
		},
	}
	if ps := uncpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uncpu.mutation.Chanel(); ok {
		_spec.SetField(usernotificationchannelpreferences.FieldChanel, field.TypeEnum, value)
	}
	if uncpu.mutation.ChanelUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationchannelpreferences.ChanelUsersTable,
			Columns: []string{usernotificationchannelpreferences.ChanelUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uncpu.mutation.ChanelUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationchannelpreferences.ChanelUsersTable,
			Columns: []string{usernotificationchannelpreferences.ChanelUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uncpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernotificationchannelpreferences.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uncpu.mutation.done = true
	return n, nil
}

// UserNotificationChannelPreferencesUpdateOne is the builder for updating a single UserNotificationChannelPreferences entity.
type UserNotificationChannelPreferencesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserNotificationChannelPreferencesMutation
}

// SetChanel sets the "chanel" field.
func (uncpuo *UserNotificationChannelPreferencesUpdateOne) SetChanel(u usernotificationchannelpreferences.Chanel) *UserNotificationChannelPreferencesUpdateOne {
	uncpuo.mutation.SetChanel(u)
	return uncpuo
}

// SetChanelUsersID sets the "chanel_users" edge to the User entity by ID.
func (uncpuo *UserNotificationChannelPreferencesUpdateOne) SetChanelUsersID(id int) *UserNotificationChannelPreferencesUpdateOne {
	uncpuo.mutation.SetChanelUsersID(id)
	return uncpuo
}

// SetNillableChanelUsersID sets the "chanel_users" edge to the User entity by ID if the given value is not nil.
func (uncpuo *UserNotificationChannelPreferencesUpdateOne) SetNillableChanelUsersID(id *int) *UserNotificationChannelPreferencesUpdateOne {
	if id != nil {
		uncpuo = uncpuo.SetChanelUsersID(*id)
	}
	return uncpuo
}

// SetChanelUsers sets the "chanel_users" edge to the User entity.
func (uncpuo *UserNotificationChannelPreferencesUpdateOne) SetChanelUsers(u *User) *UserNotificationChannelPreferencesUpdateOne {
	return uncpuo.SetChanelUsersID(u.ID)
}

// Mutation returns the UserNotificationChannelPreferencesMutation object of the builder.
func (uncpuo *UserNotificationChannelPreferencesUpdateOne) Mutation() *UserNotificationChannelPreferencesMutation {
	return uncpuo.mutation
}

// ClearChanelUsers clears the "chanel_users" edge to the User entity.
func (uncpuo *UserNotificationChannelPreferencesUpdateOne) ClearChanelUsers() *UserNotificationChannelPreferencesUpdateOne {
	uncpuo.mutation.ClearChanelUsers()
	return uncpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uncpuo *UserNotificationChannelPreferencesUpdateOne) Select(field string, fields ...string) *UserNotificationChannelPreferencesUpdateOne {
	uncpuo.fields = append([]string{field}, fields...)
	return uncpuo
}

// Save executes the query and returns the updated UserNotificationChannelPreferences entity.
func (uncpuo *UserNotificationChannelPreferencesUpdateOne) Save(ctx context.Context) (*UserNotificationChannelPreferences, error) {
	return withHooks[*UserNotificationChannelPreferences, UserNotificationChannelPreferencesMutation](ctx, uncpuo.sqlSave, uncpuo.mutation, uncpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uncpuo *UserNotificationChannelPreferencesUpdateOne) SaveX(ctx context.Context) *UserNotificationChannelPreferences {
	node, err := uncpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uncpuo *UserNotificationChannelPreferencesUpdateOne) Exec(ctx context.Context) error {
	_, err := uncpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uncpuo *UserNotificationChannelPreferencesUpdateOne) ExecX(ctx context.Context) {
	if err := uncpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uncpuo *UserNotificationChannelPreferencesUpdateOne) check() error {
	if v, ok := uncpuo.mutation.Chanel(); ok {
		if err := usernotificationchannelpreferences.ChanelValidator(v); err != nil {
			return &ValidationError{Name: "chanel", err: fmt.Errorf(`ent: validator failed for field "UserNotificationChannelPreferences.chanel": %w`, err)}
		}
	}
	return nil
}

func (uncpuo *UserNotificationChannelPreferencesUpdateOne) sqlSave(ctx context.Context) (_node *UserNotificationChannelPreferences, err error) {
	if err := uncpuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usernotificationchannelpreferences.Table,
			Columns: usernotificationchannelpreferences.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usernotificationchannelpreferences.FieldID,
			},
		},
	}
	id, ok := uncpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserNotificationChannelPreferences.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uncpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usernotificationchannelpreferences.FieldID)
		for _, f := range fields {
			if !usernotificationchannelpreferences.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usernotificationchannelpreferences.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uncpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uncpuo.mutation.Chanel(); ok {
		_spec.SetField(usernotificationchannelpreferences.FieldChanel, field.TypeEnum, value)
	}
	if uncpuo.mutation.ChanelUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationchannelpreferences.ChanelUsersTable,
			Columns: []string{usernotificationchannelpreferences.ChanelUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uncpuo.mutation.ChanelUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationchannelpreferences.ChanelUsersTable,
			Columns: []string{usernotificationchannelpreferences.ChanelUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserNotificationChannelPreferences{config: uncpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uncpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernotificationchannelpreferences.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uncpuo.mutation.done = true
	return _node, nil
}
