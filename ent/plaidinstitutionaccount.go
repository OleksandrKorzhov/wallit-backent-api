// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"wallit/ent/plaidinstitution"
	"wallit/ent/plaidinstitutionaccount"

	"entgo.io/ent/dialect/sql"
)

// PlaidInstitutionAccount is the model entity for the PlaidInstitutionAccount schema.
type PlaidInstitutionAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID string `json:"account_id,omitempty"`
	// BalanceAvailable holds the value of the "balance_available" field.
	BalanceAvailable float64 `json:"balance_available,omitempty"`
	// BalanceCurrent holds the value of the "balance_current" field.
	BalanceCurrent float64 `json:"balance_current,omitempty"`
	// BalanceIsoCurrencyCode holds the value of the "balance_iso_currency_code" field.
	BalanceIsoCurrencyCode string `json:"balance_iso_currency_code,omitempty"`
	// Mask holds the value of the "mask" field.
	Mask string `json:"mask,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// OfficialName holds the value of the "official_name" field.
	OfficialName string `json:"official_name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaidInstitutionAccountQuery when eager-loading is set.
	Edges                      PlaidInstitutionAccountEdges `json:"edges"`
	plaid_institution_accounts *int
}

// PlaidInstitutionAccountEdges holds the relations/edges for other nodes in the graph.
type PlaidInstitutionAccountEdges struct {
	// ParentInstitution holds the value of the parent_institution edge.
	ParentInstitution *PlaidInstitution `json:"parent_institution,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTransactions map[string][]*Transaction
}

// ParentInstitutionOrErr returns the ParentInstitution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaidInstitutionAccountEdges) ParentInstitutionOrErr() (*PlaidInstitution, error) {
	if e.loadedTypes[0] {
		if e.ParentInstitution == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plaidinstitution.Label}
		}
		return e.ParentInstitution, nil
	}
	return nil, &NotLoadedError{edge: "parent_institution"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e PlaidInstitutionAccountEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[1] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlaidInstitutionAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plaidinstitutionaccount.FieldBalanceAvailable, plaidinstitutionaccount.FieldBalanceCurrent:
			values[i] = new(sql.NullFloat64)
		case plaidinstitutionaccount.FieldID:
			values[i] = new(sql.NullInt64)
		case plaidinstitutionaccount.FieldAccountID, plaidinstitutionaccount.FieldBalanceIsoCurrencyCode, plaidinstitutionaccount.FieldMask, plaidinstitutionaccount.FieldName, plaidinstitutionaccount.FieldOfficialName, plaidinstitutionaccount.FieldType:
			values[i] = new(sql.NullString)
		case plaidinstitutionaccount.ForeignKeys[0]: // plaid_institution_accounts
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PlaidInstitutionAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaidInstitutionAccount fields.
func (pia *PlaidInstitutionAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plaidinstitutionaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pia.ID = int(value.Int64)
		case plaidinstitutionaccount.FieldAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				pia.AccountID = value.String
			}
		case plaidinstitutionaccount.FieldBalanceAvailable:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance_available", values[i])
			} else if value.Valid {
				pia.BalanceAvailable = value.Float64
			}
		case plaidinstitutionaccount.FieldBalanceCurrent:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance_current", values[i])
			} else if value.Valid {
				pia.BalanceCurrent = value.Float64
			}
		case plaidinstitutionaccount.FieldBalanceIsoCurrencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field balance_iso_currency_code", values[i])
			} else if value.Valid {
				pia.BalanceIsoCurrencyCode = value.String
			}
		case plaidinstitutionaccount.FieldMask:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mask", values[i])
			} else if value.Valid {
				pia.Mask = value.String
			}
		case plaidinstitutionaccount.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pia.Name = value.String
			}
		case plaidinstitutionaccount.FieldOfficialName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field official_name", values[i])
			} else if value.Valid {
				pia.OfficialName = value.String
			}
		case plaidinstitutionaccount.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pia.Type = value.String
			}
		case plaidinstitutionaccount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field plaid_institution_accounts", value)
			} else if value.Valid {
				pia.plaid_institution_accounts = new(int)
				*pia.plaid_institution_accounts = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParentInstitution queries the "parent_institution" edge of the PlaidInstitutionAccount entity.
func (pia *PlaidInstitutionAccount) QueryParentInstitution() *PlaidInstitutionQuery {
	return NewPlaidInstitutionAccountClient(pia.config).QueryParentInstitution(pia)
}

// QueryTransactions queries the "transactions" edge of the PlaidInstitutionAccount entity.
func (pia *PlaidInstitutionAccount) QueryTransactions() *TransactionQuery {
	return NewPlaidInstitutionAccountClient(pia.config).QueryTransactions(pia)
}

// Update returns a builder for updating this PlaidInstitutionAccount.
// Note that you need to call PlaidInstitutionAccount.Unwrap() before calling this method if this PlaidInstitutionAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (pia *PlaidInstitutionAccount) Update() *PlaidInstitutionAccountUpdateOne {
	return NewPlaidInstitutionAccountClient(pia.config).UpdateOne(pia)
}

// Unwrap unwraps the PlaidInstitutionAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pia *PlaidInstitutionAccount) Unwrap() *PlaidInstitutionAccount {
	_tx, ok := pia.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaidInstitutionAccount is not a transactional entity")
	}
	pia.config.driver = _tx.drv
	return pia
}

// String implements the fmt.Stringer.
func (pia *PlaidInstitutionAccount) String() string {
	var builder strings.Builder
	builder.WriteString("PlaidInstitutionAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pia.ID))
	builder.WriteString("account_id=")
	builder.WriteString(pia.AccountID)
	builder.WriteString(", ")
	builder.WriteString("balance_available=")
	builder.WriteString(fmt.Sprintf("%v", pia.BalanceAvailable))
	builder.WriteString(", ")
	builder.WriteString("balance_current=")
	builder.WriteString(fmt.Sprintf("%v", pia.BalanceCurrent))
	builder.WriteString(", ")
	builder.WriteString("balance_iso_currency_code=")
	builder.WriteString(pia.BalanceIsoCurrencyCode)
	builder.WriteString(", ")
	builder.WriteString("mask=")
	builder.WriteString(pia.Mask)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pia.Name)
	builder.WriteString(", ")
	builder.WriteString("official_name=")
	builder.WriteString(pia.OfficialName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pia.Type)
	builder.WriteByte(')')
	return builder.String()
}

// NamedTransactions returns the Transactions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pia *PlaidInstitutionAccount) NamedTransactions(name string) ([]*Transaction, error) {
	if pia.Edges.namedTransactions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pia.Edges.namedTransactions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pia *PlaidInstitutionAccount) appendNamedTransactions(name string, edges ...*Transaction) {
	if pia.Edges.namedTransactions == nil {
		pia.Edges.namedTransactions = make(map[string][]*Transaction)
	}
	if len(edges) == 0 {
		pia.Edges.namedTransactions[name] = []*Transaction{}
	} else {
		pia.Edges.namedTransactions[name] = append(pia.Edges.namedTransactions[name], edges...)
	}
}

// PlaidInstitutionAccounts is a parsable slice of PlaidInstitutionAccount.
type PlaidInstitutionAccounts []*PlaidInstitutionAccount

func (pia PlaidInstitutionAccounts) config(cfg config) {
	for _i := range pia {
		pia[_i].config = cfg
	}
}
