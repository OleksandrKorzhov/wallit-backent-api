// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wallit/ent/plaidinstitutionaccount"
	"wallit/ent/transaction"

	"entgo.io/ent/dialect/sql"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FinancialAccountID holds the value of the "financial_account_id" field.
	FinancialAccountID string `json:"financial_account_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// IsoCurrencyCode holds the value of the "iso_currency_code" field.
	IsoCurrencyCode string `json:"iso_currency_code,omitempty"`
	// UnofficialCurrencyCode holds the value of the "unofficial_currency_code" field.
	UnofficialCurrencyCode *string `json:"unofficial_currency_code,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID string `json:"category_id,omitempty"`
	// CheckNumber holds the value of the "check_number" field.
	CheckNumber *string `json:"check_number,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
	// Datetime holds the value of the "datetime" field.
	Datetime time.Time `json:"datetime,omitempty"`
	// AuthorizedDate holds the value of the "authorized_date" field.
	AuthorizedDate string `json:"authorized_date,omitempty"`
	// AuthorizedDatetime holds the value of the "authorized_datetime" field.
	AuthorizedDatetime time.Time `json:"authorized_datetime,omitempty"`
	// LocationAddress holds the value of the "location_address" field.
	LocationAddress string `json:"location_address,omitempty"`
	// LocationCity holds the value of the "location_city" field.
	LocationCity string `json:"location_city,omitempty"`
	// LocationRegion holds the value of the "location_region" field.
	LocationRegion string `json:"location_region,omitempty"`
	// LocationPostalCode holds the value of the "location_postal_code" field.
	LocationPostalCode string `json:"location_postal_code,omitempty"`
	// LocationLat holds the value of the "location_lat" field.
	LocationLat float64 `json:"location_lat,omitempty"`
	// LocationLon holds the value of the "location_lon" field.
	LocationLon float64 `json:"location_lon,omitempty"`
	// LocationStoreNumber holds the value of the "location_store_number" field.
	LocationStoreNumber string `json:"location_store_number,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// MerchantName holds the value of the "merchant_name" field.
	MerchantName string `json:"merchant_name,omitempty"`
	// PaymentChannel holds the value of the "payment_channel" field.
	PaymentChannel string `json:"payment_channel,omitempty"`
	// Pending holds the value of the "pending" field.
	Pending bool `json:"pending,omitempty"`
	// PendingTransactionID holds the value of the "pending_transaction_id" field.
	PendingTransactionID string `json:"pending_transaction_id,omitempty"`
	// AccountOwner holds the value of the "account_owner" field.
	AccountOwner string `json:"account_owner,omitempty"`
	// TransactionID holds the value of the "transaction_id" field.
	TransactionID string `json:"transaction_id,omitempty"`
	// TransactionCode holds the value of the "transaction_code" field.
	TransactionCode string `json:"transaction_code,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionQuery when eager-loading is set.
	Edges                                  TransactionEdges `json:"edges"`
	plaid_institution_account_transactions *int
}

// TransactionEdges holds the relations/edges for other nodes in the graph.
type TransactionEdges struct {
	// InstitutionAccount holds the value of the institution_account edge.
	InstitutionAccount *PlaidInstitutionAccount `json:"institution_account,omitempty"`
	// TransactionCategories holds the value of the transaction_categories edge.
	TransactionCategories []*SpendingCategory `json:"transaction_categories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTransactionCategories map[string][]*SpendingCategory
}

// InstitutionAccountOrErr returns the InstitutionAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) InstitutionAccountOrErr() (*PlaidInstitutionAccount, error) {
	if e.loadedTypes[0] {
		if e.InstitutionAccount == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plaidinstitutionaccount.Label}
		}
		return e.InstitutionAccount, nil
	}
	return nil, &NotLoadedError{edge: "institution_account"}
}

// TransactionCategoriesOrErr returns the TransactionCategories value or an error if the edge
// was not loaded in eager-loading.
func (e TransactionEdges) TransactionCategoriesOrErr() ([]*SpendingCategory, error) {
	if e.loadedTypes[1] {
		return e.TransactionCategories, nil
	}
	return nil, &NotLoadedError{edge: "transaction_categories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldPending:
			values[i] = new(sql.NullBool)
		case transaction.FieldAmount, transaction.FieldLocationLat, transaction.FieldLocationLon:
			values[i] = new(sql.NullFloat64)
		case transaction.FieldID:
			values[i] = new(sql.NullInt64)
		case transaction.FieldFinancialAccountID, transaction.FieldIsoCurrencyCode, transaction.FieldUnofficialCurrencyCode, transaction.FieldCategory, transaction.FieldCategoryID, transaction.FieldCheckNumber, transaction.FieldDate, transaction.FieldAuthorizedDate, transaction.FieldLocationAddress, transaction.FieldLocationCity, transaction.FieldLocationRegion, transaction.FieldLocationPostalCode, transaction.FieldLocationStoreNumber, transaction.FieldName, transaction.FieldMerchantName, transaction.FieldPaymentChannel, transaction.FieldPendingTransactionID, transaction.FieldAccountOwner, transaction.FieldTransactionID, transaction.FieldTransactionCode:
			values[i] = new(sql.NullString)
		case transaction.FieldDatetime, transaction.FieldAuthorizedDatetime, transaction.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case transaction.ForeignKeys[0]: // plaid_institution_account_transactions
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transaction.FieldFinancialAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field financial_account_id", values[i])
			} else if value.Valid {
				t.FinancialAccountID = value.String
			}
		case transaction.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = value.Float64
			}
		case transaction.FieldIsoCurrencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iso_currency_code", values[i])
			} else if value.Valid {
				t.IsoCurrencyCode = value.String
			}
		case transaction.FieldUnofficialCurrencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unofficial_currency_code", values[i])
			} else if value.Valid {
				t.UnofficialCurrencyCode = new(string)
				*t.UnofficialCurrencyCode = value.String
			}
		case transaction.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				t.Category = value.String
			}
		case transaction.FieldCategoryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				t.CategoryID = value.String
			}
		case transaction.FieldCheckNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field check_number", values[i])
			} else if value.Valid {
				t.CheckNumber = new(string)
				*t.CheckNumber = value.String
			}
		case transaction.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				t.Date = value.String
			}
		case transaction.FieldDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field datetime", values[i])
			} else if value.Valid {
				t.Datetime = value.Time
			}
		case transaction.FieldAuthorizedDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field authorized_date", values[i])
			} else if value.Valid {
				t.AuthorizedDate = value.String
			}
		case transaction.FieldAuthorizedDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field authorized_datetime", values[i])
			} else if value.Valid {
				t.AuthorizedDatetime = value.Time
			}
		case transaction.FieldLocationAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location_address", values[i])
			} else if value.Valid {
				t.LocationAddress = value.String
			}
		case transaction.FieldLocationCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location_city", values[i])
			} else if value.Valid {
				t.LocationCity = value.String
			}
		case transaction.FieldLocationRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location_region", values[i])
			} else if value.Valid {
				t.LocationRegion = value.String
			}
		case transaction.FieldLocationPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location_postal_code", values[i])
			} else if value.Valid {
				t.LocationPostalCode = value.String
			}
		case transaction.FieldLocationLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field location_lat", values[i])
			} else if value.Valid {
				t.LocationLat = value.Float64
			}
		case transaction.FieldLocationLon:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field location_lon", values[i])
			} else if value.Valid {
				t.LocationLon = value.Float64
			}
		case transaction.FieldLocationStoreNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location_store_number", values[i])
			} else if value.Valid {
				t.LocationStoreNumber = value.String
			}
		case transaction.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case transaction.FieldMerchantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_name", values[i])
			} else if value.Valid {
				t.MerchantName = value.String
			}
		case transaction.FieldPaymentChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_channel", values[i])
			} else if value.Valid {
				t.PaymentChannel = value.String
			}
		case transaction.FieldPending:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pending", values[i])
			} else if value.Valid {
				t.Pending = value.Bool
			}
		case transaction.FieldPendingTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pending_transaction_id", values[i])
			} else if value.Valid {
				t.PendingTransactionID = value.String
			}
		case transaction.FieldAccountOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_owner", values[i])
			} else if value.Valid {
				t.AccountOwner = value.String
			}
		case transaction.FieldTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_id", values[i])
			} else if value.Valid {
				t.TransactionID = value.String
			}
		case transaction.FieldTransactionCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_code", values[i])
			} else if value.Valid {
				t.TransactionCode = value.String
			}
		case transaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case transaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field plaid_institution_account_transactions", value)
			} else if value.Valid {
				t.plaid_institution_account_transactions = new(int)
				*t.plaid_institution_account_transactions = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryInstitutionAccount queries the "institution_account" edge of the Transaction entity.
func (t *Transaction) QueryInstitutionAccount() *PlaidInstitutionAccountQuery {
	return NewTransactionClient(t.config).QueryInstitutionAccount(t)
}

// QueryTransactionCategories queries the "transaction_categories" edge of the Transaction entity.
func (t *Transaction) QueryTransactionCategories() *SpendingCategoryQuery {
	return NewTransactionClient(t.config).QueryTransactionCategories(t)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return NewTransactionClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("financial_account_id=")
	builder.WriteString(t.FinancialAccountID)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", ")
	builder.WriteString("iso_currency_code=")
	builder.WriteString(t.IsoCurrencyCode)
	builder.WriteString(", ")
	if v := t.UnofficialCurrencyCode; v != nil {
		builder.WriteString("unofficial_currency_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(t.Category)
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(t.CategoryID)
	builder.WriteString(", ")
	if v := t.CheckNumber; v != nil {
		builder.WriteString("check_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(t.Date)
	builder.WriteString(", ")
	builder.WriteString("datetime=")
	builder.WriteString(t.Datetime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("authorized_date=")
	builder.WriteString(t.AuthorizedDate)
	builder.WriteString(", ")
	builder.WriteString("authorized_datetime=")
	builder.WriteString(t.AuthorizedDatetime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("location_address=")
	builder.WriteString(t.LocationAddress)
	builder.WriteString(", ")
	builder.WriteString("location_city=")
	builder.WriteString(t.LocationCity)
	builder.WriteString(", ")
	builder.WriteString("location_region=")
	builder.WriteString(t.LocationRegion)
	builder.WriteString(", ")
	builder.WriteString("location_postal_code=")
	builder.WriteString(t.LocationPostalCode)
	builder.WriteString(", ")
	builder.WriteString("location_lat=")
	builder.WriteString(fmt.Sprintf("%v", t.LocationLat))
	builder.WriteString(", ")
	builder.WriteString("location_lon=")
	builder.WriteString(fmt.Sprintf("%v", t.LocationLon))
	builder.WriteString(", ")
	builder.WriteString("location_store_number=")
	builder.WriteString(t.LocationStoreNumber)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("merchant_name=")
	builder.WriteString(t.MerchantName)
	builder.WriteString(", ")
	builder.WriteString("payment_channel=")
	builder.WriteString(t.PaymentChannel)
	builder.WriteString(", ")
	builder.WriteString("pending=")
	builder.WriteString(fmt.Sprintf("%v", t.Pending))
	builder.WriteString(", ")
	builder.WriteString("pending_transaction_id=")
	builder.WriteString(t.PendingTransactionID)
	builder.WriteString(", ")
	builder.WriteString("account_owner=")
	builder.WriteString(t.AccountOwner)
	builder.WriteString(", ")
	builder.WriteString("transaction_id=")
	builder.WriteString(t.TransactionID)
	builder.WriteString(", ")
	builder.WriteString("transaction_code=")
	builder.WriteString(t.TransactionCode)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTransactionCategories returns the TransactionCategories named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Transaction) NamedTransactionCategories(name string) ([]*SpendingCategory, error) {
	if t.Edges.namedTransactionCategories == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedTransactionCategories[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Transaction) appendNamedTransactionCategories(name string, edges ...*SpendingCategory) {
	if t.Edges.namedTransactionCategories == nil {
		t.Edges.namedTransactionCategories = make(map[string][]*SpendingCategory)
	}
	if len(edges) == 0 {
		t.Edges.namedTransactionCategories[name] = []*SpendingCategory{}
	} else {
		t.Edges.namedTransactionCategories[name] = append(t.Edges.namedTransactionCategories[name], edges...)
	}
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction

func (t Transactions) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
