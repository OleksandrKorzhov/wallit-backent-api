// Code generated by ent, DO NOT EDIT.

package plaidinstitutionaccount

import (
	"wallit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLTE(FieldID, id))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldAccountID, v))
}

// BalanceAvailable applies equality check predicate on the "balance_available" field. It's identical to BalanceAvailableEQ.
func BalanceAvailable(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldBalanceAvailable, v))
}

// BalanceCurrent applies equality check predicate on the "balance_current" field. It's identical to BalanceCurrentEQ.
func BalanceCurrent(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldBalanceCurrent, v))
}

// BalanceIsoCurrencyCode applies equality check predicate on the "balance_iso_currency_code" field. It's identical to BalanceIsoCurrencyCodeEQ.
func BalanceIsoCurrencyCode(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldBalanceIsoCurrencyCode, v))
}

// Mask applies equality check predicate on the "mask" field. It's identical to MaskEQ.
func Mask(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldMask, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldName, v))
}

// OfficialName applies equality check predicate on the "official_name" field. It's identical to OfficialNameEQ.
func OfficialName(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldOfficialName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldType, v))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGT(FieldAccountID, v))
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGTE(FieldAccountID, v))
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLT(FieldAccountID, v))
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLTE(FieldAccountID, v))
}

// AccountIDContains applies the Contains predicate on the "account_id" field.
func AccountIDContains(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldContains(FieldAccountID, v))
}

// AccountIDHasPrefix applies the HasPrefix predicate on the "account_id" field.
func AccountIDHasPrefix(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldHasPrefix(FieldAccountID, v))
}

// AccountIDHasSuffix applies the HasSuffix predicate on the "account_id" field.
func AccountIDHasSuffix(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldHasSuffix(FieldAccountID, v))
}

// AccountIDEqualFold applies the EqualFold predicate on the "account_id" field.
func AccountIDEqualFold(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEqualFold(FieldAccountID, v))
}

// AccountIDContainsFold applies the ContainsFold predicate on the "account_id" field.
func AccountIDContainsFold(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldContainsFold(FieldAccountID, v))
}

// BalanceAvailableEQ applies the EQ predicate on the "balance_available" field.
func BalanceAvailableEQ(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldBalanceAvailable, v))
}

// BalanceAvailableNEQ applies the NEQ predicate on the "balance_available" field.
func BalanceAvailableNEQ(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNEQ(FieldBalanceAvailable, v))
}

// BalanceAvailableIn applies the In predicate on the "balance_available" field.
func BalanceAvailableIn(vs ...float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldIn(FieldBalanceAvailable, vs...))
}

// BalanceAvailableNotIn applies the NotIn predicate on the "balance_available" field.
func BalanceAvailableNotIn(vs ...float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNotIn(FieldBalanceAvailable, vs...))
}

// BalanceAvailableGT applies the GT predicate on the "balance_available" field.
func BalanceAvailableGT(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGT(FieldBalanceAvailable, v))
}

// BalanceAvailableGTE applies the GTE predicate on the "balance_available" field.
func BalanceAvailableGTE(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGTE(FieldBalanceAvailable, v))
}

// BalanceAvailableLT applies the LT predicate on the "balance_available" field.
func BalanceAvailableLT(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLT(FieldBalanceAvailable, v))
}

// BalanceAvailableLTE applies the LTE predicate on the "balance_available" field.
func BalanceAvailableLTE(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLTE(FieldBalanceAvailable, v))
}

// BalanceCurrentEQ applies the EQ predicate on the "balance_current" field.
func BalanceCurrentEQ(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldBalanceCurrent, v))
}

// BalanceCurrentNEQ applies the NEQ predicate on the "balance_current" field.
func BalanceCurrentNEQ(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNEQ(FieldBalanceCurrent, v))
}

// BalanceCurrentIn applies the In predicate on the "balance_current" field.
func BalanceCurrentIn(vs ...float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldIn(FieldBalanceCurrent, vs...))
}

// BalanceCurrentNotIn applies the NotIn predicate on the "balance_current" field.
func BalanceCurrentNotIn(vs ...float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNotIn(FieldBalanceCurrent, vs...))
}

// BalanceCurrentGT applies the GT predicate on the "balance_current" field.
func BalanceCurrentGT(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGT(FieldBalanceCurrent, v))
}

// BalanceCurrentGTE applies the GTE predicate on the "balance_current" field.
func BalanceCurrentGTE(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGTE(FieldBalanceCurrent, v))
}

// BalanceCurrentLT applies the LT predicate on the "balance_current" field.
func BalanceCurrentLT(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLT(FieldBalanceCurrent, v))
}

// BalanceCurrentLTE applies the LTE predicate on the "balance_current" field.
func BalanceCurrentLTE(v float64) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLTE(FieldBalanceCurrent, v))
}

// BalanceIsoCurrencyCodeEQ applies the EQ predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeEQ(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldBalanceIsoCurrencyCode, v))
}

// BalanceIsoCurrencyCodeNEQ applies the NEQ predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeNEQ(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNEQ(FieldBalanceIsoCurrencyCode, v))
}

// BalanceIsoCurrencyCodeIn applies the In predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeIn(vs ...string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldIn(FieldBalanceIsoCurrencyCode, vs...))
}

// BalanceIsoCurrencyCodeNotIn applies the NotIn predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeNotIn(vs ...string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNotIn(FieldBalanceIsoCurrencyCode, vs...))
}

// BalanceIsoCurrencyCodeGT applies the GT predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeGT(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGT(FieldBalanceIsoCurrencyCode, v))
}

// BalanceIsoCurrencyCodeGTE applies the GTE predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeGTE(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGTE(FieldBalanceIsoCurrencyCode, v))
}

// BalanceIsoCurrencyCodeLT applies the LT predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeLT(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLT(FieldBalanceIsoCurrencyCode, v))
}

// BalanceIsoCurrencyCodeLTE applies the LTE predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeLTE(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLTE(FieldBalanceIsoCurrencyCode, v))
}

// BalanceIsoCurrencyCodeContains applies the Contains predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeContains(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldContains(FieldBalanceIsoCurrencyCode, v))
}

// BalanceIsoCurrencyCodeHasPrefix applies the HasPrefix predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeHasPrefix(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldHasPrefix(FieldBalanceIsoCurrencyCode, v))
}

// BalanceIsoCurrencyCodeHasSuffix applies the HasSuffix predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeHasSuffix(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldHasSuffix(FieldBalanceIsoCurrencyCode, v))
}

// BalanceIsoCurrencyCodeEqualFold applies the EqualFold predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeEqualFold(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEqualFold(FieldBalanceIsoCurrencyCode, v))
}

// BalanceIsoCurrencyCodeContainsFold applies the ContainsFold predicate on the "balance_iso_currency_code" field.
func BalanceIsoCurrencyCodeContainsFold(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldContainsFold(FieldBalanceIsoCurrencyCode, v))
}

// MaskEQ applies the EQ predicate on the "mask" field.
func MaskEQ(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldMask, v))
}

// MaskNEQ applies the NEQ predicate on the "mask" field.
func MaskNEQ(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNEQ(FieldMask, v))
}

// MaskIn applies the In predicate on the "mask" field.
func MaskIn(vs ...string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldIn(FieldMask, vs...))
}

// MaskNotIn applies the NotIn predicate on the "mask" field.
func MaskNotIn(vs ...string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNotIn(FieldMask, vs...))
}

// MaskGT applies the GT predicate on the "mask" field.
func MaskGT(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGT(FieldMask, v))
}

// MaskGTE applies the GTE predicate on the "mask" field.
func MaskGTE(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGTE(FieldMask, v))
}

// MaskLT applies the LT predicate on the "mask" field.
func MaskLT(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLT(FieldMask, v))
}

// MaskLTE applies the LTE predicate on the "mask" field.
func MaskLTE(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLTE(FieldMask, v))
}

// MaskContains applies the Contains predicate on the "mask" field.
func MaskContains(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldContains(FieldMask, v))
}

// MaskHasPrefix applies the HasPrefix predicate on the "mask" field.
func MaskHasPrefix(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldHasPrefix(FieldMask, v))
}

// MaskHasSuffix applies the HasSuffix predicate on the "mask" field.
func MaskHasSuffix(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldHasSuffix(FieldMask, v))
}

// MaskEqualFold applies the EqualFold predicate on the "mask" field.
func MaskEqualFold(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEqualFold(FieldMask, v))
}

// MaskContainsFold applies the ContainsFold predicate on the "mask" field.
func MaskContainsFold(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldContainsFold(FieldMask, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldContainsFold(FieldName, v))
}

// OfficialNameEQ applies the EQ predicate on the "official_name" field.
func OfficialNameEQ(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldOfficialName, v))
}

// OfficialNameNEQ applies the NEQ predicate on the "official_name" field.
func OfficialNameNEQ(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNEQ(FieldOfficialName, v))
}

// OfficialNameIn applies the In predicate on the "official_name" field.
func OfficialNameIn(vs ...string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldIn(FieldOfficialName, vs...))
}

// OfficialNameNotIn applies the NotIn predicate on the "official_name" field.
func OfficialNameNotIn(vs ...string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNotIn(FieldOfficialName, vs...))
}

// OfficialNameGT applies the GT predicate on the "official_name" field.
func OfficialNameGT(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGT(FieldOfficialName, v))
}

// OfficialNameGTE applies the GTE predicate on the "official_name" field.
func OfficialNameGTE(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGTE(FieldOfficialName, v))
}

// OfficialNameLT applies the LT predicate on the "official_name" field.
func OfficialNameLT(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLT(FieldOfficialName, v))
}

// OfficialNameLTE applies the LTE predicate on the "official_name" field.
func OfficialNameLTE(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLTE(FieldOfficialName, v))
}

// OfficialNameContains applies the Contains predicate on the "official_name" field.
func OfficialNameContains(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldContains(FieldOfficialName, v))
}

// OfficialNameHasPrefix applies the HasPrefix predicate on the "official_name" field.
func OfficialNameHasPrefix(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldHasPrefix(FieldOfficialName, v))
}

// OfficialNameHasSuffix applies the HasSuffix predicate on the "official_name" field.
func OfficialNameHasSuffix(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldHasSuffix(FieldOfficialName, v))
}

// OfficialNameIsNil applies the IsNil predicate on the "official_name" field.
func OfficialNameIsNil() predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldIsNull(FieldOfficialName))
}

// OfficialNameNotNil applies the NotNil predicate on the "official_name" field.
func OfficialNameNotNil() predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNotNull(FieldOfficialName))
}

// OfficialNameEqualFold applies the EqualFold predicate on the "official_name" field.
func OfficialNameEqualFold(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEqualFold(FieldOfficialName, v))
}

// OfficialNameContainsFold applies the ContainsFold predicate on the "official_name" field.
func OfficialNameContainsFold(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldContainsFold(FieldOfficialName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(sql.FieldContainsFold(FieldType, v))
}

// HasParentInstitution applies the HasEdge predicate on the "parent_institution" edge.
func HasParentInstitution() predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentInstitutionTable, ParentInstitutionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentInstitutionWith applies the HasEdge predicate on the "parent_institution" edge with a given conditions (other predicates).
func HasParentInstitutionWith(preds ...predicate.PlaidInstitution) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentInstitutionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentInstitutionTable, ParentInstitutionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransactions applies the HasEdge predicate on the "transactions" edge.
func HasTransactions() predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionsWith applies the HasEdge predicate on the "transactions" edge with a given conditions (other predicates).
func HasTransactionsWith(preds ...predicate.Transaction) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TransactionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlaidInstitutionAccount) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlaidInstitutionAccount) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlaidInstitutionAccount) predicate.PlaidInstitutionAccount {
	return predicate.PlaidInstitutionAccount(func(s *sql.Selector) {
		p(s.Not())
	})
}
