// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wallit/ent/plaiditem"
	"wallit/ent/predicate"
	"wallit/ent/transactionsync"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionSyncUpdate is the builder for updating TransactionSync entities.
type TransactionSyncUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionSyncMutation
}

// Where appends a list predicates to the TransactionSyncUpdate builder.
func (tsu *TransactionSyncUpdate) Where(ps ...predicate.TransactionSync) *TransactionSyncUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetCreatedAt sets the "created_at" field.
func (tsu *TransactionSyncUpdate) SetCreatedAt(t time.Time) *TransactionSyncUpdate {
	tsu.mutation.SetCreatedAt(t)
	return tsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsu *TransactionSyncUpdate) SetNillableCreatedAt(t *time.Time) *TransactionSyncUpdate {
	if t != nil {
		tsu.SetCreatedAt(*t)
	}
	return tsu
}

// SetCursor sets the "cursor" field.
func (tsu *TransactionSyncUpdate) SetCursor(s string) *TransactionSyncUpdate {
	tsu.mutation.SetCursor(s)
	return tsu
}

// SetItemID sets the "item" edge to the PlaidItem entity by ID.
func (tsu *TransactionSyncUpdate) SetItemID(id int) *TransactionSyncUpdate {
	tsu.mutation.SetItemID(id)
	return tsu
}

// SetNillableItemID sets the "item" edge to the PlaidItem entity by ID if the given value is not nil.
func (tsu *TransactionSyncUpdate) SetNillableItemID(id *int) *TransactionSyncUpdate {
	if id != nil {
		tsu = tsu.SetItemID(*id)
	}
	return tsu
}

// SetItem sets the "item" edge to the PlaidItem entity.
func (tsu *TransactionSyncUpdate) SetItem(p *PlaidItem) *TransactionSyncUpdate {
	return tsu.SetItemID(p.ID)
}

// Mutation returns the TransactionSyncMutation object of the builder.
func (tsu *TransactionSyncUpdate) Mutation() *TransactionSyncMutation {
	return tsu.mutation
}

// ClearItem clears the "item" edge to the PlaidItem entity.
func (tsu *TransactionSyncUpdate) ClearItem() *TransactionSyncUpdate {
	tsu.mutation.ClearItem()
	return tsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TransactionSyncUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TransactionSyncMutation](ctx, tsu.sqlSave, tsu.mutation, tsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TransactionSyncUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TransactionSyncUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TransactionSyncUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsu *TransactionSyncUpdate) check() error {
	if v, ok := tsu.mutation.Cursor(); ok {
		if err := transactionsync.CursorValidator(v); err != nil {
			return &ValidationError{Name: "cursor", err: fmt.Errorf(`ent: validator failed for field "TransactionSync.cursor": %w`, err)}
		}
	}
	return nil
}

func (tsu *TransactionSyncUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tsu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transactionsync.Table,
			Columns: transactionsync.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transactionsync.FieldID,
			},
		},
	}
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.CreatedAt(); ok {
		_spec.SetField(transactionsync.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tsu.mutation.Cursor(); ok {
		_spec.SetField(transactionsync.FieldCursor, field.TypeString, value)
	}
	if tsu.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionsync.ItemTable,
			Columns: []string{transactionsync.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionsync.ItemTable,
			Columns: []string{transactionsync.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionsync.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsu.mutation.done = true
	return n, nil
}

// TransactionSyncUpdateOne is the builder for updating a single TransactionSync entity.
type TransactionSyncUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionSyncMutation
}

// SetCreatedAt sets the "created_at" field.
func (tsuo *TransactionSyncUpdateOne) SetCreatedAt(t time.Time) *TransactionSyncUpdateOne {
	tsuo.mutation.SetCreatedAt(t)
	return tsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsuo *TransactionSyncUpdateOne) SetNillableCreatedAt(t *time.Time) *TransactionSyncUpdateOne {
	if t != nil {
		tsuo.SetCreatedAt(*t)
	}
	return tsuo
}

// SetCursor sets the "cursor" field.
func (tsuo *TransactionSyncUpdateOne) SetCursor(s string) *TransactionSyncUpdateOne {
	tsuo.mutation.SetCursor(s)
	return tsuo
}

// SetItemID sets the "item" edge to the PlaidItem entity by ID.
func (tsuo *TransactionSyncUpdateOne) SetItemID(id int) *TransactionSyncUpdateOne {
	tsuo.mutation.SetItemID(id)
	return tsuo
}

// SetNillableItemID sets the "item" edge to the PlaidItem entity by ID if the given value is not nil.
func (tsuo *TransactionSyncUpdateOne) SetNillableItemID(id *int) *TransactionSyncUpdateOne {
	if id != nil {
		tsuo = tsuo.SetItemID(*id)
	}
	return tsuo
}

// SetItem sets the "item" edge to the PlaidItem entity.
func (tsuo *TransactionSyncUpdateOne) SetItem(p *PlaidItem) *TransactionSyncUpdateOne {
	return tsuo.SetItemID(p.ID)
}

// Mutation returns the TransactionSyncMutation object of the builder.
func (tsuo *TransactionSyncUpdateOne) Mutation() *TransactionSyncMutation {
	return tsuo.mutation
}

// ClearItem clears the "item" edge to the PlaidItem entity.
func (tsuo *TransactionSyncUpdateOne) ClearItem() *TransactionSyncUpdateOne {
	tsuo.mutation.ClearItem()
	return tsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TransactionSyncUpdateOne) Select(field string, fields ...string) *TransactionSyncUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TransactionSync entity.
func (tsuo *TransactionSyncUpdateOne) Save(ctx context.Context) (*TransactionSync, error) {
	return withHooks[*TransactionSync, TransactionSyncMutation](ctx, tsuo.sqlSave, tsuo.mutation, tsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TransactionSyncUpdateOne) SaveX(ctx context.Context) *TransactionSync {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TransactionSyncUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TransactionSyncUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsuo *TransactionSyncUpdateOne) check() error {
	if v, ok := tsuo.mutation.Cursor(); ok {
		if err := transactionsync.CursorValidator(v); err != nil {
			return &ValidationError{Name: "cursor", err: fmt.Errorf(`ent: validator failed for field "TransactionSync.cursor": %w`, err)}
		}
	}
	return nil
}

func (tsuo *TransactionSyncUpdateOne) sqlSave(ctx context.Context) (_node *TransactionSync, err error) {
	if err := tsuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transactionsync.Table,
			Columns: transactionsync.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transactionsync.FieldID,
			},
		},
	}
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TransactionSync.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transactionsync.FieldID)
		for _, f := range fields {
			if !transactionsync.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transactionsync.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.CreatedAt(); ok {
		_spec.SetField(transactionsync.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tsuo.mutation.Cursor(); ok {
		_spec.SetField(transactionsync.FieldCursor, field.TypeString, value)
	}
	if tsuo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionsync.ItemTable,
			Columns: []string{transactionsync.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionsync.ItemTable,
			Columns: []string{transactionsync.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TransactionSync{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionsync.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsuo.mutation.done = true
	return _node, nil
}
