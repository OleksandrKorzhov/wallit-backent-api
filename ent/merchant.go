// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"wallit/ent/merchant"

	"entgo.io/ent/dialect/sql"
)

// Merchant is the model entity for the Merchant schema.
type Merchant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MerchantQuery when eager-loading is set.
	Edges MerchantEdges `json:"edges"`
}

// MerchantEdges holds the relations/edges for other nodes in the graph.
type MerchantEdges struct {
	// DiscountOffers holds the value of the discount_offers edge.
	DiscountOffers []*DiscountOffer `json:"discount_offers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedDiscountOffers map[string][]*DiscountOffer
}

// DiscountOffersOrErr returns the DiscountOffers value or an error if the edge
// was not loaded in eager-loading.
func (e MerchantEdges) DiscountOffersOrErr() ([]*DiscountOffer, error) {
	if e.loadedTypes[0] {
		return e.DiscountOffers, nil
	}
	return nil, &NotLoadedError{edge: "discount_offers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Merchant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case merchant.FieldID:
			values[i] = new(sql.NullInt64)
		case merchant.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Merchant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Merchant fields.
func (m *Merchant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case merchant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case merchant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		}
	}
	return nil
}

// QueryDiscountOffers queries the "discount_offers" edge of the Merchant entity.
func (m *Merchant) QueryDiscountOffers() *DiscountOfferQuery {
	return NewMerchantClient(m.config).QueryDiscountOffers(m)
}

// Update returns a builder for updating this Merchant.
// Note that you need to call Merchant.Unwrap() before calling this method if this Merchant
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Merchant) Update() *MerchantUpdateOne {
	return NewMerchantClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Merchant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Merchant) Unwrap() *Merchant {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Merchant is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Merchant) String() string {
	var builder strings.Builder
	builder.WriteString("Merchant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedDiscountOffers returns the DiscountOffers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Merchant) NamedDiscountOffers(name string) ([]*DiscountOffer, error) {
	if m.Edges.namedDiscountOffers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedDiscountOffers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Merchant) appendNamedDiscountOffers(name string, edges ...*DiscountOffer) {
	if m.Edges.namedDiscountOffers == nil {
		m.Edges.namedDiscountOffers = make(map[string][]*DiscountOffer)
	}
	if len(edges) == 0 {
		m.Edges.namedDiscountOffers[name] = []*DiscountOffer{}
	} else {
		m.Edges.namedDiscountOffers[name] = append(m.Edges.namedDiscountOffers[name], edges...)
	}
}

// Merchants is a parsable slice of Merchant.
type Merchants []*Merchant

func (m Merchants) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
