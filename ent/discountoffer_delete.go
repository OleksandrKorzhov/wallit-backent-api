// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"wallit/ent/discountoffer"
	"wallit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiscountOfferDelete is the builder for deleting a DiscountOffer entity.
type DiscountOfferDelete struct {
	config
	hooks    []Hook
	mutation *DiscountOfferMutation
}

// Where appends a list predicates to the DiscountOfferDelete builder.
func (dod *DiscountOfferDelete) Where(ps ...predicate.DiscountOffer) *DiscountOfferDelete {
	dod.mutation.Where(ps...)
	return dod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dod *DiscountOfferDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, DiscountOfferMutation](ctx, dod.sqlExec, dod.mutation, dod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dod *DiscountOfferDelete) ExecX(ctx context.Context) int {
	n, err := dod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dod *DiscountOfferDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: discountoffer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discountoffer.FieldID,
			},
		},
	}
	if ps := dod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dod.mutation.done = true
	return affected, err
}

// DiscountOfferDeleteOne is the builder for deleting a single DiscountOffer entity.
type DiscountOfferDeleteOne struct {
	dod *DiscountOfferDelete
}

// Where appends a list predicates to the DiscountOfferDelete builder.
func (dodo *DiscountOfferDeleteOne) Where(ps ...predicate.DiscountOffer) *DiscountOfferDeleteOne {
	dodo.dod.mutation.Where(ps...)
	return dodo
}

// Exec executes the deletion query.
func (dodo *DiscountOfferDeleteOne) Exec(ctx context.Context) error {
	n, err := dodo.dod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{discountoffer.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dodo *DiscountOfferDeleteOne) ExecX(ctx context.Context) {
	if err := dodo.Exec(ctx); err != nil {
		panic(err)
	}
}
