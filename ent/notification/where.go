// Code generated by ent, DO NOT EDIT.

package notification

import (
	"time"
	"wallit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldID, id))
}

// CheckedInApp applies equality check predicate on the "checked_in_app" field. It's identical to CheckedInAppEQ.
func CheckedInApp(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCheckedInApp, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// IncludedInAggregatedOfferAt applies equality check predicate on the "included_in_aggregated_offer_at" field. It's identical to IncludedInAggregatedOfferAtEQ.
func IncludedInAggregatedOfferAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldIncludedInAggregatedOfferAt, v))
}

// CheckedInAppEQ applies the EQ predicate on the "checked_in_app" field.
func CheckedInAppEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCheckedInApp, v))
}

// CheckedInAppNEQ applies the NEQ predicate on the "checked_in_app" field.
func CheckedInAppNEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCheckedInApp, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldType, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldCreatedAt, v))
}

// IncludedInAggregatedOfferAtEQ applies the EQ predicate on the "included_in_aggregated_offer_at" field.
func IncludedInAggregatedOfferAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldIncludedInAggregatedOfferAt, v))
}

// IncludedInAggregatedOfferAtNEQ applies the NEQ predicate on the "included_in_aggregated_offer_at" field.
func IncludedInAggregatedOfferAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldIncludedInAggregatedOfferAt, v))
}

// IncludedInAggregatedOfferAtIn applies the In predicate on the "included_in_aggregated_offer_at" field.
func IncludedInAggregatedOfferAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldIncludedInAggregatedOfferAt, vs...))
}

// IncludedInAggregatedOfferAtNotIn applies the NotIn predicate on the "included_in_aggregated_offer_at" field.
func IncludedInAggregatedOfferAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldIncludedInAggregatedOfferAt, vs...))
}

// IncludedInAggregatedOfferAtGT applies the GT predicate on the "included_in_aggregated_offer_at" field.
func IncludedInAggregatedOfferAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldIncludedInAggregatedOfferAt, v))
}

// IncludedInAggregatedOfferAtGTE applies the GTE predicate on the "included_in_aggregated_offer_at" field.
func IncludedInAggregatedOfferAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldIncludedInAggregatedOfferAt, v))
}

// IncludedInAggregatedOfferAtLT applies the LT predicate on the "included_in_aggregated_offer_at" field.
func IncludedInAggregatedOfferAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldIncludedInAggregatedOfferAt, v))
}

// IncludedInAggregatedOfferAtLTE applies the LTE predicate on the "included_in_aggregated_offer_at" field.
func IncludedInAggregatedOfferAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldIncludedInAggregatedOfferAt, v))
}

// IncludedInAggregatedOfferAtIsNil applies the IsNil predicate on the "included_in_aggregated_offer_at" field.
func IncludedInAggregatedOfferAtIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldIncludedInAggregatedOfferAt))
}

// IncludedInAggregatedOfferAtNotNil applies the NotNil predicate on the "included_in_aggregated_offer_at" field.
func IncludedInAggregatedOfferAtNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldIncludedInAggregatedOfferAt))
}

// HasNotificationRecipient applies the HasEdge predicate on the "notification_recipient" edge.
func HasNotificationRecipient() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NotificationRecipientTable, NotificationRecipientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationRecipientWith applies the HasEdge predicate on the "notification_recipient" edge with a given conditions (other predicates).
func HasNotificationRecipientWith(preds ...predicate.User) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NotificationRecipientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NotificationRecipientTable, NotificationRecipientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotificationDiscountOffer applies the HasEdge predicate on the "notification_discount_offer" edge.
func HasNotificationDiscountOffer() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, NotificationDiscountOfferTable, NotificationDiscountOfferColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationDiscountOfferWith applies the HasEdge predicate on the "notification_discount_offer" edge with a given conditions (other predicates).
func HasNotificationDiscountOfferWith(preds ...predicate.DiscountOffer) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NotificationDiscountOfferInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, NotificationDiscountOfferTable, NotificationDiscountOfferColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		p(s.Not())
	})
}
