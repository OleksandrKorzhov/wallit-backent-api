// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"wallit/ent/discountoffer"
	"wallit/ent/merchant"
	"wallit/ent/notification"
	"wallit/ent/predicate"
	"wallit/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiscountOfferQuery is the builder for querying DiscountOffer entities.
type DiscountOfferQuery struct {
	config
	ctx                            *QueryContext
	order                          []OrderFunc
	inters                         []Interceptor
	predicates                     []predicate.DiscountOffer
	withOwnerMerchant              *MerchantQuery
	withDiscountEligibleUsers      *UserQuery
	withDiscountOfferNotification  *NotificationQuery
	withFKs                        bool
	modifiers                      []func(*sql.Selector)
	loadTotal                      []func(context.Context, []*DiscountOffer) error
	withNamedDiscountEligibleUsers map[string]*UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DiscountOfferQuery builder.
func (doq *DiscountOfferQuery) Where(ps ...predicate.DiscountOffer) *DiscountOfferQuery {
	doq.predicates = append(doq.predicates, ps...)
	return doq
}

// Limit the number of records to be returned by this query.
func (doq *DiscountOfferQuery) Limit(limit int) *DiscountOfferQuery {
	doq.ctx.Limit = &limit
	return doq
}

// Offset to start from.
func (doq *DiscountOfferQuery) Offset(offset int) *DiscountOfferQuery {
	doq.ctx.Offset = &offset
	return doq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (doq *DiscountOfferQuery) Unique(unique bool) *DiscountOfferQuery {
	doq.ctx.Unique = &unique
	return doq
}

// Order specifies how the records should be ordered.
func (doq *DiscountOfferQuery) Order(o ...OrderFunc) *DiscountOfferQuery {
	doq.order = append(doq.order, o...)
	return doq
}

// QueryOwnerMerchant chains the current query on the "owner_merchant" edge.
func (doq *DiscountOfferQuery) QueryOwnerMerchant() *MerchantQuery {
	query := (&MerchantClient{config: doq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := doq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := doq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discountoffer.Table, discountoffer.FieldID, selector),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, discountoffer.OwnerMerchantTable, discountoffer.OwnerMerchantColumn),
		)
		fromU = sqlgraph.SetNeighbors(doq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDiscountEligibleUsers chains the current query on the "discount_eligible_users" edge.
func (doq *DiscountOfferQuery) QueryDiscountEligibleUsers() *UserQuery {
	query := (&UserClient{config: doq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := doq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := doq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discountoffer.Table, discountoffer.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, discountoffer.DiscountEligibleUsersTable, discountoffer.DiscountEligibleUsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(doq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDiscountOfferNotification chains the current query on the "discount_offer_notification" edge.
func (doq *DiscountOfferQuery) QueryDiscountOfferNotification() *NotificationQuery {
	query := (&NotificationClient{config: doq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := doq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := doq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discountoffer.Table, discountoffer.FieldID, selector),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, discountoffer.DiscountOfferNotificationTable, discountoffer.DiscountOfferNotificationColumn),
		)
		fromU = sqlgraph.SetNeighbors(doq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DiscountOffer entity from the query.
// Returns a *NotFoundError when no DiscountOffer was found.
func (doq *DiscountOfferQuery) First(ctx context.Context) (*DiscountOffer, error) {
	nodes, err := doq.Limit(1).All(setContextOp(ctx, doq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{discountoffer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (doq *DiscountOfferQuery) FirstX(ctx context.Context) *DiscountOffer {
	node, err := doq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DiscountOffer ID from the query.
// Returns a *NotFoundError when no DiscountOffer ID was found.
func (doq *DiscountOfferQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = doq.Limit(1).IDs(setContextOp(ctx, doq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{discountoffer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (doq *DiscountOfferQuery) FirstIDX(ctx context.Context) int {
	id, err := doq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DiscountOffer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DiscountOffer entity is found.
// Returns a *NotFoundError when no DiscountOffer entities are found.
func (doq *DiscountOfferQuery) Only(ctx context.Context) (*DiscountOffer, error) {
	nodes, err := doq.Limit(2).All(setContextOp(ctx, doq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{discountoffer.Label}
	default:
		return nil, &NotSingularError{discountoffer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (doq *DiscountOfferQuery) OnlyX(ctx context.Context) *DiscountOffer {
	node, err := doq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DiscountOffer ID in the query.
// Returns a *NotSingularError when more than one DiscountOffer ID is found.
// Returns a *NotFoundError when no entities are found.
func (doq *DiscountOfferQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = doq.Limit(2).IDs(setContextOp(ctx, doq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{discountoffer.Label}
	default:
		err = &NotSingularError{discountoffer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (doq *DiscountOfferQuery) OnlyIDX(ctx context.Context) int {
	id, err := doq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DiscountOffers.
func (doq *DiscountOfferQuery) All(ctx context.Context) ([]*DiscountOffer, error) {
	ctx = setContextOp(ctx, doq.ctx, "All")
	if err := doq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DiscountOffer, *DiscountOfferQuery]()
	return withInterceptors[[]*DiscountOffer](ctx, doq, qr, doq.inters)
}

// AllX is like All, but panics if an error occurs.
func (doq *DiscountOfferQuery) AllX(ctx context.Context) []*DiscountOffer {
	nodes, err := doq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DiscountOffer IDs.
func (doq *DiscountOfferQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = setContextOp(ctx, doq.ctx, "IDs")
	if err := doq.Select(discountoffer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (doq *DiscountOfferQuery) IDsX(ctx context.Context) []int {
	ids, err := doq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (doq *DiscountOfferQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, doq.ctx, "Count")
	if err := doq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, doq, querierCount[*DiscountOfferQuery](), doq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (doq *DiscountOfferQuery) CountX(ctx context.Context) int {
	count, err := doq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (doq *DiscountOfferQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, doq.ctx, "Exist")
	switch _, err := doq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (doq *DiscountOfferQuery) ExistX(ctx context.Context) bool {
	exist, err := doq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DiscountOfferQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (doq *DiscountOfferQuery) Clone() *DiscountOfferQuery {
	if doq == nil {
		return nil
	}
	return &DiscountOfferQuery{
		config:                        doq.config,
		ctx:                           doq.ctx.Clone(),
		order:                         append([]OrderFunc{}, doq.order...),
		inters:                        append([]Interceptor{}, doq.inters...),
		predicates:                    append([]predicate.DiscountOffer{}, doq.predicates...),
		withOwnerMerchant:             doq.withOwnerMerchant.Clone(),
		withDiscountEligibleUsers:     doq.withDiscountEligibleUsers.Clone(),
		withDiscountOfferNotification: doq.withDiscountOfferNotification.Clone(),
		// clone intermediate query.
		sql:  doq.sql.Clone(),
		path: doq.path,
	}
}

// WithOwnerMerchant tells the query-builder to eager-load the nodes that are connected to
// the "owner_merchant" edge. The optional arguments are used to configure the query builder of the edge.
func (doq *DiscountOfferQuery) WithOwnerMerchant(opts ...func(*MerchantQuery)) *DiscountOfferQuery {
	query := (&MerchantClient{config: doq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	doq.withOwnerMerchant = query
	return doq
}

// WithDiscountEligibleUsers tells the query-builder to eager-load the nodes that are connected to
// the "discount_eligible_users" edge. The optional arguments are used to configure the query builder of the edge.
func (doq *DiscountOfferQuery) WithDiscountEligibleUsers(opts ...func(*UserQuery)) *DiscountOfferQuery {
	query := (&UserClient{config: doq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	doq.withDiscountEligibleUsers = query
	return doq
}

// WithDiscountOfferNotification tells the query-builder to eager-load the nodes that are connected to
// the "discount_offer_notification" edge. The optional arguments are used to configure the query builder of the edge.
func (doq *DiscountOfferQuery) WithDiscountOfferNotification(opts ...func(*NotificationQuery)) *DiscountOfferQuery {
	query := (&NotificationClient{config: doq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	doq.withDiscountOfferNotification = query
	return doq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Amount int `json:"amount,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DiscountOffer.Query().
//		GroupBy(discountoffer.FieldAmount).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (doq *DiscountOfferQuery) GroupBy(field string, fields ...string) *DiscountOfferGroupBy {
	doq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DiscountOfferGroupBy{build: doq}
	grbuild.flds = &doq.ctx.Fields
	grbuild.label = discountoffer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Amount int `json:"amount,omitempty"`
//	}
//
//	client.DiscountOffer.Query().
//		Select(discountoffer.FieldAmount).
//		Scan(ctx, &v)
func (doq *DiscountOfferQuery) Select(fields ...string) *DiscountOfferSelect {
	doq.ctx.Fields = append(doq.ctx.Fields, fields...)
	sbuild := &DiscountOfferSelect{DiscountOfferQuery: doq}
	sbuild.label = discountoffer.Label
	sbuild.flds, sbuild.scan = &doq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DiscountOfferSelect configured with the given aggregations.
func (doq *DiscountOfferQuery) Aggregate(fns ...AggregateFunc) *DiscountOfferSelect {
	return doq.Select().Aggregate(fns...)
}

func (doq *DiscountOfferQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range doq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, doq); err != nil {
				return err
			}
		}
	}
	for _, f := range doq.ctx.Fields {
		if !discountoffer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if doq.path != nil {
		prev, err := doq.path(ctx)
		if err != nil {
			return err
		}
		doq.sql = prev
	}
	return nil
}

func (doq *DiscountOfferQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DiscountOffer, error) {
	var (
		nodes       = []*DiscountOffer{}
		withFKs     = doq.withFKs
		_spec       = doq.querySpec()
		loadedTypes = [3]bool{
			doq.withOwnerMerchant != nil,
			doq.withDiscountEligibleUsers != nil,
			doq.withDiscountOfferNotification != nil,
		}
	)
	if doq.withOwnerMerchant != nil || doq.withDiscountOfferNotification != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, discountoffer.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DiscountOffer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DiscountOffer{config: doq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(doq.modifiers) > 0 {
		_spec.Modifiers = doq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, doq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := doq.withOwnerMerchant; query != nil {
		if err := doq.loadOwnerMerchant(ctx, query, nodes, nil,
			func(n *DiscountOffer, e *Merchant) { n.Edges.OwnerMerchant = e }); err != nil {
			return nil, err
		}
	}
	if query := doq.withDiscountEligibleUsers; query != nil {
		if err := doq.loadDiscountEligibleUsers(ctx, query, nodes,
			func(n *DiscountOffer) { n.Edges.DiscountEligibleUsers = []*User{} },
			func(n *DiscountOffer, e *User) {
				n.Edges.DiscountEligibleUsers = append(n.Edges.DiscountEligibleUsers, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := doq.withDiscountOfferNotification; query != nil {
		if err := doq.loadDiscountOfferNotification(ctx, query, nodes, nil,
			func(n *DiscountOffer, e *Notification) { n.Edges.DiscountOfferNotification = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range doq.withNamedDiscountEligibleUsers {
		if err := doq.loadDiscountEligibleUsers(ctx, query, nodes,
			func(n *DiscountOffer) { n.appendNamedDiscountEligibleUsers(name) },
			func(n *DiscountOffer, e *User) { n.appendNamedDiscountEligibleUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range doq.loadTotal {
		if err := doq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (doq *DiscountOfferQuery) loadOwnerMerchant(ctx context.Context, query *MerchantQuery, nodes []*DiscountOffer, init func(*DiscountOffer), assign func(*DiscountOffer, *Merchant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DiscountOffer)
	for i := range nodes {
		if nodes[i].merchant_discount_offers == nil {
			continue
		}
		fk := *nodes[i].merchant_discount_offers
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(merchant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "merchant_discount_offers" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (doq *DiscountOfferQuery) loadDiscountEligibleUsers(ctx context.Context, query *UserQuery, nodes []*DiscountOffer, init func(*DiscountOffer), assign func(*DiscountOffer, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*DiscountOffer)
	nids := make(map[int]map[*DiscountOffer]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(discountoffer.DiscountEligibleUsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(discountoffer.DiscountEligibleUsersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(discountoffer.DiscountEligibleUsersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(discountoffer.DiscountEligibleUsersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*DiscountOffer]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "discount_eligible_users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (doq *DiscountOfferQuery) loadDiscountOfferNotification(ctx context.Context, query *NotificationQuery, nodes []*DiscountOffer, init func(*DiscountOffer), assign func(*DiscountOffer, *Notification)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DiscountOffer)
	for i := range nodes {
		if nodes[i].notification_notification_discount_offer == nil {
			continue
		}
		fk := *nodes[i].notification_notification_discount_offer
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(notification.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "notification_notification_discount_offer" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (doq *DiscountOfferQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := doq.querySpec()
	if len(doq.modifiers) > 0 {
		_spec.Modifiers = doq.modifiers
	}
	_spec.Node.Columns = doq.ctx.Fields
	if len(doq.ctx.Fields) > 0 {
		_spec.Unique = doq.ctx.Unique != nil && *doq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, doq.driver, _spec)
}

func (doq *DiscountOfferQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discountoffer.Table,
			Columns: discountoffer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discountoffer.FieldID,
			},
		},
		From:   doq.sql,
		Unique: true,
	}
	if unique := doq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := doq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discountoffer.FieldID)
		for i := range fields {
			if fields[i] != discountoffer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := doq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := doq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := doq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := doq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (doq *DiscountOfferQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(doq.driver.Dialect())
	t1 := builder.Table(discountoffer.Table)
	columns := doq.ctx.Fields
	if len(columns) == 0 {
		columns = discountoffer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if doq.sql != nil {
		selector = doq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if doq.ctx.Unique != nil && *doq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range doq.predicates {
		p(selector)
	}
	for _, p := range doq.order {
		p(selector)
	}
	if offset := doq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := doq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDiscountEligibleUsers tells the query-builder to eager-load the nodes that are connected to the "discount_eligible_users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (doq *DiscountOfferQuery) WithNamedDiscountEligibleUsers(name string, opts ...func(*UserQuery)) *DiscountOfferQuery {
	query := (&UserClient{config: doq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if doq.withNamedDiscountEligibleUsers == nil {
		doq.withNamedDiscountEligibleUsers = make(map[string]*UserQuery)
	}
	doq.withNamedDiscountEligibleUsers[name] = query
	return doq
}

// DiscountOfferGroupBy is the group-by builder for DiscountOffer entities.
type DiscountOfferGroupBy struct {
	selector
	build *DiscountOfferQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dogb *DiscountOfferGroupBy) Aggregate(fns ...AggregateFunc) *DiscountOfferGroupBy {
	dogb.fns = append(dogb.fns, fns...)
	return dogb
}

// Scan applies the selector query and scans the result into the given value.
func (dogb *DiscountOfferGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dogb.build.ctx, "GroupBy")
	if err := dogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DiscountOfferQuery, *DiscountOfferGroupBy](ctx, dogb.build, dogb, dogb.build.inters, v)
}

func (dogb *DiscountOfferGroupBy) sqlScan(ctx context.Context, root *DiscountOfferQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dogb.fns))
	for _, fn := range dogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dogb.flds)+len(dogb.fns))
		for _, f := range *dogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DiscountOfferSelect is the builder for selecting fields of DiscountOffer entities.
type DiscountOfferSelect struct {
	*DiscountOfferQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dos *DiscountOfferSelect) Aggregate(fns ...AggregateFunc) *DiscountOfferSelect {
	dos.fns = append(dos.fns, fns...)
	return dos
}

// Scan applies the selector query and scans the result into the given value.
func (dos *DiscountOfferSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dos.ctx, "Select")
	if err := dos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DiscountOfferQuery, *DiscountOfferSelect](ctx, dos.DiscountOfferQuery, dos, dos.inters, v)
}

func (dos *DiscountOfferSelect) sqlScan(ctx context.Context, root *DiscountOfferQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dos.fns))
	for _, fn := range dos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
