// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"wallit/ent/plaidinstitution"
	"wallit/ent/plaiditem"

	"entgo.io/ent/dialect/sql"
)

// PlaidInstitution is the model entity for the PlaidInstitution schema.
type PlaidInstitution struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InstitutionID holds the value of the "institution_id" field.
	InstitutionID string `json:"institution_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaidInstitutionQuery when eager-loading is set.
	Edges                  PlaidInstitutionEdges `json:"edges"`
	plaid_item_institution *int
}

// PlaidInstitutionEdges holds the relations/edges for other nodes in the graph.
type PlaidInstitutionEdges struct {
	// PlaidItem holds the value of the plaid_item edge.
	PlaidItem *PlaidItem `json:"plaid_item,omitempty"`
	// Accounts holds the value of the accounts edge.
	Accounts []*PlaidInstitutionAccount `json:"accounts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedAccounts map[string][]*PlaidInstitutionAccount
}

// PlaidItemOrErr returns the PlaidItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaidInstitutionEdges) PlaidItemOrErr() (*PlaidItem, error) {
	if e.loadedTypes[0] {
		if e.PlaidItem == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plaiditem.Label}
		}
		return e.PlaidItem, nil
	}
	return nil, &NotLoadedError{edge: "plaid_item"}
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e PlaidInstitutionEdges) AccountsOrErr() ([]*PlaidInstitutionAccount, error) {
	if e.loadedTypes[1] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlaidInstitution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plaidinstitution.FieldID:
			values[i] = new(sql.NullInt64)
		case plaidinstitution.FieldInstitutionID, plaidinstitution.FieldName:
			values[i] = new(sql.NullString)
		case plaidinstitution.ForeignKeys[0]: // plaid_item_institution
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PlaidInstitution", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaidInstitution fields.
func (pi *PlaidInstitution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plaidinstitution.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case plaidinstitution.FieldInstitutionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field institution_id", values[i])
			} else if value.Valid {
				pi.InstitutionID = value.String
			}
		case plaidinstitution.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pi.Name = value.String
			}
		case plaidinstitution.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field plaid_item_institution", value)
			} else if value.Valid {
				pi.plaid_item_institution = new(int)
				*pi.plaid_item_institution = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPlaidItem queries the "plaid_item" edge of the PlaidInstitution entity.
func (pi *PlaidInstitution) QueryPlaidItem() *PlaidItemQuery {
	return NewPlaidInstitutionClient(pi.config).QueryPlaidItem(pi)
}

// QueryAccounts queries the "accounts" edge of the PlaidInstitution entity.
func (pi *PlaidInstitution) QueryAccounts() *PlaidInstitutionAccountQuery {
	return NewPlaidInstitutionClient(pi.config).QueryAccounts(pi)
}

// Update returns a builder for updating this PlaidInstitution.
// Note that you need to call PlaidInstitution.Unwrap() before calling this method if this PlaidInstitution
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PlaidInstitution) Update() *PlaidInstitutionUpdateOne {
	return NewPlaidInstitutionClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the PlaidInstitution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PlaidInstitution) Unwrap() *PlaidInstitution {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaidInstitution is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PlaidInstitution) String() string {
	var builder strings.Builder
	builder.WriteString("PlaidInstitution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("institution_id=")
	builder.WriteString(pi.InstitutionID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pi.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedAccounts returns the Accounts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pi *PlaidInstitution) NamedAccounts(name string) ([]*PlaidInstitutionAccount, error) {
	if pi.Edges.namedAccounts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pi.Edges.namedAccounts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pi *PlaidInstitution) appendNamedAccounts(name string, edges ...*PlaidInstitutionAccount) {
	if pi.Edges.namedAccounts == nil {
		pi.Edges.namedAccounts = make(map[string][]*PlaidInstitutionAccount)
	}
	if len(edges) == 0 {
		pi.Edges.namedAccounts[name] = []*PlaidInstitutionAccount{}
	} else {
		pi.Edges.namedAccounts[name] = append(pi.Edges.namedAccounts[name], edges...)
	}
}

// PlaidInstitutions is a parsable slice of PlaidInstitution.
type PlaidInstitutions []*PlaidInstitution

func (pi PlaidInstitutions) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
