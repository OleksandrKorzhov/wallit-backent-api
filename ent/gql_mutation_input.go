// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
	"wallit/ent/discountoffer"
	"wallit/ent/user"
	"wallit/ent/usernotificationchannelpreferences"
)

// CreateDiscountOfferInput represents a mutation input for creating discountoffers.
type CreateDiscountOfferInput struct {
	Amount                         int
	Type                           *discountoffer.Type
	Currency                       *string
	Description                    string
	MerchantSpecificIdentification string
	ExpiresAt                      time.Time
	OwnerMerchantID                int
	DiscountEligibleUserIDs        []int
	DiscountOfferNotificationID    *int
}

// Mutate applies the CreateDiscountOfferInput on the DiscountOfferMutation builder.
func (i *CreateDiscountOfferInput) Mutate(m *DiscountOfferMutation) {
	m.SetAmount(i.Amount)
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Currency; v != nil {
		m.SetCurrency(*v)
	}
	m.SetDescription(i.Description)
	m.SetMerchantSpecificIdentification(i.MerchantSpecificIdentification)
	m.SetExpiresAt(i.ExpiresAt)
	m.SetOwnerMerchantID(i.OwnerMerchantID)
	if v := i.DiscountEligibleUserIDs; len(v) > 0 {
		m.AddDiscountEligibleUserIDs(v...)
	}
	if v := i.DiscountOfferNotificationID; v != nil {
		m.SetDiscountOfferNotificationID(*v)
	}
}

// SetInput applies the change-set in the CreateDiscountOfferInput on the DiscountOfferCreate builder.
func (c *DiscountOfferCreate) SetInput(i CreateDiscountOfferInput) *DiscountOfferCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateMerchantInput represents a mutation input for creating merchants.
type CreateMerchantInput struct {
	Name             string
	DiscountOfferIDs []int
}

// Mutate applies the CreateMerchantInput on the MerchantMutation builder.
func (i *CreateMerchantInput) Mutate(m *MerchantMutation) {
	m.SetName(i.Name)
	if v := i.DiscountOfferIDs; len(v) > 0 {
		m.AddDiscountOfferIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMerchantInput on the MerchantCreate builder.
func (c *MerchantCreate) SetInput(i CreateMerchantInput) *MerchantCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	IdentityProviderID *string
	OfferFrequency     *user.OfferFrequency
	HomeCountry        *string
	HomeState          *string
	HomeCity           *string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.IdentityProviderID; v != nil {
		m.SetIdentityProviderID(*v)
	}
	if v := i.OfferFrequency; v != nil {
		m.SetOfferFrequency(*v)
	}
	if v := i.HomeCountry; v != nil {
		m.SetHomeCountry(*v)
	}
	if v := i.HomeState; v != nil {
		m.SetHomeState(*v)
	}
	if v := i.HomeCity; v != nil {
		m.SetHomeCity(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	OfferFrequency   *user.OfferFrequency
	ClearHomeCountry bool
	HomeCountry      *string
	ClearHomeState   bool
	HomeState        *string
	ClearHomeCity    bool
	HomeCity         *string
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.OfferFrequency; v != nil {
		m.SetOfferFrequency(*v)
	}
	if i.ClearHomeCountry {
		m.ClearHomeCountry()
	}
	if v := i.HomeCountry; v != nil {
		m.SetHomeCountry(*v)
	}
	if i.ClearHomeState {
		m.ClearHomeState()
	}
	if v := i.HomeState; v != nil {
		m.SetHomeState(*v)
	}
	if i.ClearHomeCity {
		m.ClearHomeCity()
	}
	if v := i.HomeCity; v != nil {
		m.SetHomeCity(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserNotificationChannelPreferencesInput represents a mutation input for updating usernotificationchannelpreferencesslice.
type UpdateUserNotificationChannelPreferencesInput struct {
	Chanel *usernotificationchannelpreferences.Chanel
}

// Mutate applies the UpdateUserNotificationChannelPreferencesInput on the UserNotificationChannelPreferencesMutation builder.
func (i *UpdateUserNotificationChannelPreferencesInput) Mutate(m *UserNotificationChannelPreferencesMutation) {
	if v := i.Chanel; v != nil {
		m.SetChanel(*v)
	}
}

// SetInput applies the change-set in the UpdateUserNotificationChannelPreferencesInput on the UserNotificationChannelPreferencesUpdate builder.
func (c *UserNotificationChannelPreferencesUpdate) SetInput(i UpdateUserNotificationChannelPreferencesInput) *UserNotificationChannelPreferencesUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserNotificationChannelPreferencesInput on the UserNotificationChannelPreferencesUpdateOne builder.
func (c *UserNotificationChannelPreferencesUpdateOne) SetInput(i UpdateUserNotificationChannelPreferencesInput) *UserNotificationChannelPreferencesUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
