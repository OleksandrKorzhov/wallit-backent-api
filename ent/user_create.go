// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"wallit/ent/discountoffer"
	"wallit/ent/notification"
	"wallit/ent/plaiditem"
	"wallit/ent/spendingcategory"
	"wallit/ent/user"
	"wallit/ent/usernotificationchannelpreferences"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetIdentityProviderID sets the "identity_provider_id" field.
func (uc *UserCreate) SetIdentityProviderID(s string) *UserCreate {
	uc.mutation.SetIdentityProviderID(s)
	return uc
}

// SetNillableIdentityProviderID sets the "identity_provider_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableIdentityProviderID(s *string) *UserCreate {
	if s != nil {
		uc.SetIdentityProviderID(*s)
	}
	return uc
}

// SetOfferFrequency sets the "offer_frequency" field.
func (uc *UserCreate) SetOfferFrequency(uf user.OfferFrequency) *UserCreate {
	uc.mutation.SetOfferFrequency(uf)
	return uc
}

// SetNillableOfferFrequency sets the "offer_frequency" field if the given value is not nil.
func (uc *UserCreate) SetNillableOfferFrequency(uf *user.OfferFrequency) *UserCreate {
	if uf != nil {
		uc.SetOfferFrequency(*uf)
	}
	return uc
}

// SetHomeCountry sets the "home_country" field.
func (uc *UserCreate) SetHomeCountry(s string) *UserCreate {
	uc.mutation.SetHomeCountry(s)
	return uc
}

// SetNillableHomeCountry sets the "home_country" field if the given value is not nil.
func (uc *UserCreate) SetNillableHomeCountry(s *string) *UserCreate {
	if s != nil {
		uc.SetHomeCountry(*s)
	}
	return uc
}

// SetHomeState sets the "home_state" field.
func (uc *UserCreate) SetHomeState(s string) *UserCreate {
	uc.mutation.SetHomeState(s)
	return uc
}

// SetNillableHomeState sets the "home_state" field if the given value is not nil.
func (uc *UserCreate) SetNillableHomeState(s *string) *UserCreate {
	if s != nil {
		uc.SetHomeState(*s)
	}
	return uc
}

// SetHomeCity sets the "home_city" field.
func (uc *UserCreate) SetHomeCity(s string) *UserCreate {
	uc.mutation.SetHomeCity(s)
	return uc
}

// SetNillableHomeCity sets the "home_city" field if the given value is not nil.
func (uc *UserCreate) SetNillableHomeCity(s *string) *UserCreate {
	if s != nil {
		uc.SetHomeCity(*s)
	}
	return uc
}

// AddPlaidItemIDs adds the "plaid_items" edge to the PlaidItem entity by IDs.
func (uc *UserCreate) AddPlaidItemIDs(ids ...int) *UserCreate {
	uc.mutation.AddPlaidItemIDs(ids...)
	return uc
}

// AddPlaidItems adds the "plaid_items" edges to the PlaidItem entity.
func (uc *UserCreate) AddPlaidItems(p ...*PlaidItem) *UserCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPlaidItemIDs(ids...)
}

// AddSpendingCategoryIDs adds the "spending_categories" edge to the SpendingCategory entity by IDs.
func (uc *UserCreate) AddSpendingCategoryIDs(ids ...int) *UserCreate {
	uc.mutation.AddSpendingCategoryIDs(ids...)
	return uc
}

// AddSpendingCategories adds the "spending_categories" edges to the SpendingCategory entity.
func (uc *UserCreate) AddSpendingCategories(s ...*SpendingCategory) *UserCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddSpendingCategoryIDs(ids...)
}

// AddNotificationChannelIDs adds the "notification_channels" edge to the UserNotificationChannelPreferences entity by IDs.
func (uc *UserCreate) AddNotificationChannelIDs(ids ...int) *UserCreate {
	uc.mutation.AddNotificationChannelIDs(ids...)
	return uc
}

// AddNotificationChannels adds the "notification_channels" edges to the UserNotificationChannelPreferences entity.
func (uc *UserCreate) AddNotificationChannels(u ...*UserNotificationChannelPreferences) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddNotificationChannelIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uc *UserCreate) AddNotificationIDs(ids ...int) *UserCreate {
	uc.mutation.AddNotificationIDs(ids...)
	return uc
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uc *UserCreate) AddNotifications(n ...*Notification) *UserCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uc.AddNotificationIDs(ids...)
}

// AddAvailableDiscountOfferIDs adds the "available_discount_offers" edge to the DiscountOffer entity by IDs.
func (uc *UserCreate) AddAvailableDiscountOfferIDs(ids ...int) *UserCreate {
	uc.mutation.AddAvailableDiscountOfferIDs(ids...)
	return uc
}

// AddAvailableDiscountOffers adds the "available_discount_offers" edges to the DiscountOffer entity.
func (uc *UserCreate) AddAvailableDiscountOffers(d ...*DiscountOffer) *UserCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uc.AddAvailableDiscountOfferIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks[*User, UserMutation](ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.OfferFrequency(); !ok {
		v := user.DefaultOfferFrequency
		uc.mutation.SetOfferFrequency(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.OfferFrequency(); !ok {
		return &ValidationError{Name: "offer_frequency", err: errors.New(`ent: missing required field "User.offer_frequency"`)}
	}
	if v, ok := uc.mutation.OfferFrequency(); ok {
		if err := user.OfferFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "offer_frequency", err: fmt.Errorf(`ent: validator failed for field "User.offer_frequency": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.IdentityProviderID(); ok {
		_spec.SetField(user.FieldIdentityProviderID, field.TypeString, value)
		_node.IdentityProviderID = value
	}
	if value, ok := uc.mutation.OfferFrequency(); ok {
		_spec.SetField(user.FieldOfferFrequency, field.TypeEnum, value)
		_node.OfferFrequency = value
	}
	if value, ok := uc.mutation.HomeCountry(); ok {
		_spec.SetField(user.FieldHomeCountry, field.TypeString, value)
		_node.HomeCountry = value
	}
	if value, ok := uc.mutation.HomeState(); ok {
		_spec.SetField(user.FieldHomeState, field.TypeString, value)
		_node.HomeState = value
	}
	if value, ok := uc.mutation.HomeCity(); ok {
		_spec.SetField(user.FieldHomeCity, field.TypeString, value)
		_node.HomeCity = value
	}
	if nodes := uc.mutation.PlaidItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlaidItemsTable,
			Columns: []string{user.PlaidItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SpendingCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SpendingCategoriesTable,
			Columns: user.SpendingCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.NotificationChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationChannelsTable,
			Columns: []string{user.NotificationChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usernotificationchannelpreferences.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AvailableDiscountOffersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AvailableDiscountOffersTable,
			Columns: user.AvailableDiscountOffersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discountoffer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
