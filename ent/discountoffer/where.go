// Code generated by ent, DO NOT EDIT.

package discountoffer

import (
	"time"
	"wallit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldCurrency, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldDescription, v))
}

// MerchantSpecificIdentification applies equality check predicate on the "merchant_specific_identification" field. It's identical to MerchantSpecificIdentificationEQ.
func MerchantSpecificIdentification(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldMerchantSpecificIdentification, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldCreatedAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldExpiresAt, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLTE(FieldAmount, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNotIn(FieldType, vs...))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldIsNull(FieldCurrency))
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNotNull(FieldCurrency))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldContainsFold(FieldCurrency, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldContainsFold(FieldDescription, v))
}

// MerchantSpecificIdentificationEQ applies the EQ predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationEQ(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldMerchantSpecificIdentification, v))
}

// MerchantSpecificIdentificationNEQ applies the NEQ predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationNEQ(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNEQ(FieldMerchantSpecificIdentification, v))
}

// MerchantSpecificIdentificationIn applies the In predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationIn(vs ...string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldIn(FieldMerchantSpecificIdentification, vs...))
}

// MerchantSpecificIdentificationNotIn applies the NotIn predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationNotIn(vs ...string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNotIn(FieldMerchantSpecificIdentification, vs...))
}

// MerchantSpecificIdentificationGT applies the GT predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationGT(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGT(FieldMerchantSpecificIdentification, v))
}

// MerchantSpecificIdentificationGTE applies the GTE predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationGTE(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGTE(FieldMerchantSpecificIdentification, v))
}

// MerchantSpecificIdentificationLT applies the LT predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationLT(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLT(FieldMerchantSpecificIdentification, v))
}

// MerchantSpecificIdentificationLTE applies the LTE predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationLTE(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLTE(FieldMerchantSpecificIdentification, v))
}

// MerchantSpecificIdentificationContains applies the Contains predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationContains(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldContains(FieldMerchantSpecificIdentification, v))
}

// MerchantSpecificIdentificationHasPrefix applies the HasPrefix predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationHasPrefix(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldHasPrefix(FieldMerchantSpecificIdentification, v))
}

// MerchantSpecificIdentificationHasSuffix applies the HasSuffix predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationHasSuffix(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldHasSuffix(FieldMerchantSpecificIdentification, v))
}

// MerchantSpecificIdentificationEqualFold applies the EqualFold predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationEqualFold(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEqualFold(FieldMerchantSpecificIdentification, v))
}

// MerchantSpecificIdentificationContainsFold applies the ContainsFold predicate on the "merchant_specific_identification" field.
func MerchantSpecificIdentificationContainsFold(v string) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldContainsFold(FieldMerchantSpecificIdentification, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLTE(FieldCreatedAt, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.DiscountOffer {
	return predicate.DiscountOffer(sql.FieldLTE(FieldExpiresAt, v))
}

// HasOwnerMerchant applies the HasEdge predicate on the "owner_merchant" edge.
func HasOwnerMerchant() predicate.DiscountOffer {
	return predicate.DiscountOffer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerMerchantTable, OwnerMerchantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerMerchantWith applies the HasEdge predicate on the "owner_merchant" edge with a given conditions (other predicates).
func HasOwnerMerchantWith(preds ...predicate.Merchant) predicate.DiscountOffer {
	return predicate.DiscountOffer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerMerchantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerMerchantTable, OwnerMerchantColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDiscountEligibleUsers applies the HasEdge predicate on the "discount_eligible_users" edge.
func HasDiscountEligibleUsers() predicate.DiscountOffer {
	return predicate.DiscountOffer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DiscountEligibleUsersTable, DiscountEligibleUsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiscountEligibleUsersWith applies the HasEdge predicate on the "discount_eligible_users" edge with a given conditions (other predicates).
func HasDiscountEligibleUsersWith(preds ...predicate.User) predicate.DiscountOffer {
	return predicate.DiscountOffer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiscountEligibleUsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DiscountEligibleUsersTable, DiscountEligibleUsersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDiscountOfferNotification applies the HasEdge predicate on the "discount_offer_notification" edge.
func HasDiscountOfferNotification() predicate.DiscountOffer {
	return predicate.DiscountOffer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DiscountOfferNotificationTable, DiscountOfferNotificationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiscountOfferNotificationWith applies the HasEdge predicate on the "discount_offer_notification" edge with a given conditions (other predicates).
func HasDiscountOfferNotificationWith(preds ...predicate.Notification) predicate.DiscountOffer {
	return predicate.DiscountOffer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiscountOfferNotificationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DiscountOfferNotificationTable, DiscountOfferNotificationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DiscountOffer) predicate.DiscountOffer {
	return predicate.DiscountOffer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DiscountOffer) predicate.DiscountOffer {
	return predicate.DiscountOffer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DiscountOffer) predicate.DiscountOffer {
	return predicate.DiscountOffer(func(s *sql.Selector) {
		p(s.Not())
	})
}
