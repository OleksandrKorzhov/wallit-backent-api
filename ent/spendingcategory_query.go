// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"wallit/ent/predicate"
	"wallit/ent/spendingcategory"
	"wallit/ent/transaction"
	"wallit/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpendingCategoryQuery is the builder for querying SpendingCategory entities.
type SpendingCategoryQuery struct {
	config
	ctx                           *QueryContext
	order                         []OrderFunc
	inters                        []Interceptor
	predicates                    []predicate.SpendingCategory
	withCategoryTransactions      *TransactionQuery
	withInterestedUsers           *UserQuery
	modifiers                     []func(*sql.Selector)
	loadTotal                     []func(context.Context, []*SpendingCategory) error
	withNamedCategoryTransactions map[string]*TransactionQuery
	withNamedInterestedUsers      map[string]*UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SpendingCategoryQuery builder.
func (scq *SpendingCategoryQuery) Where(ps ...predicate.SpendingCategory) *SpendingCategoryQuery {
	scq.predicates = append(scq.predicates, ps...)
	return scq
}

// Limit the number of records to be returned by this query.
func (scq *SpendingCategoryQuery) Limit(limit int) *SpendingCategoryQuery {
	scq.ctx.Limit = &limit
	return scq
}

// Offset to start from.
func (scq *SpendingCategoryQuery) Offset(offset int) *SpendingCategoryQuery {
	scq.ctx.Offset = &offset
	return scq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (scq *SpendingCategoryQuery) Unique(unique bool) *SpendingCategoryQuery {
	scq.ctx.Unique = &unique
	return scq
}

// Order specifies how the records should be ordered.
func (scq *SpendingCategoryQuery) Order(o ...OrderFunc) *SpendingCategoryQuery {
	scq.order = append(scq.order, o...)
	return scq
}

// QueryCategoryTransactions chains the current query on the "category_transactions" edge.
func (scq *SpendingCategoryQuery) QueryCategoryTransactions() *TransactionQuery {
	query := (&TransactionClient{config: scq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(spendingcategory.Table, spendingcategory.FieldID, selector),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, spendingcategory.CategoryTransactionsTable, spendingcategory.CategoryTransactionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(scq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInterestedUsers chains the current query on the "interested_users" edge.
func (scq *SpendingCategoryQuery) QueryInterestedUsers() *UserQuery {
	query := (&UserClient{config: scq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(spendingcategory.Table, spendingcategory.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, spendingcategory.InterestedUsersTable, spendingcategory.InterestedUsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(scq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SpendingCategory entity from the query.
// Returns a *NotFoundError when no SpendingCategory was found.
func (scq *SpendingCategoryQuery) First(ctx context.Context) (*SpendingCategory, error) {
	nodes, err := scq.Limit(1).All(setContextOp(ctx, scq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{spendingcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (scq *SpendingCategoryQuery) FirstX(ctx context.Context) *SpendingCategory {
	node, err := scq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SpendingCategory ID from the query.
// Returns a *NotFoundError when no SpendingCategory ID was found.
func (scq *SpendingCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = scq.Limit(1).IDs(setContextOp(ctx, scq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{spendingcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (scq *SpendingCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := scq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SpendingCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SpendingCategory entity is found.
// Returns a *NotFoundError when no SpendingCategory entities are found.
func (scq *SpendingCategoryQuery) Only(ctx context.Context) (*SpendingCategory, error) {
	nodes, err := scq.Limit(2).All(setContextOp(ctx, scq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{spendingcategory.Label}
	default:
		return nil, &NotSingularError{spendingcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (scq *SpendingCategoryQuery) OnlyX(ctx context.Context) *SpendingCategory {
	node, err := scq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SpendingCategory ID in the query.
// Returns a *NotSingularError when more than one SpendingCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (scq *SpendingCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = scq.Limit(2).IDs(setContextOp(ctx, scq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{spendingcategory.Label}
	default:
		err = &NotSingularError{spendingcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (scq *SpendingCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := scq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SpendingCategories.
func (scq *SpendingCategoryQuery) All(ctx context.Context) ([]*SpendingCategory, error) {
	ctx = setContextOp(ctx, scq.ctx, "All")
	if err := scq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SpendingCategory, *SpendingCategoryQuery]()
	return withInterceptors[[]*SpendingCategory](ctx, scq, qr, scq.inters)
}

// AllX is like All, but panics if an error occurs.
func (scq *SpendingCategoryQuery) AllX(ctx context.Context) []*SpendingCategory {
	nodes, err := scq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SpendingCategory IDs.
func (scq *SpendingCategoryQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = setContextOp(ctx, scq.ctx, "IDs")
	if err := scq.Select(spendingcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (scq *SpendingCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := scq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (scq *SpendingCategoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, scq.ctx, "Count")
	if err := scq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, scq, querierCount[*SpendingCategoryQuery](), scq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (scq *SpendingCategoryQuery) CountX(ctx context.Context) int {
	count, err := scq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (scq *SpendingCategoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, scq.ctx, "Exist")
	switch _, err := scq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (scq *SpendingCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := scq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SpendingCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (scq *SpendingCategoryQuery) Clone() *SpendingCategoryQuery {
	if scq == nil {
		return nil
	}
	return &SpendingCategoryQuery{
		config:                   scq.config,
		ctx:                      scq.ctx.Clone(),
		order:                    append([]OrderFunc{}, scq.order...),
		inters:                   append([]Interceptor{}, scq.inters...),
		predicates:               append([]predicate.SpendingCategory{}, scq.predicates...),
		withCategoryTransactions: scq.withCategoryTransactions.Clone(),
		withInterestedUsers:      scq.withInterestedUsers.Clone(),
		// clone intermediate query.
		sql:  scq.sql.Clone(),
		path: scq.path,
	}
}

// WithCategoryTransactions tells the query-builder to eager-load the nodes that are connected to
// the "category_transactions" edge. The optional arguments are used to configure the query builder of the edge.
func (scq *SpendingCategoryQuery) WithCategoryTransactions(opts ...func(*TransactionQuery)) *SpendingCategoryQuery {
	query := (&TransactionClient{config: scq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scq.withCategoryTransactions = query
	return scq
}

// WithInterestedUsers tells the query-builder to eager-load the nodes that are connected to
// the "interested_users" edge. The optional arguments are used to configure the query builder of the edge.
func (scq *SpendingCategoryQuery) WithInterestedUsers(opts ...func(*UserQuery)) *SpendingCategoryQuery {
	query := (&UserClient{config: scq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scq.withInterestedUsers = query
	return scq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SpendingCategory.Query().
//		GroupBy(spendingcategory.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (scq *SpendingCategoryQuery) GroupBy(field string, fields ...string) *SpendingCategoryGroupBy {
	scq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SpendingCategoryGroupBy{build: scq}
	grbuild.flds = &scq.ctx.Fields
	grbuild.label = spendingcategory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.SpendingCategory.Query().
//		Select(spendingcategory.FieldName).
//		Scan(ctx, &v)
func (scq *SpendingCategoryQuery) Select(fields ...string) *SpendingCategorySelect {
	scq.ctx.Fields = append(scq.ctx.Fields, fields...)
	sbuild := &SpendingCategorySelect{SpendingCategoryQuery: scq}
	sbuild.label = spendingcategory.Label
	sbuild.flds, sbuild.scan = &scq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SpendingCategorySelect configured with the given aggregations.
func (scq *SpendingCategoryQuery) Aggregate(fns ...AggregateFunc) *SpendingCategorySelect {
	return scq.Select().Aggregate(fns...)
}

func (scq *SpendingCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range scq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, scq); err != nil {
				return err
			}
		}
	}
	for _, f := range scq.ctx.Fields {
		if !spendingcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if scq.path != nil {
		prev, err := scq.path(ctx)
		if err != nil {
			return err
		}
		scq.sql = prev
	}
	return nil
}

func (scq *SpendingCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SpendingCategory, error) {
	var (
		nodes       = []*SpendingCategory{}
		_spec       = scq.querySpec()
		loadedTypes = [2]bool{
			scq.withCategoryTransactions != nil,
			scq.withInterestedUsers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SpendingCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SpendingCategory{config: scq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(scq.modifiers) > 0 {
		_spec.Modifiers = scq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, scq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := scq.withCategoryTransactions; query != nil {
		if err := scq.loadCategoryTransactions(ctx, query, nodes,
			func(n *SpendingCategory) { n.Edges.CategoryTransactions = []*Transaction{} },
			func(n *SpendingCategory, e *Transaction) {
				n.Edges.CategoryTransactions = append(n.Edges.CategoryTransactions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := scq.withInterestedUsers; query != nil {
		if err := scq.loadInterestedUsers(ctx, query, nodes,
			func(n *SpendingCategory) { n.Edges.InterestedUsers = []*User{} },
			func(n *SpendingCategory, e *User) { n.Edges.InterestedUsers = append(n.Edges.InterestedUsers, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range scq.withNamedCategoryTransactions {
		if err := scq.loadCategoryTransactions(ctx, query, nodes,
			func(n *SpendingCategory) { n.appendNamedCategoryTransactions(name) },
			func(n *SpendingCategory, e *Transaction) { n.appendNamedCategoryTransactions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range scq.withNamedInterestedUsers {
		if err := scq.loadInterestedUsers(ctx, query, nodes,
			func(n *SpendingCategory) { n.appendNamedInterestedUsers(name) },
			func(n *SpendingCategory, e *User) { n.appendNamedInterestedUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range scq.loadTotal {
		if err := scq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (scq *SpendingCategoryQuery) loadCategoryTransactions(ctx context.Context, query *TransactionQuery, nodes []*SpendingCategory, init func(*SpendingCategory), assign func(*SpendingCategory, *Transaction)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*SpendingCategory)
	nids := make(map[int]map[*SpendingCategory]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(spendingcategory.CategoryTransactionsTable)
		s.Join(joinT).On(s.C(transaction.FieldID), joinT.C(spendingcategory.CategoryTransactionsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(spendingcategory.CategoryTransactionsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(spendingcategory.CategoryTransactionsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*SpendingCategory]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Transaction](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "category_transactions" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (scq *SpendingCategoryQuery) loadInterestedUsers(ctx context.Context, query *UserQuery, nodes []*SpendingCategory, init func(*SpendingCategory), assign func(*SpendingCategory, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*SpendingCategory)
	nids := make(map[int]map[*SpendingCategory]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(spendingcategory.InterestedUsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(spendingcategory.InterestedUsersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(spendingcategory.InterestedUsersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(spendingcategory.InterestedUsersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*SpendingCategory]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "interested_users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (scq *SpendingCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := scq.querySpec()
	if len(scq.modifiers) > 0 {
		_spec.Modifiers = scq.modifiers
	}
	_spec.Node.Columns = scq.ctx.Fields
	if len(scq.ctx.Fields) > 0 {
		_spec.Unique = scq.ctx.Unique != nil && *scq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, scq.driver, _spec)
}

func (scq *SpendingCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spendingcategory.Table,
			Columns: spendingcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: spendingcategory.FieldID,
			},
		},
		From:   scq.sql,
		Unique: true,
	}
	if unique := scq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := scq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spendingcategory.FieldID)
		for i := range fields {
			if fields[i] != spendingcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := scq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := scq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := scq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := scq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (scq *SpendingCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(scq.driver.Dialect())
	t1 := builder.Table(spendingcategory.Table)
	columns := scq.ctx.Fields
	if len(columns) == 0 {
		columns = spendingcategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if scq.sql != nil {
		selector = scq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if scq.ctx.Unique != nil && *scq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range scq.predicates {
		p(selector)
	}
	for _, p := range scq.order {
		p(selector)
	}
	if offset := scq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := scq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCategoryTransactions tells the query-builder to eager-load the nodes that are connected to the "category_transactions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (scq *SpendingCategoryQuery) WithNamedCategoryTransactions(name string, opts ...func(*TransactionQuery)) *SpendingCategoryQuery {
	query := (&TransactionClient{config: scq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if scq.withNamedCategoryTransactions == nil {
		scq.withNamedCategoryTransactions = make(map[string]*TransactionQuery)
	}
	scq.withNamedCategoryTransactions[name] = query
	return scq
}

// WithNamedInterestedUsers tells the query-builder to eager-load the nodes that are connected to the "interested_users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (scq *SpendingCategoryQuery) WithNamedInterestedUsers(name string, opts ...func(*UserQuery)) *SpendingCategoryQuery {
	query := (&UserClient{config: scq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if scq.withNamedInterestedUsers == nil {
		scq.withNamedInterestedUsers = make(map[string]*UserQuery)
	}
	scq.withNamedInterestedUsers[name] = query
	return scq
}

// SpendingCategoryGroupBy is the group-by builder for SpendingCategory entities.
type SpendingCategoryGroupBy struct {
	selector
	build *SpendingCategoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (scgb *SpendingCategoryGroupBy) Aggregate(fns ...AggregateFunc) *SpendingCategoryGroupBy {
	scgb.fns = append(scgb.fns, fns...)
	return scgb
}

// Scan applies the selector query and scans the result into the given value.
func (scgb *SpendingCategoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, scgb.build.ctx, "GroupBy")
	if err := scgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SpendingCategoryQuery, *SpendingCategoryGroupBy](ctx, scgb.build, scgb, scgb.build.inters, v)
}

func (scgb *SpendingCategoryGroupBy) sqlScan(ctx context.Context, root *SpendingCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(scgb.fns))
	for _, fn := range scgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*scgb.flds)+len(scgb.fns))
		for _, f := range *scgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*scgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := scgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SpendingCategorySelect is the builder for selecting fields of SpendingCategory entities.
type SpendingCategorySelect struct {
	*SpendingCategoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (scs *SpendingCategorySelect) Aggregate(fns ...AggregateFunc) *SpendingCategorySelect {
	scs.fns = append(scs.fns, fns...)
	return scs
}

// Scan applies the selector query and scans the result into the given value.
func (scs *SpendingCategorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, scs.ctx, "Select")
	if err := scs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SpendingCategoryQuery, *SpendingCategorySelect](ctx, scs.SpendingCategoryQuery, scs, scs.inters, v)
}

func (scs *SpendingCategorySelect) sqlScan(ctx context.Context, root *SpendingCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(scs.fns))
	for _, fn := range scs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*scs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := scs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
