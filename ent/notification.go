// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wallit/ent/discountoffer"
	"wallit/ent/notification"
	"wallit/ent/user"

	"entgo.io/ent/dialect/sql"
)

// Notification is the model entity for the Notification schema.
type Notification struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CheckedInApp holds the value of the "checked_in_app" field.
	CheckedInApp bool `json:"checked_in_app,omitempty"`
	// Type holds the value of the "type" field.
	Type notification.Type `json:"type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// IncludedInAggregatedOfferAt holds the value of the "included_in_aggregated_offer_at" field.
	IncludedInAggregatedOfferAt time.Time `json:"included_in_aggregated_offer_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationQuery when eager-loading is set.
	Edges              NotificationEdges `json:"edges"`
	user_notifications *int
}

// NotificationEdges holds the relations/edges for other nodes in the graph.
type NotificationEdges struct {
	// NotificationRecipient holds the value of the notification_recipient edge.
	NotificationRecipient *User `json:"notification_recipient,omitempty"`
	// NotificationDiscountOffer holds the value of the notification_discount_offer edge.
	NotificationDiscountOffer *DiscountOffer `json:"notification_discount_offer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// NotificationRecipientOrErr returns the NotificationRecipient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) NotificationRecipientOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.NotificationRecipient == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.NotificationRecipient, nil
	}
	return nil, &NotLoadedError{edge: "notification_recipient"}
}

// NotificationDiscountOfferOrErr returns the NotificationDiscountOffer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) NotificationDiscountOfferOrErr() (*DiscountOffer, error) {
	if e.loadedTypes[1] {
		if e.NotificationDiscountOffer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: discountoffer.Label}
		}
		return e.NotificationDiscountOffer, nil
	}
	return nil, &NotLoadedError{edge: "notification_discount_offer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notification.FieldCheckedInApp:
			values[i] = new(sql.NullBool)
		case notification.FieldID:
			values[i] = new(sql.NullInt64)
		case notification.FieldType:
			values[i] = new(sql.NullString)
		case notification.FieldCreatedAt, notification.FieldIncludedInAggregatedOfferAt:
			values[i] = new(sql.NullTime)
		case notification.ForeignKeys[0]: // user_notifications
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Notification", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notification fields.
func (n *Notification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case notification.FieldCheckedInApp:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field checked_in_app", values[i])
			} else if value.Valid {
				n.CheckedInApp = value.Bool
			}
		case notification.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				n.Type = notification.Type(value.String)
			}
		case notification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case notification.FieldIncludedInAggregatedOfferAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field included_in_aggregated_offer_at", values[i])
			} else if value.Valid {
				n.IncludedInAggregatedOfferAt = value.Time
			}
		case notification.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_notifications", value)
			} else if value.Valid {
				n.user_notifications = new(int)
				*n.user_notifications = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryNotificationRecipient queries the "notification_recipient" edge of the Notification entity.
func (n *Notification) QueryNotificationRecipient() *UserQuery {
	return NewNotificationClient(n.config).QueryNotificationRecipient(n)
}

// QueryNotificationDiscountOffer queries the "notification_discount_offer" edge of the Notification entity.
func (n *Notification) QueryNotificationDiscountOffer() *DiscountOfferQuery {
	return NewNotificationClient(n.config).QueryNotificationDiscountOffer(n)
}

// Update returns a builder for updating this Notification.
// Note that you need to call Notification.Unwrap() before calling this method if this Notification
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notification) Update() *NotificationUpdateOne {
	return NewNotificationClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Notification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notification) Unwrap() *Notification {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notification is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notification) String() string {
	var builder strings.Builder
	builder.WriteString("Notification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("checked_in_app=")
	builder.WriteString(fmt.Sprintf("%v", n.CheckedInApp))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", n.Type))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("included_in_aggregated_offer_at=")
	builder.WriteString(n.IncludedInAggregatedOfferAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Notifications is a parsable slice of Notification.
type Notifications []*Notification

func (n Notifications) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
