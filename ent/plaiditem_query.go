// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"wallit/ent/plaidinstitution"
	"wallit/ent/plaiditem"
	"wallit/ent/predicate"
	"wallit/ent/transactionsync"
	"wallit/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaidItemQuery is the builder for querying PlaidItem entities.
type PlaidItemQuery struct {
	config
	ctx                       *QueryContext
	order                     []OrderFunc
	inters                    []Interceptor
	predicates                []predicate.PlaidItem
	withOwner                 *UserQuery
	withTransactionSyncs      *TransactionSyncQuery
	withInstitution           *PlaidInstitutionQuery
	withFKs                   bool
	modifiers                 []func(*sql.Selector)
	loadTotal                 []func(context.Context, []*PlaidItem) error
	withNamedTransactionSyncs map[string]*TransactionSyncQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlaidItemQuery builder.
func (piq *PlaidItemQuery) Where(ps ...predicate.PlaidItem) *PlaidItemQuery {
	piq.predicates = append(piq.predicates, ps...)
	return piq
}

// Limit the number of records to be returned by this query.
func (piq *PlaidItemQuery) Limit(limit int) *PlaidItemQuery {
	piq.ctx.Limit = &limit
	return piq
}

// Offset to start from.
func (piq *PlaidItemQuery) Offset(offset int) *PlaidItemQuery {
	piq.ctx.Offset = &offset
	return piq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (piq *PlaidItemQuery) Unique(unique bool) *PlaidItemQuery {
	piq.ctx.Unique = &unique
	return piq
}

// Order specifies how the records should be ordered.
func (piq *PlaidItemQuery) Order(o ...OrderFunc) *PlaidItemQuery {
	piq.order = append(piq.order, o...)
	return piq
}

// QueryOwner chains the current query on the "owner" edge.
func (piq *PlaidItemQuery) QueryOwner() *UserQuery {
	query := (&UserClient{config: piq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plaiditem.Table, plaiditem.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, plaiditem.OwnerTable, plaiditem.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(piq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransactionSyncs chains the current query on the "transaction_syncs" edge.
func (piq *PlaidItemQuery) QueryTransactionSyncs() *TransactionSyncQuery {
	query := (&TransactionSyncClient{config: piq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plaiditem.Table, plaiditem.FieldID, selector),
			sqlgraph.To(transactionsync.Table, transactionsync.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plaiditem.TransactionSyncsTable, plaiditem.TransactionSyncsColumn),
		)
		fromU = sqlgraph.SetNeighbors(piq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInstitution chains the current query on the "institution" edge.
func (piq *PlaidItemQuery) QueryInstitution() *PlaidInstitutionQuery {
	query := (&PlaidInstitutionClient{config: piq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plaiditem.Table, plaiditem.FieldID, selector),
			sqlgraph.To(plaidinstitution.Table, plaidinstitution.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, plaiditem.InstitutionTable, plaiditem.InstitutionColumn),
		)
		fromU = sqlgraph.SetNeighbors(piq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlaidItem entity from the query.
// Returns a *NotFoundError when no PlaidItem was found.
func (piq *PlaidItemQuery) First(ctx context.Context) (*PlaidItem, error) {
	nodes, err := piq.Limit(1).All(setContextOp(ctx, piq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{plaiditem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (piq *PlaidItemQuery) FirstX(ctx context.Context) *PlaidItem {
	node, err := piq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlaidItem ID from the query.
// Returns a *NotFoundError when no PlaidItem ID was found.
func (piq *PlaidItemQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = piq.Limit(1).IDs(setContextOp(ctx, piq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{plaiditem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (piq *PlaidItemQuery) FirstIDX(ctx context.Context) int {
	id, err := piq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlaidItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlaidItem entity is found.
// Returns a *NotFoundError when no PlaidItem entities are found.
func (piq *PlaidItemQuery) Only(ctx context.Context) (*PlaidItem, error) {
	nodes, err := piq.Limit(2).All(setContextOp(ctx, piq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{plaiditem.Label}
	default:
		return nil, &NotSingularError{plaiditem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (piq *PlaidItemQuery) OnlyX(ctx context.Context) *PlaidItem {
	node, err := piq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlaidItem ID in the query.
// Returns a *NotSingularError when more than one PlaidItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (piq *PlaidItemQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = piq.Limit(2).IDs(setContextOp(ctx, piq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{plaiditem.Label}
	default:
		err = &NotSingularError{plaiditem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (piq *PlaidItemQuery) OnlyIDX(ctx context.Context) int {
	id, err := piq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlaidItems.
func (piq *PlaidItemQuery) All(ctx context.Context) ([]*PlaidItem, error) {
	ctx = setContextOp(ctx, piq.ctx, "All")
	if err := piq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlaidItem, *PlaidItemQuery]()
	return withInterceptors[[]*PlaidItem](ctx, piq, qr, piq.inters)
}

// AllX is like All, but panics if an error occurs.
func (piq *PlaidItemQuery) AllX(ctx context.Context) []*PlaidItem {
	nodes, err := piq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlaidItem IDs.
func (piq *PlaidItemQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = setContextOp(ctx, piq.ctx, "IDs")
	if err := piq.Select(plaiditem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (piq *PlaidItemQuery) IDsX(ctx context.Context) []int {
	ids, err := piq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (piq *PlaidItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, piq.ctx, "Count")
	if err := piq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, piq, querierCount[*PlaidItemQuery](), piq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (piq *PlaidItemQuery) CountX(ctx context.Context) int {
	count, err := piq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (piq *PlaidItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, piq.ctx, "Exist")
	switch _, err := piq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (piq *PlaidItemQuery) ExistX(ctx context.Context) bool {
	exist, err := piq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlaidItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (piq *PlaidItemQuery) Clone() *PlaidItemQuery {
	if piq == nil {
		return nil
	}
	return &PlaidItemQuery{
		config:               piq.config,
		ctx:                  piq.ctx.Clone(),
		order:                append([]OrderFunc{}, piq.order...),
		inters:               append([]Interceptor{}, piq.inters...),
		predicates:           append([]predicate.PlaidItem{}, piq.predicates...),
		withOwner:            piq.withOwner.Clone(),
		withTransactionSyncs: piq.withTransactionSyncs.Clone(),
		withInstitution:      piq.withInstitution.Clone(),
		// clone intermediate query.
		sql:  piq.sql.Clone(),
		path: piq.path,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (piq *PlaidItemQuery) WithOwner(opts ...func(*UserQuery)) *PlaidItemQuery {
	query := (&UserClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piq.withOwner = query
	return piq
}

// WithTransactionSyncs tells the query-builder to eager-load the nodes that are connected to
// the "transaction_syncs" edge. The optional arguments are used to configure the query builder of the edge.
func (piq *PlaidItemQuery) WithTransactionSyncs(opts ...func(*TransactionSyncQuery)) *PlaidItemQuery {
	query := (&TransactionSyncClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piq.withTransactionSyncs = query
	return piq
}

// WithInstitution tells the query-builder to eager-load the nodes that are connected to
// the "institution" edge. The optional arguments are used to configure the query builder of the edge.
func (piq *PlaidItemQuery) WithInstitution(opts ...func(*PlaidInstitutionQuery)) *PlaidItemQuery {
	query := (&PlaidInstitutionClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piq.withInstitution = query
	return piq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ItemID string `json:"item_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlaidItem.Query().
//		GroupBy(plaiditem.FieldItemID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (piq *PlaidItemQuery) GroupBy(field string, fields ...string) *PlaidItemGroupBy {
	piq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlaidItemGroupBy{build: piq}
	grbuild.flds = &piq.ctx.Fields
	grbuild.label = plaiditem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ItemID string `json:"item_id,omitempty"`
//	}
//
//	client.PlaidItem.Query().
//		Select(plaiditem.FieldItemID).
//		Scan(ctx, &v)
func (piq *PlaidItemQuery) Select(fields ...string) *PlaidItemSelect {
	piq.ctx.Fields = append(piq.ctx.Fields, fields...)
	sbuild := &PlaidItemSelect{PlaidItemQuery: piq}
	sbuild.label = plaiditem.Label
	sbuild.flds, sbuild.scan = &piq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlaidItemSelect configured with the given aggregations.
func (piq *PlaidItemQuery) Aggregate(fns ...AggregateFunc) *PlaidItemSelect {
	return piq.Select().Aggregate(fns...)
}

func (piq *PlaidItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range piq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, piq); err != nil {
				return err
			}
		}
	}
	for _, f := range piq.ctx.Fields {
		if !plaiditem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if piq.path != nil {
		prev, err := piq.path(ctx)
		if err != nil {
			return err
		}
		piq.sql = prev
	}
	return nil
}

func (piq *PlaidItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlaidItem, error) {
	var (
		nodes       = []*PlaidItem{}
		withFKs     = piq.withFKs
		_spec       = piq.querySpec()
		loadedTypes = [3]bool{
			piq.withOwner != nil,
			piq.withTransactionSyncs != nil,
			piq.withInstitution != nil,
		}
	)
	if piq.withOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, plaiditem.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlaidItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlaidItem{config: piq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(piq.modifiers) > 0 {
		_spec.Modifiers = piq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, piq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := piq.withOwner; query != nil {
		if err := piq.loadOwner(ctx, query, nodes, nil,
			func(n *PlaidItem, e *User) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := piq.withTransactionSyncs; query != nil {
		if err := piq.loadTransactionSyncs(ctx, query, nodes,
			func(n *PlaidItem) { n.Edges.TransactionSyncs = []*TransactionSync{} },
			func(n *PlaidItem, e *TransactionSync) { n.Edges.TransactionSyncs = append(n.Edges.TransactionSyncs, e) }); err != nil {
			return nil, err
		}
	}
	if query := piq.withInstitution; query != nil {
		if err := piq.loadInstitution(ctx, query, nodes, nil,
			func(n *PlaidItem, e *PlaidInstitution) { n.Edges.Institution = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range piq.withNamedTransactionSyncs {
		if err := piq.loadTransactionSyncs(ctx, query, nodes,
			func(n *PlaidItem) { n.appendNamedTransactionSyncs(name) },
			func(n *PlaidItem, e *TransactionSync) { n.appendNamedTransactionSyncs(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range piq.loadTotal {
		if err := piq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (piq *PlaidItemQuery) loadOwner(ctx context.Context, query *UserQuery, nodes []*PlaidItem, init func(*PlaidItem), assign func(*PlaidItem, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PlaidItem)
	for i := range nodes {
		if nodes[i].user_plaid_items == nil {
			continue
		}
		fk := *nodes[i].user_plaid_items
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_plaid_items" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (piq *PlaidItemQuery) loadTransactionSyncs(ctx context.Context, query *TransactionSyncQuery, nodes []*PlaidItem, init func(*PlaidItem), assign func(*PlaidItem, *TransactionSync)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlaidItem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TransactionSync(func(s *sql.Selector) {
		s.Where(sql.InValues(plaiditem.TransactionSyncsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plaid_item_transaction_syncs
		if fk == nil {
			return fmt.Errorf(`foreign-key "plaid_item_transaction_syncs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plaid_item_transaction_syncs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (piq *PlaidItemQuery) loadInstitution(ctx context.Context, query *PlaidInstitutionQuery, nodes []*PlaidItem, init func(*PlaidItem), assign func(*PlaidItem, *PlaidInstitution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlaidItem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.PlaidInstitution(func(s *sql.Selector) {
		s.Where(sql.InValues(plaiditem.InstitutionColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plaid_item_institution
		if fk == nil {
			return fmt.Errorf(`foreign-key "plaid_item_institution" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plaid_item_institution" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (piq *PlaidItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := piq.querySpec()
	if len(piq.modifiers) > 0 {
		_spec.Modifiers = piq.modifiers
	}
	_spec.Node.Columns = piq.ctx.Fields
	if len(piq.ctx.Fields) > 0 {
		_spec.Unique = piq.ctx.Unique != nil && *piq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, piq.driver, _spec)
}

func (piq *PlaidItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plaiditem.Table,
			Columns: plaiditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plaiditem.FieldID,
			},
		},
		From:   piq.sql,
		Unique: true,
	}
	if unique := piq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := piq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plaiditem.FieldID)
		for i := range fields {
			if fields[i] != plaiditem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := piq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := piq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := piq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := piq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (piq *PlaidItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(piq.driver.Dialect())
	t1 := builder.Table(plaiditem.Table)
	columns := piq.ctx.Fields
	if len(columns) == 0 {
		columns = plaiditem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if piq.sql != nil {
		selector = piq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if piq.ctx.Unique != nil && *piq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range piq.predicates {
		p(selector)
	}
	for _, p := range piq.order {
		p(selector)
	}
	if offset := piq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := piq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedTransactionSyncs tells the query-builder to eager-load the nodes that are connected to the "transaction_syncs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (piq *PlaidItemQuery) WithNamedTransactionSyncs(name string, opts ...func(*TransactionSyncQuery)) *PlaidItemQuery {
	query := (&TransactionSyncClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if piq.withNamedTransactionSyncs == nil {
		piq.withNamedTransactionSyncs = make(map[string]*TransactionSyncQuery)
	}
	piq.withNamedTransactionSyncs[name] = query
	return piq
}

// PlaidItemGroupBy is the group-by builder for PlaidItem entities.
type PlaidItemGroupBy struct {
	selector
	build *PlaidItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pigb *PlaidItemGroupBy) Aggregate(fns ...AggregateFunc) *PlaidItemGroupBy {
	pigb.fns = append(pigb.fns, fns...)
	return pigb
}

// Scan applies the selector query and scans the result into the given value.
func (pigb *PlaidItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pigb.build.ctx, "GroupBy")
	if err := pigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaidItemQuery, *PlaidItemGroupBy](ctx, pigb.build, pigb, pigb.build.inters, v)
}

func (pigb *PlaidItemGroupBy) sqlScan(ctx context.Context, root *PlaidItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pigb.fns))
	for _, fn := range pigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pigb.flds)+len(pigb.fns))
		for _, f := range *pigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlaidItemSelect is the builder for selecting fields of PlaidItem entities.
type PlaidItemSelect struct {
	*PlaidItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pis *PlaidItemSelect) Aggregate(fns ...AggregateFunc) *PlaidItemSelect {
	pis.fns = append(pis.fns, fns...)
	return pis
}

// Scan applies the selector query and scans the result into the given value.
func (pis *PlaidItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pis.ctx, "Select")
	if err := pis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaidItemQuery, *PlaidItemSelect](ctx, pis.PlaidItemQuery, pis, pis.inters, v)
}

func (pis *PlaidItemSelect) sqlScan(ctx context.Context, root *PlaidItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pis.fns))
	for _, fn := range pis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
