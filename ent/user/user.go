// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIdentityProviderID holds the string denoting the identity_provider_id field in the database.
	FieldIdentityProviderID = "identity_provider_id"
	// FieldOfferFrequency holds the string denoting the offer_frequency field in the database.
	FieldOfferFrequency = "offer_frequency"
	// FieldHomeCountry holds the string denoting the home_country field in the database.
	FieldHomeCountry = "home_country"
	// FieldHomeState holds the string denoting the home_state field in the database.
	FieldHomeState = "home_state"
	// FieldHomeCity holds the string denoting the home_city field in the database.
	FieldHomeCity = "home_city"
	// EdgePlaidItems holds the string denoting the plaid_items edge name in mutations.
	EdgePlaidItems = "plaid_items"
	// EdgeSpendingCategories holds the string denoting the spending_categories edge name in mutations.
	EdgeSpendingCategories = "spending_categories"
	// EdgeNotificationChannels holds the string denoting the notification_channels edge name in mutations.
	EdgeNotificationChannels = "notification_channels"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// EdgeAvailableDiscountOffers holds the string denoting the available_discount_offers edge name in mutations.
	EdgeAvailableDiscountOffers = "available_discount_offers"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PlaidItemsTable is the table that holds the plaid_items relation/edge.
	PlaidItemsTable = "plaid_items"
	// PlaidItemsInverseTable is the table name for the PlaidItem entity.
	// It exists in this package in order to avoid circular dependency with the "plaiditem" package.
	PlaidItemsInverseTable = "plaid_items"
	// PlaidItemsColumn is the table column denoting the plaid_items relation/edge.
	PlaidItemsColumn = "user_plaid_items"
	// SpendingCategoriesTable is the table that holds the spending_categories relation/edge. The primary key declared below.
	SpendingCategoriesTable = "user_spending_categories"
	// SpendingCategoriesInverseTable is the table name for the SpendingCategory entity.
	// It exists in this package in order to avoid circular dependency with the "spendingcategory" package.
	SpendingCategoriesInverseTable = "spending_categories"
	// NotificationChannelsTable is the table that holds the notification_channels relation/edge.
	NotificationChannelsTable = "user_notification_channel_preferences"
	// NotificationChannelsInverseTable is the table name for the UserNotificationChannelPreferences entity.
	// It exists in this package in order to avoid circular dependency with the "usernotificationchannelpreferences" package.
	NotificationChannelsInverseTable = "user_notification_channel_preferences"
	// NotificationChannelsColumn is the table column denoting the notification_channels relation/edge.
	NotificationChannelsColumn = "user_notification_channels"
	// NotificationsTable is the table that holds the notifications relation/edge.
	NotificationsTable = "notifications"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "notifications"
	// NotificationsColumn is the table column denoting the notifications relation/edge.
	NotificationsColumn = "user_notifications"
	// AvailableDiscountOffersTable is the table that holds the available_discount_offers relation/edge. The primary key declared below.
	AvailableDiscountOffersTable = "user_available_discount_offers"
	// AvailableDiscountOffersInverseTable is the table name for the DiscountOffer entity.
	// It exists in this package in order to avoid circular dependency with the "discountoffer" package.
	AvailableDiscountOffersInverseTable = "discount_offers"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldIdentityProviderID,
	FieldOfferFrequency,
	FieldHomeCountry,
	FieldHomeState,
	FieldHomeCity,
}

var (
	// SpendingCategoriesPrimaryKey and SpendingCategoriesColumn2 are the table columns denoting the
	// primary key for the spending_categories relation (M2M).
	SpendingCategoriesPrimaryKey = []string{"user_id", "spending_category_id"}
	// AvailableDiscountOffersPrimaryKey and AvailableDiscountOffersColumn2 are the table columns denoting the
	// primary key for the available_discount_offers relation (M2M).
	AvailableDiscountOffersPrimaryKey = []string{"user_id", "discount_offer_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OfferFrequency defines the type for the "offer_frequency" enum field.
type OfferFrequency string

// OfferFrequencyNoOffers is the default value of the OfferFrequency enum.
const DefaultOfferFrequency = OfferFrequencyNoOffers

// OfferFrequency values.
const (
	OfferFrequencyNoOffers          OfferFrequency = "NO_OFFERS"
	OfferFrequencyAssSoonAsPossible OfferFrequency = "ASS_SOON_AS_POSSIBLE"
	OfferFrequencyDaily             OfferFrequency = "DAILY"
	OfferFrequencyWeekly            OfferFrequency = "WEEKLY"
	OfferFrequencyBiWeekly          OfferFrequency = "BI_WEEKLY"
	OfferFrequencyMonthly           OfferFrequency = "MONTHLY"
)

func (of OfferFrequency) String() string {
	return string(of)
}

// OfferFrequencyValidator is a validator for the "offer_frequency" field enum values. It is called by the builders before save.
func OfferFrequencyValidator(of OfferFrequency) error {
	switch of {
	case OfferFrequencyNoOffers, OfferFrequencyAssSoonAsPossible, OfferFrequencyDaily, OfferFrequencyWeekly, OfferFrequencyBiWeekly, OfferFrequencyMonthly:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for offer_frequency field: %q", of)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e OfferFrequency) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *OfferFrequency) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = OfferFrequency(str)
	if err := OfferFrequencyValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid OfferFrequency", str)
	}
	return nil
}
