// Code generated by ent, DO NOT EDIT.

package usernotificationchannelpreferences

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the usernotificationchannelpreferences type in the database.
	Label = "user_notification_channel_preferences"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChanel holds the string denoting the chanel field in the database.
	FieldChanel = "chanel"
	// EdgeChanelUsers holds the string denoting the chanel_users edge name in mutations.
	EdgeChanelUsers = "chanel_users"
	// Table holds the table name of the usernotificationchannelpreferences in the database.
	Table = "user_notification_channel_preferences"
	// ChanelUsersTable is the table that holds the chanel_users relation/edge.
	ChanelUsersTable = "user_notification_channel_preferences"
	// ChanelUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ChanelUsersInverseTable = "users"
	// ChanelUsersColumn is the table column denoting the chanel_users relation/edge.
	ChanelUsersColumn = "user_notification_channels"
)

// Columns holds all SQL columns for usernotificationchannelpreferences fields.
var Columns = []string{
	FieldID,
	FieldChanel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_notification_channel_preferences"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_notification_channels",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Chanel defines the type for the "chanel" enum field.
type Chanel string

// Chanel values.
const (
	ChanelEmail Chanel = "EMAIL"
	ChanelSms   Chanel = "SMS"
	ChanelPush  Chanel = "PUSH"
)

func (c Chanel) String() string {
	return string(c)
}

// ChanelValidator is a validator for the "chanel" field enum values. It is called by the builders before save.
func ChanelValidator(c Chanel) error {
	switch c {
	case ChanelEmail, ChanelSms, ChanelPush:
		return nil
	default:
		return fmt.Errorf("usernotificationchannelpreferences: invalid enum value for chanel field: %q", c)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Chanel) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Chanel) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Chanel(str)
	if err := ChanelValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Chanel", str)
	}
	return nil
}
