// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"wallit/ent/discountoffer"
	"wallit/ent/notification"
	"wallit/ent/plaiditem"
	"wallit/ent/predicate"
	"wallit/ent/spendingcategory"
	"wallit/ent/user"
	"wallit/ent/usernotificationchannelpreferences"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetIdentityProviderID sets the "identity_provider_id" field.
func (uu *UserUpdate) SetIdentityProviderID(s string) *UserUpdate {
	uu.mutation.SetIdentityProviderID(s)
	return uu
}

// SetNillableIdentityProviderID sets the "identity_provider_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIdentityProviderID(s *string) *UserUpdate {
	if s != nil {
		uu.SetIdentityProviderID(*s)
	}
	return uu
}

// ClearIdentityProviderID clears the value of the "identity_provider_id" field.
func (uu *UserUpdate) ClearIdentityProviderID() *UserUpdate {
	uu.mutation.ClearIdentityProviderID()
	return uu
}

// SetOfferFrequency sets the "offer_frequency" field.
func (uu *UserUpdate) SetOfferFrequency(uf user.OfferFrequency) *UserUpdate {
	uu.mutation.SetOfferFrequency(uf)
	return uu
}

// SetNillableOfferFrequency sets the "offer_frequency" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOfferFrequency(uf *user.OfferFrequency) *UserUpdate {
	if uf != nil {
		uu.SetOfferFrequency(*uf)
	}
	return uu
}

// SetHomeCountry sets the "home_country" field.
func (uu *UserUpdate) SetHomeCountry(s string) *UserUpdate {
	uu.mutation.SetHomeCountry(s)
	return uu
}

// SetNillableHomeCountry sets the "home_country" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHomeCountry(s *string) *UserUpdate {
	if s != nil {
		uu.SetHomeCountry(*s)
	}
	return uu
}

// ClearHomeCountry clears the value of the "home_country" field.
func (uu *UserUpdate) ClearHomeCountry() *UserUpdate {
	uu.mutation.ClearHomeCountry()
	return uu
}

// SetHomeState sets the "home_state" field.
func (uu *UserUpdate) SetHomeState(s string) *UserUpdate {
	uu.mutation.SetHomeState(s)
	return uu
}

// SetNillableHomeState sets the "home_state" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHomeState(s *string) *UserUpdate {
	if s != nil {
		uu.SetHomeState(*s)
	}
	return uu
}

// ClearHomeState clears the value of the "home_state" field.
func (uu *UserUpdate) ClearHomeState() *UserUpdate {
	uu.mutation.ClearHomeState()
	return uu
}

// SetHomeCity sets the "home_city" field.
func (uu *UserUpdate) SetHomeCity(s string) *UserUpdate {
	uu.mutation.SetHomeCity(s)
	return uu
}

// SetNillableHomeCity sets the "home_city" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHomeCity(s *string) *UserUpdate {
	if s != nil {
		uu.SetHomeCity(*s)
	}
	return uu
}

// ClearHomeCity clears the value of the "home_city" field.
func (uu *UserUpdate) ClearHomeCity() *UserUpdate {
	uu.mutation.ClearHomeCity()
	return uu
}

// AddPlaidItemIDs adds the "plaid_items" edge to the PlaidItem entity by IDs.
func (uu *UserUpdate) AddPlaidItemIDs(ids ...int) *UserUpdate {
	uu.mutation.AddPlaidItemIDs(ids...)
	return uu
}

// AddPlaidItems adds the "plaid_items" edges to the PlaidItem entity.
func (uu *UserUpdate) AddPlaidItems(p ...*PlaidItem) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPlaidItemIDs(ids...)
}

// AddSpendingCategoryIDs adds the "spending_categories" edge to the SpendingCategory entity by IDs.
func (uu *UserUpdate) AddSpendingCategoryIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSpendingCategoryIDs(ids...)
	return uu
}

// AddSpendingCategories adds the "spending_categories" edges to the SpendingCategory entity.
func (uu *UserUpdate) AddSpendingCategories(s ...*SpendingCategory) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSpendingCategoryIDs(ids...)
}

// AddNotificationChannelIDs adds the "notification_channels" edge to the UserNotificationChannelPreferences entity by IDs.
func (uu *UserUpdate) AddNotificationChannelIDs(ids ...int) *UserUpdate {
	uu.mutation.AddNotificationChannelIDs(ids...)
	return uu
}

// AddNotificationChannels adds the "notification_channels" edges to the UserNotificationChannelPreferences entity.
func (uu *UserUpdate) AddNotificationChannels(u ...*UserNotificationChannelPreferences) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddNotificationChannelIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uu *UserUpdate) AddNotificationIDs(ids ...int) *UserUpdate {
	uu.mutation.AddNotificationIDs(ids...)
	return uu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uu *UserUpdate) AddNotifications(n ...*Notification) *UserUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNotificationIDs(ids...)
}

// AddAvailableDiscountOfferIDs adds the "available_discount_offers" edge to the DiscountOffer entity by IDs.
func (uu *UserUpdate) AddAvailableDiscountOfferIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAvailableDiscountOfferIDs(ids...)
	return uu
}

// AddAvailableDiscountOffers adds the "available_discount_offers" edges to the DiscountOffer entity.
func (uu *UserUpdate) AddAvailableDiscountOffers(d ...*DiscountOffer) *UserUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddAvailableDiscountOfferIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearPlaidItems clears all "plaid_items" edges to the PlaidItem entity.
func (uu *UserUpdate) ClearPlaidItems() *UserUpdate {
	uu.mutation.ClearPlaidItems()
	return uu
}

// RemovePlaidItemIDs removes the "plaid_items" edge to PlaidItem entities by IDs.
func (uu *UserUpdate) RemovePlaidItemIDs(ids ...int) *UserUpdate {
	uu.mutation.RemovePlaidItemIDs(ids...)
	return uu
}

// RemovePlaidItems removes "plaid_items" edges to PlaidItem entities.
func (uu *UserUpdate) RemovePlaidItems(p ...*PlaidItem) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePlaidItemIDs(ids...)
}

// ClearSpendingCategories clears all "spending_categories" edges to the SpendingCategory entity.
func (uu *UserUpdate) ClearSpendingCategories() *UserUpdate {
	uu.mutation.ClearSpendingCategories()
	return uu
}

// RemoveSpendingCategoryIDs removes the "spending_categories" edge to SpendingCategory entities by IDs.
func (uu *UserUpdate) RemoveSpendingCategoryIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSpendingCategoryIDs(ids...)
	return uu
}

// RemoveSpendingCategories removes "spending_categories" edges to SpendingCategory entities.
func (uu *UserUpdate) RemoveSpendingCategories(s ...*SpendingCategory) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSpendingCategoryIDs(ids...)
}

// ClearNotificationChannels clears all "notification_channels" edges to the UserNotificationChannelPreferences entity.
func (uu *UserUpdate) ClearNotificationChannels() *UserUpdate {
	uu.mutation.ClearNotificationChannels()
	return uu
}

// RemoveNotificationChannelIDs removes the "notification_channels" edge to UserNotificationChannelPreferences entities by IDs.
func (uu *UserUpdate) RemoveNotificationChannelIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveNotificationChannelIDs(ids...)
	return uu
}

// RemoveNotificationChannels removes "notification_channels" edges to UserNotificationChannelPreferences entities.
func (uu *UserUpdate) RemoveNotificationChannels(u ...*UserNotificationChannelPreferences) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveNotificationChannelIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (uu *UserUpdate) ClearNotifications() *UserUpdate {
	uu.mutation.ClearNotifications()
	return uu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (uu *UserUpdate) RemoveNotificationIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveNotificationIDs(ids...)
	return uu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (uu *UserUpdate) RemoveNotifications(n ...*Notification) *UserUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNotificationIDs(ids...)
}

// ClearAvailableDiscountOffers clears all "available_discount_offers" edges to the DiscountOffer entity.
func (uu *UserUpdate) ClearAvailableDiscountOffers() *UserUpdate {
	uu.mutation.ClearAvailableDiscountOffers()
	return uu
}

// RemoveAvailableDiscountOfferIDs removes the "available_discount_offers" edge to DiscountOffer entities by IDs.
func (uu *UserUpdate) RemoveAvailableDiscountOfferIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAvailableDiscountOfferIDs(ids...)
	return uu
}

// RemoveAvailableDiscountOffers removes "available_discount_offers" edges to DiscountOffer entities.
func (uu *UserUpdate) RemoveAvailableDiscountOffers(d ...*DiscountOffer) *UserUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveAvailableDiscountOfferIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserMutation](ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.OfferFrequency(); ok {
		if err := user.OfferFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "offer_frequency", err: fmt.Errorf(`ent: validator failed for field "User.offer_frequency": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.IdentityProviderID(); ok {
		_spec.SetField(user.FieldIdentityProviderID, field.TypeString, value)
	}
	if uu.mutation.IdentityProviderIDCleared() {
		_spec.ClearField(user.FieldIdentityProviderID, field.TypeString)
	}
	if value, ok := uu.mutation.OfferFrequency(); ok {
		_spec.SetField(user.FieldOfferFrequency, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.HomeCountry(); ok {
		_spec.SetField(user.FieldHomeCountry, field.TypeString, value)
	}
	if uu.mutation.HomeCountryCleared() {
		_spec.ClearField(user.FieldHomeCountry, field.TypeString)
	}
	if value, ok := uu.mutation.HomeState(); ok {
		_spec.SetField(user.FieldHomeState, field.TypeString, value)
	}
	if uu.mutation.HomeStateCleared() {
		_spec.ClearField(user.FieldHomeState, field.TypeString)
	}
	if value, ok := uu.mutation.HomeCity(); ok {
		_spec.SetField(user.FieldHomeCity, field.TypeString, value)
	}
	if uu.mutation.HomeCityCleared() {
		_spec.ClearField(user.FieldHomeCity, field.TypeString)
	}
	if uu.mutation.PlaidItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlaidItemsTable,
			Columns: []string{user.PlaidItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPlaidItemsIDs(); len(nodes) > 0 && !uu.mutation.PlaidItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlaidItemsTable,
			Columns: []string{user.PlaidItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PlaidItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlaidItemsTable,
			Columns: []string{user.PlaidItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SpendingCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SpendingCategoriesTable,
			Columns: user.SpendingCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSpendingCategoriesIDs(); len(nodes) > 0 && !uu.mutation.SpendingCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SpendingCategoriesTable,
			Columns: user.SpendingCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SpendingCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SpendingCategoriesTable,
			Columns: user.SpendingCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotificationChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationChannelsTable,
			Columns: []string{user.NotificationChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usernotificationchannelpreferences.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotificationChannelsIDs(); len(nodes) > 0 && !uu.mutation.NotificationChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationChannelsTable,
			Columns: []string{user.NotificationChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usernotificationchannelpreferences.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotificationChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationChannelsTable,
			Columns: []string{user.NotificationChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usernotificationchannelpreferences.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !uu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AvailableDiscountOffersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AvailableDiscountOffersTable,
			Columns: user.AvailableDiscountOffersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discountoffer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAvailableDiscountOffersIDs(); len(nodes) > 0 && !uu.mutation.AvailableDiscountOffersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AvailableDiscountOffersTable,
			Columns: user.AvailableDiscountOffersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discountoffer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AvailableDiscountOffersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AvailableDiscountOffersTable,
			Columns: user.AvailableDiscountOffersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discountoffer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetIdentityProviderID sets the "identity_provider_id" field.
func (uuo *UserUpdateOne) SetIdentityProviderID(s string) *UserUpdateOne {
	uuo.mutation.SetIdentityProviderID(s)
	return uuo
}

// SetNillableIdentityProviderID sets the "identity_provider_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIdentityProviderID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetIdentityProviderID(*s)
	}
	return uuo
}

// ClearIdentityProviderID clears the value of the "identity_provider_id" field.
func (uuo *UserUpdateOne) ClearIdentityProviderID() *UserUpdateOne {
	uuo.mutation.ClearIdentityProviderID()
	return uuo
}

// SetOfferFrequency sets the "offer_frequency" field.
func (uuo *UserUpdateOne) SetOfferFrequency(uf user.OfferFrequency) *UserUpdateOne {
	uuo.mutation.SetOfferFrequency(uf)
	return uuo
}

// SetNillableOfferFrequency sets the "offer_frequency" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOfferFrequency(uf *user.OfferFrequency) *UserUpdateOne {
	if uf != nil {
		uuo.SetOfferFrequency(*uf)
	}
	return uuo
}

// SetHomeCountry sets the "home_country" field.
func (uuo *UserUpdateOne) SetHomeCountry(s string) *UserUpdateOne {
	uuo.mutation.SetHomeCountry(s)
	return uuo
}

// SetNillableHomeCountry sets the "home_country" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHomeCountry(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetHomeCountry(*s)
	}
	return uuo
}

// ClearHomeCountry clears the value of the "home_country" field.
func (uuo *UserUpdateOne) ClearHomeCountry() *UserUpdateOne {
	uuo.mutation.ClearHomeCountry()
	return uuo
}

// SetHomeState sets the "home_state" field.
func (uuo *UserUpdateOne) SetHomeState(s string) *UserUpdateOne {
	uuo.mutation.SetHomeState(s)
	return uuo
}

// SetNillableHomeState sets the "home_state" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHomeState(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetHomeState(*s)
	}
	return uuo
}

// ClearHomeState clears the value of the "home_state" field.
func (uuo *UserUpdateOne) ClearHomeState() *UserUpdateOne {
	uuo.mutation.ClearHomeState()
	return uuo
}

// SetHomeCity sets the "home_city" field.
func (uuo *UserUpdateOne) SetHomeCity(s string) *UserUpdateOne {
	uuo.mutation.SetHomeCity(s)
	return uuo
}

// SetNillableHomeCity sets the "home_city" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHomeCity(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetHomeCity(*s)
	}
	return uuo
}

// ClearHomeCity clears the value of the "home_city" field.
func (uuo *UserUpdateOne) ClearHomeCity() *UserUpdateOne {
	uuo.mutation.ClearHomeCity()
	return uuo
}

// AddPlaidItemIDs adds the "plaid_items" edge to the PlaidItem entity by IDs.
func (uuo *UserUpdateOne) AddPlaidItemIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddPlaidItemIDs(ids...)
	return uuo
}

// AddPlaidItems adds the "plaid_items" edges to the PlaidItem entity.
func (uuo *UserUpdateOne) AddPlaidItems(p ...*PlaidItem) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPlaidItemIDs(ids...)
}

// AddSpendingCategoryIDs adds the "spending_categories" edge to the SpendingCategory entity by IDs.
func (uuo *UserUpdateOne) AddSpendingCategoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSpendingCategoryIDs(ids...)
	return uuo
}

// AddSpendingCategories adds the "spending_categories" edges to the SpendingCategory entity.
func (uuo *UserUpdateOne) AddSpendingCategories(s ...*SpendingCategory) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSpendingCategoryIDs(ids...)
}

// AddNotificationChannelIDs adds the "notification_channels" edge to the UserNotificationChannelPreferences entity by IDs.
func (uuo *UserUpdateOne) AddNotificationChannelIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddNotificationChannelIDs(ids...)
	return uuo
}

// AddNotificationChannels adds the "notification_channels" edges to the UserNotificationChannelPreferences entity.
func (uuo *UserUpdateOne) AddNotificationChannels(u ...*UserNotificationChannelPreferences) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddNotificationChannelIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uuo *UserUpdateOne) AddNotificationIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddNotificationIDs(ids...)
	return uuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uuo *UserUpdateOne) AddNotifications(n ...*Notification) *UserUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNotificationIDs(ids...)
}

// AddAvailableDiscountOfferIDs adds the "available_discount_offers" edge to the DiscountOffer entity by IDs.
func (uuo *UserUpdateOne) AddAvailableDiscountOfferIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAvailableDiscountOfferIDs(ids...)
	return uuo
}

// AddAvailableDiscountOffers adds the "available_discount_offers" edges to the DiscountOffer entity.
func (uuo *UserUpdateOne) AddAvailableDiscountOffers(d ...*DiscountOffer) *UserUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddAvailableDiscountOfferIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearPlaidItems clears all "plaid_items" edges to the PlaidItem entity.
func (uuo *UserUpdateOne) ClearPlaidItems() *UserUpdateOne {
	uuo.mutation.ClearPlaidItems()
	return uuo
}

// RemovePlaidItemIDs removes the "plaid_items" edge to PlaidItem entities by IDs.
func (uuo *UserUpdateOne) RemovePlaidItemIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemovePlaidItemIDs(ids...)
	return uuo
}

// RemovePlaidItems removes "plaid_items" edges to PlaidItem entities.
func (uuo *UserUpdateOne) RemovePlaidItems(p ...*PlaidItem) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePlaidItemIDs(ids...)
}

// ClearSpendingCategories clears all "spending_categories" edges to the SpendingCategory entity.
func (uuo *UserUpdateOne) ClearSpendingCategories() *UserUpdateOne {
	uuo.mutation.ClearSpendingCategories()
	return uuo
}

// RemoveSpendingCategoryIDs removes the "spending_categories" edge to SpendingCategory entities by IDs.
func (uuo *UserUpdateOne) RemoveSpendingCategoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSpendingCategoryIDs(ids...)
	return uuo
}

// RemoveSpendingCategories removes "spending_categories" edges to SpendingCategory entities.
func (uuo *UserUpdateOne) RemoveSpendingCategories(s ...*SpendingCategory) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSpendingCategoryIDs(ids...)
}

// ClearNotificationChannels clears all "notification_channels" edges to the UserNotificationChannelPreferences entity.
func (uuo *UserUpdateOne) ClearNotificationChannels() *UserUpdateOne {
	uuo.mutation.ClearNotificationChannels()
	return uuo
}

// RemoveNotificationChannelIDs removes the "notification_channels" edge to UserNotificationChannelPreferences entities by IDs.
func (uuo *UserUpdateOne) RemoveNotificationChannelIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveNotificationChannelIDs(ids...)
	return uuo
}

// RemoveNotificationChannels removes "notification_channels" edges to UserNotificationChannelPreferences entities.
func (uuo *UserUpdateOne) RemoveNotificationChannels(u ...*UserNotificationChannelPreferences) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveNotificationChannelIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (uuo *UserUpdateOne) ClearNotifications() *UserUpdateOne {
	uuo.mutation.ClearNotifications()
	return uuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (uuo *UserUpdateOne) RemoveNotificationIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveNotificationIDs(ids...)
	return uuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (uuo *UserUpdateOne) RemoveNotifications(n ...*Notification) *UserUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNotificationIDs(ids...)
}

// ClearAvailableDiscountOffers clears all "available_discount_offers" edges to the DiscountOffer entity.
func (uuo *UserUpdateOne) ClearAvailableDiscountOffers() *UserUpdateOne {
	uuo.mutation.ClearAvailableDiscountOffers()
	return uuo
}

// RemoveAvailableDiscountOfferIDs removes the "available_discount_offers" edge to DiscountOffer entities by IDs.
func (uuo *UserUpdateOne) RemoveAvailableDiscountOfferIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAvailableDiscountOfferIDs(ids...)
	return uuo
}

// RemoveAvailableDiscountOffers removes "available_discount_offers" edges to DiscountOffer entities.
func (uuo *UserUpdateOne) RemoveAvailableDiscountOffers(d ...*DiscountOffer) *UserUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveAvailableDiscountOfferIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks[*User, UserMutation](ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.OfferFrequency(); ok {
		if err := user.OfferFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "offer_frequency", err: fmt.Errorf(`ent: validator failed for field "User.offer_frequency": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.IdentityProviderID(); ok {
		_spec.SetField(user.FieldIdentityProviderID, field.TypeString, value)
	}
	if uuo.mutation.IdentityProviderIDCleared() {
		_spec.ClearField(user.FieldIdentityProviderID, field.TypeString)
	}
	if value, ok := uuo.mutation.OfferFrequency(); ok {
		_spec.SetField(user.FieldOfferFrequency, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.HomeCountry(); ok {
		_spec.SetField(user.FieldHomeCountry, field.TypeString, value)
	}
	if uuo.mutation.HomeCountryCleared() {
		_spec.ClearField(user.FieldHomeCountry, field.TypeString)
	}
	if value, ok := uuo.mutation.HomeState(); ok {
		_spec.SetField(user.FieldHomeState, field.TypeString, value)
	}
	if uuo.mutation.HomeStateCleared() {
		_spec.ClearField(user.FieldHomeState, field.TypeString)
	}
	if value, ok := uuo.mutation.HomeCity(); ok {
		_spec.SetField(user.FieldHomeCity, field.TypeString, value)
	}
	if uuo.mutation.HomeCityCleared() {
		_spec.ClearField(user.FieldHomeCity, field.TypeString)
	}
	if uuo.mutation.PlaidItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlaidItemsTable,
			Columns: []string{user.PlaidItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPlaidItemsIDs(); len(nodes) > 0 && !uuo.mutation.PlaidItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlaidItemsTable,
			Columns: []string{user.PlaidItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PlaidItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlaidItemsTable,
			Columns: []string{user.PlaidItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SpendingCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SpendingCategoriesTable,
			Columns: user.SpendingCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSpendingCategoriesIDs(); len(nodes) > 0 && !uuo.mutation.SpendingCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SpendingCategoriesTable,
			Columns: user.SpendingCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SpendingCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SpendingCategoriesTable,
			Columns: user.SpendingCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotificationChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationChannelsTable,
			Columns: []string{user.NotificationChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usernotificationchannelpreferences.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotificationChannelsIDs(); len(nodes) > 0 && !uuo.mutation.NotificationChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationChannelsTable,
			Columns: []string{user.NotificationChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usernotificationchannelpreferences.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotificationChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationChannelsTable,
			Columns: []string{user.NotificationChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usernotificationchannelpreferences.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !uuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AvailableDiscountOffersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AvailableDiscountOffersTable,
			Columns: user.AvailableDiscountOffersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discountoffer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAvailableDiscountOffersIDs(); len(nodes) > 0 && !uuo.mutation.AvailableDiscountOffersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AvailableDiscountOffersTable,
			Columns: user.AvailableDiscountOffersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discountoffer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AvailableDiscountOffersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AvailableDiscountOffersTable,
			Columns: user.AvailableDiscountOffersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discountoffer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
