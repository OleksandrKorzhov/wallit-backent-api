// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (do *DiscountOffer) OwnerMerchant(ctx context.Context) (*Merchant, error) {
	result, err := do.Edges.OwnerMerchantOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryOwnerMerchant().Only(ctx)
	}
	return result, err
}

func (do *DiscountOffer) DiscountEligibleUsers(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = do.NamedDiscountEligibleUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = do.Edges.DiscountEligibleUsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = do.QueryDiscountEligibleUsers().All(ctx)
	}
	return result, err
}

func (do *DiscountOffer) DiscountOfferNotification(ctx context.Context) (*Notification, error) {
	result, err := do.Edges.DiscountOfferNotificationOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryDiscountOfferNotification().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Merchant) DiscountOffers(ctx context.Context) (result []*DiscountOffer, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedDiscountOffers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.DiscountOffersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryDiscountOffers().All(ctx)
	}
	return result, err
}

func (n *Notification) NotificationRecipient(ctx context.Context) (*User, error) {
	result, err := n.Edges.NotificationRecipientOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryNotificationRecipient().Only(ctx)
	}
	return result, err
}

func (n *Notification) NotificationDiscountOffer(ctx context.Context) (*DiscountOffer, error) {
	result, err := n.Edges.NotificationDiscountOfferOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryNotificationDiscountOffer().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pi *PlaidInstitution) PlaidItem(ctx context.Context) (*PlaidItem, error) {
	result, err := pi.Edges.PlaidItemOrErr()
	if IsNotLoaded(err) {
		result, err = pi.QueryPlaidItem().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pi *PlaidInstitution) Accounts(ctx context.Context) (result []*PlaidInstitutionAccount, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pi.NamedAccounts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pi.Edges.AccountsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pi.QueryAccounts().All(ctx)
	}
	return result, err
}

func (pia *PlaidInstitutionAccount) ParentInstitution(ctx context.Context) (*PlaidInstitution, error) {
	result, err := pia.Edges.ParentInstitutionOrErr()
	if IsNotLoaded(err) {
		result, err = pia.QueryParentInstitution().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pia *PlaidInstitutionAccount) Transactions(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TransactionOrder, where *TransactionWhereInput,
) (*TransactionConnection, error) {
	opts := []TransactionPaginateOption{
		WithTransactionOrder(orderBy),
		WithTransactionFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pia.Edges.totalCount[1][alias]
	if nodes, err := pia.NamedTransactions(alias); err == nil || hasTotalCount {
		pager, err := newTransactionPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &TransactionConnection{Edges: []*TransactionEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pia.QueryTransactions().Paginate(ctx, after, first, before, last, opts...)
}

func (pi *PlaidItem) Owner(ctx context.Context) (*User, error) {
	result, err := pi.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = pi.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pi *PlaidItem) TransactionSyncs(ctx context.Context) (result []*TransactionSync, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pi.NamedTransactionSyncs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pi.Edges.TransactionSyncsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pi.QueryTransactionSyncs().All(ctx)
	}
	return result, err
}

func (pi *PlaidItem) Institution(ctx context.Context) (*PlaidInstitution, error) {
	result, err := pi.Edges.InstitutionOrErr()
	if IsNotLoaded(err) {
		result, err = pi.QueryInstitution().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sc *SpendingCategory) CategoryTransactions(ctx context.Context) (result []*Transaction, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sc.NamedCategoryTransactions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sc.Edges.CategoryTransactionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sc.QueryCategoryTransactions().All(ctx)
	}
	return result, err
}

func (sc *SpendingCategory) InterestedUsers(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sc.NamedInterestedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sc.Edges.InterestedUsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sc.QueryInterestedUsers().All(ctx)
	}
	return result, err
}

func (t *Transaction) InstitutionAccount(ctx context.Context) (*PlaidInstitutionAccount, error) {
	result, err := t.Edges.InstitutionAccountOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryInstitutionAccount().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Transaction) TransactionCategories(ctx context.Context) (result []*SpendingCategory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedTransactionCategories(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.TransactionCategoriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryTransactionCategories().All(ctx)
	}
	return result, err
}

func (ts *TransactionSync) Item(ctx context.Context) (*PlaidItem, error) {
	result, err := ts.Edges.ItemOrErr()
	if IsNotLoaded(err) {
		result, err = ts.QueryItem().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) PlaidItems(ctx context.Context) (result []*PlaidItem, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPlaidItems(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.PlaidItemsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPlaidItems().All(ctx)
	}
	return result, err
}

func (u *User) SpendingCategories(ctx context.Context) (result []*SpendingCategory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSpendingCategories(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SpendingCategoriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySpendingCategories().All(ctx)
	}
	return result, err
}

func (u *User) NotificationChannels(ctx context.Context) (result []*UserNotificationChannelPreferences, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedNotificationChannels(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.NotificationChannelsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryNotificationChannels().All(ctx)
	}
	return result, err
}

func (u *User) Notifications(ctx context.Context) (result []*Notification, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedNotifications(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.NotificationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryNotifications().All(ctx)
	}
	return result, err
}

func (u *User) AvailableDiscountOffers(ctx context.Context) (result []*DiscountOffer, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAvailableDiscountOffers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.AvailableDiscountOffersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAvailableDiscountOffers().All(ctx)
	}
	return result, err
}

func (uncp *UserNotificationChannelPreferences) ChanelUsers(ctx context.Context) (*User, error) {
	result, err := uncp.Edges.ChanelUsersOrErr()
	if IsNotLoaded(err) {
		result, err = uncp.QueryChanelUsers().Only(ctx)
	}
	return result, MaskNotFound(err)
}
