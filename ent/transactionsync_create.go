// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wallit/ent/plaiditem"
	"wallit/ent/transactionsync"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionSyncCreate is the builder for creating a TransactionSync entity.
type TransactionSyncCreate struct {
	config
	mutation *TransactionSyncMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tsc *TransactionSyncCreate) SetCreatedAt(t time.Time) *TransactionSyncCreate {
	tsc.mutation.SetCreatedAt(t)
	return tsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsc *TransactionSyncCreate) SetNillableCreatedAt(t *time.Time) *TransactionSyncCreate {
	if t != nil {
		tsc.SetCreatedAt(*t)
	}
	return tsc
}

// SetCursor sets the "cursor" field.
func (tsc *TransactionSyncCreate) SetCursor(s string) *TransactionSyncCreate {
	tsc.mutation.SetCursor(s)
	return tsc
}

// SetItemID sets the "item" edge to the PlaidItem entity by ID.
func (tsc *TransactionSyncCreate) SetItemID(id int) *TransactionSyncCreate {
	tsc.mutation.SetItemID(id)
	return tsc
}

// SetNillableItemID sets the "item" edge to the PlaidItem entity by ID if the given value is not nil.
func (tsc *TransactionSyncCreate) SetNillableItemID(id *int) *TransactionSyncCreate {
	if id != nil {
		tsc = tsc.SetItemID(*id)
	}
	return tsc
}

// SetItem sets the "item" edge to the PlaidItem entity.
func (tsc *TransactionSyncCreate) SetItem(p *PlaidItem) *TransactionSyncCreate {
	return tsc.SetItemID(p.ID)
}

// Mutation returns the TransactionSyncMutation object of the builder.
func (tsc *TransactionSyncCreate) Mutation() *TransactionSyncMutation {
	return tsc.mutation
}

// Save creates the TransactionSync in the database.
func (tsc *TransactionSyncCreate) Save(ctx context.Context) (*TransactionSync, error) {
	tsc.defaults()
	return withHooks[*TransactionSync, TransactionSyncMutation](ctx, tsc.sqlSave, tsc.mutation, tsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TransactionSyncCreate) SaveX(ctx context.Context) *TransactionSync {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TransactionSyncCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TransactionSyncCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsc *TransactionSyncCreate) defaults() {
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		v := transactionsync.DefaultCreatedAt()
		tsc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TransactionSyncCreate) check() error {
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TransactionSync.created_at"`)}
	}
	if _, ok := tsc.mutation.Cursor(); !ok {
		return &ValidationError{Name: "cursor", err: errors.New(`ent: missing required field "TransactionSync.cursor"`)}
	}
	if v, ok := tsc.mutation.Cursor(); ok {
		if err := transactionsync.CursorValidator(v); err != nil {
			return &ValidationError{Name: "cursor", err: fmt.Errorf(`ent: validator failed for field "TransactionSync.cursor": %w`, err)}
		}
	}
	return nil
}

func (tsc *TransactionSyncCreate) sqlSave(ctx context.Context) (*TransactionSync, error) {
	if err := tsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tsc.mutation.id = &_node.ID
	tsc.mutation.done = true
	return _node, nil
}

func (tsc *TransactionSyncCreate) createSpec() (*TransactionSync, *sqlgraph.CreateSpec) {
	var (
		_node = &TransactionSync{config: tsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: transactionsync.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transactionsync.FieldID,
			},
		}
	)
	if value, ok := tsc.mutation.CreatedAt(); ok {
		_spec.SetField(transactionsync.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tsc.mutation.Cursor(); ok {
		_spec.SetField(transactionsync.FieldCursor, field.TypeString, value)
		_node.Cursor = value
	}
	if nodes := tsc.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionsync.ItemTable,
			Columns: []string{transactionsync.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaiditem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.plaid_item_transaction_syncs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransactionSyncCreateBulk is the builder for creating many TransactionSync entities in bulk.
type TransactionSyncCreateBulk struct {
	config
	builders []*TransactionSyncCreate
}

// Save creates the TransactionSync entities in the database.
func (tscb *TransactionSyncCreateBulk) Save(ctx context.Context) ([]*TransactionSync, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TransactionSync, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionSyncMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TransactionSyncCreateBulk) SaveX(ctx context.Context) []*TransactionSync {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TransactionSyncCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TransactionSyncCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}
