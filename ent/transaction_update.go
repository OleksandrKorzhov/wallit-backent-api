// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wallit/ent/plaidinstitutionaccount"
	"wallit/ent/predicate"
	"wallit/ent/spendingcategory"
	"wallit/ent/transaction"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetFinancialAccountID sets the "financial_account_id" field.
func (tu *TransactionUpdate) SetFinancialAccountID(s string) *TransactionUpdate {
	tu.mutation.SetFinancialAccountID(s)
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransactionUpdate) SetAmount(f float64) *TransactionUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(f)
	return tu
}

// AddAmount adds f to the "amount" field.
func (tu *TransactionUpdate) AddAmount(f float64) *TransactionUpdate {
	tu.mutation.AddAmount(f)
	return tu
}

// SetIsoCurrencyCode sets the "iso_currency_code" field.
func (tu *TransactionUpdate) SetIsoCurrencyCode(s string) *TransactionUpdate {
	tu.mutation.SetIsoCurrencyCode(s)
	return tu
}

// SetUnofficialCurrencyCode sets the "unofficial_currency_code" field.
func (tu *TransactionUpdate) SetUnofficialCurrencyCode(s string) *TransactionUpdate {
	tu.mutation.SetUnofficialCurrencyCode(s)
	return tu
}

// SetCategory sets the "category" field.
func (tu *TransactionUpdate) SetCategory(s string) *TransactionUpdate {
	tu.mutation.SetCategory(s)
	return tu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCategory(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetCategory(*s)
	}
	return tu
}

// ClearCategory clears the value of the "category" field.
func (tu *TransactionUpdate) ClearCategory() *TransactionUpdate {
	tu.mutation.ClearCategory()
	return tu
}

// SetCategoryID sets the "category_id" field.
func (tu *TransactionUpdate) SetCategoryID(s string) *TransactionUpdate {
	tu.mutation.SetCategoryID(s)
	return tu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCategoryID(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetCategoryID(*s)
	}
	return tu
}

// ClearCategoryID clears the value of the "category_id" field.
func (tu *TransactionUpdate) ClearCategoryID() *TransactionUpdate {
	tu.mutation.ClearCategoryID()
	return tu
}

// SetCheckNumber sets the "check_number" field.
func (tu *TransactionUpdate) SetCheckNumber(s string) *TransactionUpdate {
	tu.mutation.SetCheckNumber(s)
	return tu
}

// SetDate sets the "date" field.
func (tu *TransactionUpdate) SetDate(s string) *TransactionUpdate {
	tu.mutation.SetDate(s)
	return tu
}

// SetDatetime sets the "datetime" field.
func (tu *TransactionUpdate) SetDatetime(t time.Time) *TransactionUpdate {
	tu.mutation.SetDatetime(t)
	return tu
}

// SetNillableDatetime sets the "datetime" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDatetime(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetDatetime(*t)
	}
	return tu
}

// ClearDatetime clears the value of the "datetime" field.
func (tu *TransactionUpdate) ClearDatetime() *TransactionUpdate {
	tu.mutation.ClearDatetime()
	return tu
}

// SetAuthorizedDate sets the "authorized_date" field.
func (tu *TransactionUpdate) SetAuthorizedDate(s string) *TransactionUpdate {
	tu.mutation.SetAuthorizedDate(s)
	return tu
}

// SetNillableAuthorizedDate sets the "authorized_date" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableAuthorizedDate(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetAuthorizedDate(*s)
	}
	return tu
}

// ClearAuthorizedDate clears the value of the "authorized_date" field.
func (tu *TransactionUpdate) ClearAuthorizedDate() *TransactionUpdate {
	tu.mutation.ClearAuthorizedDate()
	return tu
}

// SetAuthorizedDatetime sets the "authorized_datetime" field.
func (tu *TransactionUpdate) SetAuthorizedDatetime(t time.Time) *TransactionUpdate {
	tu.mutation.SetAuthorizedDatetime(t)
	return tu
}

// SetNillableAuthorizedDatetime sets the "authorized_datetime" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableAuthorizedDatetime(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetAuthorizedDatetime(*t)
	}
	return tu
}

// ClearAuthorizedDatetime clears the value of the "authorized_datetime" field.
func (tu *TransactionUpdate) ClearAuthorizedDatetime() *TransactionUpdate {
	tu.mutation.ClearAuthorizedDatetime()
	return tu
}

// SetLocationAddress sets the "location_address" field.
func (tu *TransactionUpdate) SetLocationAddress(s string) *TransactionUpdate {
	tu.mutation.SetLocationAddress(s)
	return tu
}

// SetLocationCity sets the "location_city" field.
func (tu *TransactionUpdate) SetLocationCity(s string) *TransactionUpdate {
	tu.mutation.SetLocationCity(s)
	return tu
}

// SetLocationRegion sets the "location_region" field.
func (tu *TransactionUpdate) SetLocationRegion(s string) *TransactionUpdate {
	tu.mutation.SetLocationRegion(s)
	return tu
}

// SetLocationPostalCode sets the "location_postal_code" field.
func (tu *TransactionUpdate) SetLocationPostalCode(s string) *TransactionUpdate {
	tu.mutation.SetLocationPostalCode(s)
	return tu
}

// SetLocationLat sets the "location_lat" field.
func (tu *TransactionUpdate) SetLocationLat(f float64) *TransactionUpdate {
	tu.mutation.ResetLocationLat()
	tu.mutation.SetLocationLat(f)
	return tu
}

// AddLocationLat adds f to the "location_lat" field.
func (tu *TransactionUpdate) AddLocationLat(f float64) *TransactionUpdate {
	tu.mutation.AddLocationLat(f)
	return tu
}

// SetLocationLon sets the "location_lon" field.
func (tu *TransactionUpdate) SetLocationLon(f float64) *TransactionUpdate {
	tu.mutation.ResetLocationLon()
	tu.mutation.SetLocationLon(f)
	return tu
}

// AddLocationLon adds f to the "location_lon" field.
func (tu *TransactionUpdate) AddLocationLon(f float64) *TransactionUpdate {
	tu.mutation.AddLocationLon(f)
	return tu
}

// SetLocationStoreNumber sets the "location_store_number" field.
func (tu *TransactionUpdate) SetLocationStoreNumber(s string) *TransactionUpdate {
	tu.mutation.SetLocationStoreNumber(s)
	return tu
}

// SetName sets the "name" field.
func (tu *TransactionUpdate) SetName(s string) *TransactionUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetMerchantName sets the "merchant_name" field.
func (tu *TransactionUpdate) SetMerchantName(s string) *TransactionUpdate {
	tu.mutation.SetMerchantName(s)
	return tu
}

// SetPaymentChannel sets the "payment_channel" field.
func (tu *TransactionUpdate) SetPaymentChannel(s string) *TransactionUpdate {
	tu.mutation.SetPaymentChannel(s)
	return tu
}

// SetPending sets the "pending" field.
func (tu *TransactionUpdate) SetPending(b bool) *TransactionUpdate {
	tu.mutation.SetPending(b)
	return tu
}

// SetPendingTransactionID sets the "pending_transaction_id" field.
func (tu *TransactionUpdate) SetPendingTransactionID(s string) *TransactionUpdate {
	tu.mutation.SetPendingTransactionID(s)
	return tu
}

// SetAccountOwner sets the "account_owner" field.
func (tu *TransactionUpdate) SetAccountOwner(s string) *TransactionUpdate {
	tu.mutation.SetAccountOwner(s)
	return tu
}

// SetTransactionID sets the "transaction_id" field.
func (tu *TransactionUpdate) SetTransactionID(s string) *TransactionUpdate {
	tu.mutation.SetTransactionID(s)
	return tu
}

// SetTransactionCode sets the "transaction_code" field.
func (tu *TransactionUpdate) SetTransactionCode(s string) *TransactionUpdate {
	tu.mutation.SetTransactionCode(s)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TransactionUpdate) SetCreatedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCreatedAt(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetInstitutionAccountID sets the "institution_account" edge to the PlaidInstitutionAccount entity by ID.
func (tu *TransactionUpdate) SetInstitutionAccountID(id int) *TransactionUpdate {
	tu.mutation.SetInstitutionAccountID(id)
	return tu
}

// SetNillableInstitutionAccountID sets the "institution_account" edge to the PlaidInstitutionAccount entity by ID if the given value is not nil.
func (tu *TransactionUpdate) SetNillableInstitutionAccountID(id *int) *TransactionUpdate {
	if id != nil {
		tu = tu.SetInstitutionAccountID(*id)
	}
	return tu
}

// SetInstitutionAccount sets the "institution_account" edge to the PlaidInstitutionAccount entity.
func (tu *TransactionUpdate) SetInstitutionAccount(p *PlaidInstitutionAccount) *TransactionUpdate {
	return tu.SetInstitutionAccountID(p.ID)
}

// AddTransactionCategoryIDs adds the "transaction_categories" edge to the SpendingCategory entity by IDs.
func (tu *TransactionUpdate) AddTransactionCategoryIDs(ids ...int) *TransactionUpdate {
	tu.mutation.AddTransactionCategoryIDs(ids...)
	return tu
}

// AddTransactionCategories adds the "transaction_categories" edges to the SpendingCategory entity.
func (tu *TransactionUpdate) AddTransactionCategories(s ...*SpendingCategory) *TransactionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddTransactionCategoryIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearInstitutionAccount clears the "institution_account" edge to the PlaidInstitutionAccount entity.
func (tu *TransactionUpdate) ClearInstitutionAccount() *TransactionUpdate {
	tu.mutation.ClearInstitutionAccount()
	return tu
}

// ClearTransactionCategories clears all "transaction_categories" edges to the SpendingCategory entity.
func (tu *TransactionUpdate) ClearTransactionCategories() *TransactionUpdate {
	tu.mutation.ClearTransactionCategories()
	return tu
}

// RemoveTransactionCategoryIDs removes the "transaction_categories" edge to SpendingCategory entities by IDs.
func (tu *TransactionUpdate) RemoveTransactionCategoryIDs(ids ...int) *TransactionUpdate {
	tu.mutation.RemoveTransactionCategoryIDs(ids...)
	return tu
}

// RemoveTransactionCategories removes "transaction_categories" edges to SpendingCategory entities.
func (tu *TransactionUpdate) RemoveTransactionCategories(s ...*SpendingCategory) *TransactionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveTransactionCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TransactionMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransactionUpdate) check() error {
	if v, ok := tu.mutation.FinancialAccountID(); ok {
		if err := transaction.FinancialAccountIDValidator(v); err != nil {
			return &ValidationError{Name: "financial_account_id", err: fmt.Errorf(`ent: validator failed for field "Transaction.financial_account_id": %w`, err)}
		}
	}
	if v, ok := tu.mutation.IsoCurrencyCode(); ok {
		if err := transaction.IsoCurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "iso_currency_code", err: fmt.Errorf(`ent: validator failed for field "Transaction.iso_currency_code": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Date(); ok {
		if err := transaction.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "Transaction.date": %w`, err)}
		}
	}
	return nil
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transaction.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.FinancialAccountID(); ok {
		_spec.SetField(transaction.FieldFinancialAccountID, field.TypeString, value)
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.IsoCurrencyCode(); ok {
		_spec.SetField(transaction.FieldIsoCurrencyCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.UnofficialCurrencyCode(); ok {
		_spec.SetField(transaction.FieldUnofficialCurrencyCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.Category(); ok {
		_spec.SetField(transaction.FieldCategory, field.TypeString, value)
	}
	if tu.mutation.CategoryCleared() {
		_spec.ClearField(transaction.FieldCategory, field.TypeString)
	}
	if value, ok := tu.mutation.CategoryID(); ok {
		_spec.SetField(transaction.FieldCategoryID, field.TypeString, value)
	}
	if tu.mutation.CategoryIDCleared() {
		_spec.ClearField(transaction.FieldCategoryID, field.TypeString)
	}
	if value, ok := tu.mutation.CheckNumber(); ok {
		_spec.SetField(transaction.FieldCheckNumber, field.TypeString, value)
	}
	if value, ok := tu.mutation.Date(); ok {
		_spec.SetField(transaction.FieldDate, field.TypeString, value)
	}
	if value, ok := tu.mutation.Datetime(); ok {
		_spec.SetField(transaction.FieldDatetime, field.TypeTime, value)
	}
	if tu.mutation.DatetimeCleared() {
		_spec.ClearField(transaction.FieldDatetime, field.TypeTime)
	}
	if value, ok := tu.mutation.AuthorizedDate(); ok {
		_spec.SetField(transaction.FieldAuthorizedDate, field.TypeString, value)
	}
	if tu.mutation.AuthorizedDateCleared() {
		_spec.ClearField(transaction.FieldAuthorizedDate, field.TypeString)
	}
	if value, ok := tu.mutation.AuthorizedDatetime(); ok {
		_spec.SetField(transaction.FieldAuthorizedDatetime, field.TypeTime, value)
	}
	if tu.mutation.AuthorizedDatetimeCleared() {
		_spec.ClearField(transaction.FieldAuthorizedDatetime, field.TypeTime)
	}
	if value, ok := tu.mutation.LocationAddress(); ok {
		_spec.SetField(transaction.FieldLocationAddress, field.TypeString, value)
	}
	if value, ok := tu.mutation.LocationCity(); ok {
		_spec.SetField(transaction.FieldLocationCity, field.TypeString, value)
	}
	if value, ok := tu.mutation.LocationRegion(); ok {
		_spec.SetField(transaction.FieldLocationRegion, field.TypeString, value)
	}
	if value, ok := tu.mutation.LocationPostalCode(); ok {
		_spec.SetField(transaction.FieldLocationPostalCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.LocationLat(); ok {
		_spec.SetField(transaction.FieldLocationLat, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedLocationLat(); ok {
		_spec.AddField(transaction.FieldLocationLat, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.LocationLon(); ok {
		_spec.SetField(transaction.FieldLocationLon, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedLocationLon(); ok {
		_spec.AddField(transaction.FieldLocationLon, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.LocationStoreNumber(); ok {
		_spec.SetField(transaction.FieldLocationStoreNumber, field.TypeString, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(transaction.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.MerchantName(); ok {
		_spec.SetField(transaction.FieldMerchantName, field.TypeString, value)
	}
	if value, ok := tu.mutation.PaymentChannel(); ok {
		_spec.SetField(transaction.FieldPaymentChannel, field.TypeString, value)
	}
	if value, ok := tu.mutation.Pending(); ok {
		_spec.SetField(transaction.FieldPending, field.TypeBool, value)
	}
	if value, ok := tu.mutation.PendingTransactionID(); ok {
		_spec.SetField(transaction.FieldPendingTransactionID, field.TypeString, value)
	}
	if value, ok := tu.mutation.AccountOwner(); ok {
		_spec.SetField(transaction.FieldAccountOwner, field.TypeString, value)
	}
	if value, ok := tu.mutation.TransactionID(); ok {
		_spec.SetField(transaction.FieldTransactionID, field.TypeString, value)
	}
	if value, ok := tu.mutation.TransactionCode(); ok {
		_spec.SetField(transaction.FieldTransactionCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.InstitutionAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.InstitutionAccountTable,
			Columns: []string{transaction.InstitutionAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitutionaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.InstitutionAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.InstitutionAccountTable,
			Columns: []string{transaction.InstitutionAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitutionaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TransactionCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   transaction.TransactionCategoriesTable,
			Columns: transaction.TransactionCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTransactionCategoriesIDs(); len(nodes) > 0 && !tu.mutation.TransactionCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   transaction.TransactionCategoriesTable,
			Columns: transaction.TransactionCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TransactionCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   transaction.TransactionCategoriesTable,
			Columns: transaction.TransactionCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetFinancialAccountID sets the "financial_account_id" field.
func (tuo *TransactionUpdateOne) SetFinancialAccountID(s string) *TransactionUpdateOne {
	tuo.mutation.SetFinancialAccountID(s)
	return tuo
}

// SetAmount sets the "amount" field.
func (tuo *TransactionUpdateOne) SetAmount(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(f)
	return tuo
}

// AddAmount adds f to the "amount" field.
func (tuo *TransactionUpdateOne) AddAmount(f float64) *TransactionUpdateOne {
	tuo.mutation.AddAmount(f)
	return tuo
}

// SetIsoCurrencyCode sets the "iso_currency_code" field.
func (tuo *TransactionUpdateOne) SetIsoCurrencyCode(s string) *TransactionUpdateOne {
	tuo.mutation.SetIsoCurrencyCode(s)
	return tuo
}

// SetUnofficialCurrencyCode sets the "unofficial_currency_code" field.
func (tuo *TransactionUpdateOne) SetUnofficialCurrencyCode(s string) *TransactionUpdateOne {
	tuo.mutation.SetUnofficialCurrencyCode(s)
	return tuo
}

// SetCategory sets the "category" field.
func (tuo *TransactionUpdateOne) SetCategory(s string) *TransactionUpdateOne {
	tuo.mutation.SetCategory(s)
	return tuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCategory(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetCategory(*s)
	}
	return tuo
}

// ClearCategory clears the value of the "category" field.
func (tuo *TransactionUpdateOne) ClearCategory() *TransactionUpdateOne {
	tuo.mutation.ClearCategory()
	return tuo
}

// SetCategoryID sets the "category_id" field.
func (tuo *TransactionUpdateOne) SetCategoryID(s string) *TransactionUpdateOne {
	tuo.mutation.SetCategoryID(s)
	return tuo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCategoryID(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetCategoryID(*s)
	}
	return tuo
}

// ClearCategoryID clears the value of the "category_id" field.
func (tuo *TransactionUpdateOne) ClearCategoryID() *TransactionUpdateOne {
	tuo.mutation.ClearCategoryID()
	return tuo
}

// SetCheckNumber sets the "check_number" field.
func (tuo *TransactionUpdateOne) SetCheckNumber(s string) *TransactionUpdateOne {
	tuo.mutation.SetCheckNumber(s)
	return tuo
}

// SetDate sets the "date" field.
func (tuo *TransactionUpdateOne) SetDate(s string) *TransactionUpdateOne {
	tuo.mutation.SetDate(s)
	return tuo
}

// SetDatetime sets the "datetime" field.
func (tuo *TransactionUpdateOne) SetDatetime(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetDatetime(t)
	return tuo
}

// SetNillableDatetime sets the "datetime" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDatetime(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetDatetime(*t)
	}
	return tuo
}

// ClearDatetime clears the value of the "datetime" field.
func (tuo *TransactionUpdateOne) ClearDatetime() *TransactionUpdateOne {
	tuo.mutation.ClearDatetime()
	return tuo
}

// SetAuthorizedDate sets the "authorized_date" field.
func (tuo *TransactionUpdateOne) SetAuthorizedDate(s string) *TransactionUpdateOne {
	tuo.mutation.SetAuthorizedDate(s)
	return tuo
}

// SetNillableAuthorizedDate sets the "authorized_date" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableAuthorizedDate(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetAuthorizedDate(*s)
	}
	return tuo
}

// ClearAuthorizedDate clears the value of the "authorized_date" field.
func (tuo *TransactionUpdateOne) ClearAuthorizedDate() *TransactionUpdateOne {
	tuo.mutation.ClearAuthorizedDate()
	return tuo
}

// SetAuthorizedDatetime sets the "authorized_datetime" field.
func (tuo *TransactionUpdateOne) SetAuthorizedDatetime(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetAuthorizedDatetime(t)
	return tuo
}

// SetNillableAuthorizedDatetime sets the "authorized_datetime" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableAuthorizedDatetime(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetAuthorizedDatetime(*t)
	}
	return tuo
}

// ClearAuthorizedDatetime clears the value of the "authorized_datetime" field.
func (tuo *TransactionUpdateOne) ClearAuthorizedDatetime() *TransactionUpdateOne {
	tuo.mutation.ClearAuthorizedDatetime()
	return tuo
}

// SetLocationAddress sets the "location_address" field.
func (tuo *TransactionUpdateOne) SetLocationAddress(s string) *TransactionUpdateOne {
	tuo.mutation.SetLocationAddress(s)
	return tuo
}

// SetLocationCity sets the "location_city" field.
func (tuo *TransactionUpdateOne) SetLocationCity(s string) *TransactionUpdateOne {
	tuo.mutation.SetLocationCity(s)
	return tuo
}

// SetLocationRegion sets the "location_region" field.
func (tuo *TransactionUpdateOne) SetLocationRegion(s string) *TransactionUpdateOne {
	tuo.mutation.SetLocationRegion(s)
	return tuo
}

// SetLocationPostalCode sets the "location_postal_code" field.
func (tuo *TransactionUpdateOne) SetLocationPostalCode(s string) *TransactionUpdateOne {
	tuo.mutation.SetLocationPostalCode(s)
	return tuo
}

// SetLocationLat sets the "location_lat" field.
func (tuo *TransactionUpdateOne) SetLocationLat(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetLocationLat()
	tuo.mutation.SetLocationLat(f)
	return tuo
}

// AddLocationLat adds f to the "location_lat" field.
func (tuo *TransactionUpdateOne) AddLocationLat(f float64) *TransactionUpdateOne {
	tuo.mutation.AddLocationLat(f)
	return tuo
}

// SetLocationLon sets the "location_lon" field.
func (tuo *TransactionUpdateOne) SetLocationLon(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetLocationLon()
	tuo.mutation.SetLocationLon(f)
	return tuo
}

// AddLocationLon adds f to the "location_lon" field.
func (tuo *TransactionUpdateOne) AddLocationLon(f float64) *TransactionUpdateOne {
	tuo.mutation.AddLocationLon(f)
	return tuo
}

// SetLocationStoreNumber sets the "location_store_number" field.
func (tuo *TransactionUpdateOne) SetLocationStoreNumber(s string) *TransactionUpdateOne {
	tuo.mutation.SetLocationStoreNumber(s)
	return tuo
}

// SetName sets the "name" field.
func (tuo *TransactionUpdateOne) SetName(s string) *TransactionUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetMerchantName sets the "merchant_name" field.
func (tuo *TransactionUpdateOne) SetMerchantName(s string) *TransactionUpdateOne {
	tuo.mutation.SetMerchantName(s)
	return tuo
}

// SetPaymentChannel sets the "payment_channel" field.
func (tuo *TransactionUpdateOne) SetPaymentChannel(s string) *TransactionUpdateOne {
	tuo.mutation.SetPaymentChannel(s)
	return tuo
}

// SetPending sets the "pending" field.
func (tuo *TransactionUpdateOne) SetPending(b bool) *TransactionUpdateOne {
	tuo.mutation.SetPending(b)
	return tuo
}

// SetPendingTransactionID sets the "pending_transaction_id" field.
func (tuo *TransactionUpdateOne) SetPendingTransactionID(s string) *TransactionUpdateOne {
	tuo.mutation.SetPendingTransactionID(s)
	return tuo
}

// SetAccountOwner sets the "account_owner" field.
func (tuo *TransactionUpdateOne) SetAccountOwner(s string) *TransactionUpdateOne {
	tuo.mutation.SetAccountOwner(s)
	return tuo
}

// SetTransactionID sets the "transaction_id" field.
func (tuo *TransactionUpdateOne) SetTransactionID(s string) *TransactionUpdateOne {
	tuo.mutation.SetTransactionID(s)
	return tuo
}

// SetTransactionCode sets the "transaction_code" field.
func (tuo *TransactionUpdateOne) SetTransactionCode(s string) *TransactionUpdateOne {
	tuo.mutation.SetTransactionCode(s)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TransactionUpdateOne) SetCreatedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCreatedAt(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetInstitutionAccountID sets the "institution_account" edge to the PlaidInstitutionAccount entity by ID.
func (tuo *TransactionUpdateOne) SetInstitutionAccountID(id int) *TransactionUpdateOne {
	tuo.mutation.SetInstitutionAccountID(id)
	return tuo
}

// SetNillableInstitutionAccountID sets the "institution_account" edge to the PlaidInstitutionAccount entity by ID if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableInstitutionAccountID(id *int) *TransactionUpdateOne {
	if id != nil {
		tuo = tuo.SetInstitutionAccountID(*id)
	}
	return tuo
}

// SetInstitutionAccount sets the "institution_account" edge to the PlaidInstitutionAccount entity.
func (tuo *TransactionUpdateOne) SetInstitutionAccount(p *PlaidInstitutionAccount) *TransactionUpdateOne {
	return tuo.SetInstitutionAccountID(p.ID)
}

// AddTransactionCategoryIDs adds the "transaction_categories" edge to the SpendingCategory entity by IDs.
func (tuo *TransactionUpdateOne) AddTransactionCategoryIDs(ids ...int) *TransactionUpdateOne {
	tuo.mutation.AddTransactionCategoryIDs(ids...)
	return tuo
}

// AddTransactionCategories adds the "transaction_categories" edges to the SpendingCategory entity.
func (tuo *TransactionUpdateOne) AddTransactionCategories(s ...*SpendingCategory) *TransactionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddTransactionCategoryIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearInstitutionAccount clears the "institution_account" edge to the PlaidInstitutionAccount entity.
func (tuo *TransactionUpdateOne) ClearInstitutionAccount() *TransactionUpdateOne {
	tuo.mutation.ClearInstitutionAccount()
	return tuo
}

// ClearTransactionCategories clears all "transaction_categories" edges to the SpendingCategory entity.
func (tuo *TransactionUpdateOne) ClearTransactionCategories() *TransactionUpdateOne {
	tuo.mutation.ClearTransactionCategories()
	return tuo
}

// RemoveTransactionCategoryIDs removes the "transaction_categories" edge to SpendingCategory entities by IDs.
func (tuo *TransactionUpdateOne) RemoveTransactionCategoryIDs(ids ...int) *TransactionUpdateOne {
	tuo.mutation.RemoveTransactionCategoryIDs(ids...)
	return tuo
}

// RemoveTransactionCategories removes "transaction_categories" edges to SpendingCategory entities.
func (tuo *TransactionUpdateOne) RemoveTransactionCategories(s ...*SpendingCategory) *TransactionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveTransactionCategoryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	return withHooks[*Transaction, TransactionMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransactionUpdateOne) check() error {
	if v, ok := tuo.mutation.FinancialAccountID(); ok {
		if err := transaction.FinancialAccountIDValidator(v); err != nil {
			return &ValidationError{Name: "financial_account_id", err: fmt.Errorf(`ent: validator failed for field "Transaction.financial_account_id": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.IsoCurrencyCode(); ok {
		if err := transaction.IsoCurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "iso_currency_code", err: fmt.Errorf(`ent: validator failed for field "Transaction.iso_currency_code": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Date(); ok {
		if err := transaction.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "Transaction.date": %w`, err)}
		}
	}
	return nil
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transaction.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.FinancialAccountID(); ok {
		_spec.SetField(transaction.FieldFinancialAccountID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.IsoCurrencyCode(); ok {
		_spec.SetField(transaction.FieldIsoCurrencyCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.UnofficialCurrencyCode(); ok {
		_spec.SetField(transaction.FieldUnofficialCurrencyCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Category(); ok {
		_spec.SetField(transaction.FieldCategory, field.TypeString, value)
	}
	if tuo.mutation.CategoryCleared() {
		_spec.ClearField(transaction.FieldCategory, field.TypeString)
	}
	if value, ok := tuo.mutation.CategoryID(); ok {
		_spec.SetField(transaction.FieldCategoryID, field.TypeString, value)
	}
	if tuo.mutation.CategoryIDCleared() {
		_spec.ClearField(transaction.FieldCategoryID, field.TypeString)
	}
	if value, ok := tuo.mutation.CheckNumber(); ok {
		_spec.SetField(transaction.FieldCheckNumber, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Date(); ok {
		_spec.SetField(transaction.FieldDate, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Datetime(); ok {
		_spec.SetField(transaction.FieldDatetime, field.TypeTime, value)
	}
	if tuo.mutation.DatetimeCleared() {
		_spec.ClearField(transaction.FieldDatetime, field.TypeTime)
	}
	if value, ok := tuo.mutation.AuthorizedDate(); ok {
		_spec.SetField(transaction.FieldAuthorizedDate, field.TypeString, value)
	}
	if tuo.mutation.AuthorizedDateCleared() {
		_spec.ClearField(transaction.FieldAuthorizedDate, field.TypeString)
	}
	if value, ok := tuo.mutation.AuthorizedDatetime(); ok {
		_spec.SetField(transaction.FieldAuthorizedDatetime, field.TypeTime, value)
	}
	if tuo.mutation.AuthorizedDatetimeCleared() {
		_spec.ClearField(transaction.FieldAuthorizedDatetime, field.TypeTime)
	}
	if value, ok := tuo.mutation.LocationAddress(); ok {
		_spec.SetField(transaction.FieldLocationAddress, field.TypeString, value)
	}
	if value, ok := tuo.mutation.LocationCity(); ok {
		_spec.SetField(transaction.FieldLocationCity, field.TypeString, value)
	}
	if value, ok := tuo.mutation.LocationRegion(); ok {
		_spec.SetField(transaction.FieldLocationRegion, field.TypeString, value)
	}
	if value, ok := tuo.mutation.LocationPostalCode(); ok {
		_spec.SetField(transaction.FieldLocationPostalCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.LocationLat(); ok {
		_spec.SetField(transaction.FieldLocationLat, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedLocationLat(); ok {
		_spec.AddField(transaction.FieldLocationLat, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.LocationLon(); ok {
		_spec.SetField(transaction.FieldLocationLon, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedLocationLon(); ok {
		_spec.AddField(transaction.FieldLocationLon, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.LocationStoreNumber(); ok {
		_spec.SetField(transaction.FieldLocationStoreNumber, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(transaction.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.MerchantName(); ok {
		_spec.SetField(transaction.FieldMerchantName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PaymentChannel(); ok {
		_spec.SetField(transaction.FieldPaymentChannel, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Pending(); ok {
		_spec.SetField(transaction.FieldPending, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.PendingTransactionID(); ok {
		_spec.SetField(transaction.FieldPendingTransactionID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.AccountOwner(); ok {
		_spec.SetField(transaction.FieldAccountOwner, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TransactionID(); ok {
		_spec.SetField(transaction.FieldTransactionID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TransactionCode(); ok {
		_spec.SetField(transaction.FieldTransactionCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.InstitutionAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.InstitutionAccountTable,
			Columns: []string{transaction.InstitutionAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitutionaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.InstitutionAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.InstitutionAccountTable,
			Columns: []string{transaction.InstitutionAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitutionaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TransactionCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   transaction.TransactionCategoriesTable,
			Columns: transaction.TransactionCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTransactionCategoriesIDs(); len(nodes) > 0 && !tuo.mutation.TransactionCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   transaction.TransactionCategoriesTable,
			Columns: transaction.TransactionCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TransactionCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   transaction.TransactionCategoriesTable,
			Columns: transaction.TransactionCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spendingcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
