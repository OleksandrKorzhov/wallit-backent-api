// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wallit/ent/plaidinstitution"
	"wallit/ent/plaiditem"
	"wallit/ent/user"

	"entgo.io/ent/dialect/sql"
)

// PlaidItem is the model entity for the PlaidItem schema.
type PlaidItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ItemID holds the value of the "item_id" field.
	ItemID string `json:"item_id,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaidItemQuery when eager-loading is set.
	Edges            PlaidItemEdges `json:"edges"`
	user_plaid_items *int
}

// PlaidItemEdges holds the relations/edges for other nodes in the graph.
type PlaidItemEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// TransactionSyncs holds the value of the transaction_syncs edge.
	TransactionSyncs []*TransactionSync `json:"transaction_syncs,omitempty"`
	// Institution holds the value of the institution edge.
	Institution *PlaidInstitution `json:"institution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedTransactionSyncs map[string][]*TransactionSync
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaidItemEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// TransactionSyncsOrErr returns the TransactionSyncs value or an error if the edge
// was not loaded in eager-loading.
func (e PlaidItemEdges) TransactionSyncsOrErr() ([]*TransactionSync, error) {
	if e.loadedTypes[1] {
		return e.TransactionSyncs, nil
	}
	return nil, &NotLoadedError{edge: "transaction_syncs"}
}

// InstitutionOrErr returns the Institution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaidItemEdges) InstitutionOrErr() (*PlaidInstitution, error) {
	if e.loadedTypes[2] {
		if e.Institution == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plaidinstitution.Label}
		}
		return e.Institution, nil
	}
	return nil, &NotLoadedError{edge: "institution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlaidItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plaiditem.FieldID:
			values[i] = new(sql.NullInt64)
		case plaiditem.FieldItemID, plaiditem.FieldAccessToken:
			values[i] = new(sql.NullString)
		case plaiditem.FieldCreatedAt, plaiditem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case plaiditem.ForeignKeys[0]: // user_plaid_items
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PlaidItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaidItem fields.
func (pi *PlaidItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plaiditem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case plaiditem.FieldItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value.Valid {
				pi.ItemID = value.String
			}
		case plaiditem.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				pi.AccessToken = value.String
			}
		case plaiditem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case plaiditem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		case plaiditem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_plaid_items", value)
			} else if value.Valid {
				pi.user_plaid_items = new(int)
				*pi.user_plaid_items = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the PlaidItem entity.
func (pi *PlaidItem) QueryOwner() *UserQuery {
	return NewPlaidItemClient(pi.config).QueryOwner(pi)
}

// QueryTransactionSyncs queries the "transaction_syncs" edge of the PlaidItem entity.
func (pi *PlaidItem) QueryTransactionSyncs() *TransactionSyncQuery {
	return NewPlaidItemClient(pi.config).QueryTransactionSyncs(pi)
}

// QueryInstitution queries the "institution" edge of the PlaidItem entity.
func (pi *PlaidItem) QueryInstitution() *PlaidInstitutionQuery {
	return NewPlaidItemClient(pi.config).QueryInstitution(pi)
}

// Update returns a builder for updating this PlaidItem.
// Note that you need to call PlaidItem.Unwrap() before calling this method if this PlaidItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PlaidItem) Update() *PlaidItemUpdateOne {
	return NewPlaidItemClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the PlaidItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PlaidItem) Unwrap() *PlaidItem {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaidItem is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PlaidItem) String() string {
	var builder strings.Builder
	builder.WriteString("PlaidItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("item_id=")
	builder.WriteString(pi.ItemID)
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(pi.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTransactionSyncs returns the TransactionSyncs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pi *PlaidItem) NamedTransactionSyncs(name string) ([]*TransactionSync, error) {
	if pi.Edges.namedTransactionSyncs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pi.Edges.namedTransactionSyncs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pi *PlaidItem) appendNamedTransactionSyncs(name string, edges ...*TransactionSync) {
	if pi.Edges.namedTransactionSyncs == nil {
		pi.Edges.namedTransactionSyncs = make(map[string][]*TransactionSync)
	}
	if len(edges) == 0 {
		pi.Edges.namedTransactionSyncs[name] = []*TransactionSync{}
	} else {
		pi.Edges.namedTransactionSyncs[name] = append(pi.Edges.namedTransactionSyncs[name], edges...)
	}
}

// PlaidItems is a parsable slice of PlaidItem.
type PlaidItems []*PlaidItem

func (pi PlaidItems) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
