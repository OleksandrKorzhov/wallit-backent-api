// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFinancialAccountID holds the string denoting the financial_account_id field in the database.
	FieldFinancialAccountID = "financial_account_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldIsoCurrencyCode holds the string denoting the iso_currency_code field in the database.
	FieldIsoCurrencyCode = "iso_currency_code"
	// FieldUnofficialCurrencyCode holds the string denoting the unofficial_currency_code field in the database.
	FieldUnofficialCurrencyCode = "unofficial_currency_code"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// FieldCheckNumber holds the string denoting the check_number field in the database.
	FieldCheckNumber = "check_number"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldDatetime holds the string denoting the datetime field in the database.
	FieldDatetime = "datetime"
	// FieldAuthorizedDate holds the string denoting the authorized_date field in the database.
	FieldAuthorizedDate = "authorized_date"
	// FieldAuthorizedDatetime holds the string denoting the authorized_datetime field in the database.
	FieldAuthorizedDatetime = "authorized_datetime"
	// FieldLocationAddress holds the string denoting the location_address field in the database.
	FieldLocationAddress = "location_address"
	// FieldLocationCity holds the string denoting the location_city field in the database.
	FieldLocationCity = "location_city"
	// FieldLocationRegion holds the string denoting the location_region field in the database.
	FieldLocationRegion = "location_region"
	// FieldLocationPostalCode holds the string denoting the location_postal_code field in the database.
	FieldLocationPostalCode = "location_postal_code"
	// FieldLocationLat holds the string denoting the location_lat field in the database.
	FieldLocationLat = "location_lat"
	// FieldLocationLon holds the string denoting the location_lon field in the database.
	FieldLocationLon = "location_lon"
	// FieldLocationStoreNumber holds the string denoting the location_store_number field in the database.
	FieldLocationStoreNumber = "location_store_number"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMerchantName holds the string denoting the merchant_name field in the database.
	FieldMerchantName = "merchant_name"
	// FieldPaymentChannel holds the string denoting the payment_channel field in the database.
	FieldPaymentChannel = "payment_channel"
	// FieldPending holds the string denoting the pending field in the database.
	FieldPending = "pending"
	// FieldPendingTransactionID holds the string denoting the pending_transaction_id field in the database.
	FieldPendingTransactionID = "pending_transaction_id"
	// FieldAccountOwner holds the string denoting the account_owner field in the database.
	FieldAccountOwner = "account_owner"
	// FieldTransactionID holds the string denoting the transaction_id field in the database.
	FieldTransactionID = "transaction_id"
	// FieldTransactionCode holds the string denoting the transaction_code field in the database.
	FieldTransactionCode = "transaction_code"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeInstitutionAccount holds the string denoting the institution_account edge name in mutations.
	EdgeInstitutionAccount = "institution_account"
	// EdgeTransactionCategories holds the string denoting the transaction_categories edge name in mutations.
	EdgeTransactionCategories = "transaction_categories"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
	// InstitutionAccountTable is the table that holds the institution_account relation/edge.
	InstitutionAccountTable = "transactions"
	// InstitutionAccountInverseTable is the table name for the PlaidInstitutionAccount entity.
	// It exists in this package in order to avoid circular dependency with the "plaidinstitutionaccount" package.
	InstitutionAccountInverseTable = "plaid_institution_accounts"
	// InstitutionAccountColumn is the table column denoting the institution_account relation/edge.
	InstitutionAccountColumn = "plaid_institution_account_transactions"
	// TransactionCategoriesTable is the table that holds the transaction_categories relation/edge. The primary key declared below.
	TransactionCategoriesTable = "transaction_transaction_categories"
	// TransactionCategoriesInverseTable is the table name for the SpendingCategory entity.
	// It exists in this package in order to avoid circular dependency with the "spendingcategory" package.
	TransactionCategoriesInverseTable = "spending_categories"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldFinancialAccountID,
	FieldAmount,
	FieldIsoCurrencyCode,
	FieldUnofficialCurrencyCode,
	FieldCategory,
	FieldCategoryID,
	FieldCheckNumber,
	FieldDate,
	FieldDatetime,
	FieldAuthorizedDate,
	FieldAuthorizedDatetime,
	FieldLocationAddress,
	FieldLocationCity,
	FieldLocationRegion,
	FieldLocationPostalCode,
	FieldLocationLat,
	FieldLocationLon,
	FieldLocationStoreNumber,
	FieldName,
	FieldMerchantName,
	FieldPaymentChannel,
	FieldPending,
	FieldPendingTransactionID,
	FieldAccountOwner,
	FieldTransactionID,
	FieldTransactionCode,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transactions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"plaid_institution_account_transactions",
}

var (
	// TransactionCategoriesPrimaryKey and TransactionCategoriesColumn2 are the table columns denoting the
	// primary key for the transaction_categories relation (M2M).
	TransactionCategoriesPrimaryKey = []string{"transaction_id", "spending_category_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FinancialAccountIDValidator is a validator for the "financial_account_id" field. It is called by the builders before save.
	FinancialAccountIDValidator func(string) error
	// IsoCurrencyCodeValidator is a validator for the "iso_currency_code" field. It is called by the builders before save.
	IsoCurrencyCodeValidator func(string) error
	// DateValidator is a validator for the "date" field. It is called by the builders before save.
	DateValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
