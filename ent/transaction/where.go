// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"
	"wallit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// FinancialAccountID applies equality check predicate on the "financial_account_id" field. It's identical to FinancialAccountIDEQ.
func FinancialAccountID(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFinancialAccountID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// IsoCurrencyCode applies equality check predicate on the "iso_currency_code" field. It's identical to IsoCurrencyCodeEQ.
func IsoCurrencyCode(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldIsoCurrencyCode, v))
}

// UnofficialCurrencyCode applies equality check predicate on the "unofficial_currency_code" field. It's identical to UnofficialCurrencyCodeEQ.
func UnofficialCurrencyCode(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldUnofficialCurrencyCode, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCategory, v))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCategoryID, v))
}

// CheckNumber applies equality check predicate on the "check_number" field. It's identical to CheckNumberEQ.
func CheckNumber(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCheckNumber, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDate, v))
}

// Datetime applies equality check predicate on the "datetime" field. It's identical to DatetimeEQ.
func Datetime(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDatetime, v))
}

// AuthorizedDate applies equality check predicate on the "authorized_date" field. It's identical to AuthorizedDateEQ.
func AuthorizedDate(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAuthorizedDate, v))
}

// AuthorizedDatetime applies equality check predicate on the "authorized_datetime" field. It's identical to AuthorizedDatetimeEQ.
func AuthorizedDatetime(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAuthorizedDatetime, v))
}

// LocationAddress applies equality check predicate on the "location_address" field. It's identical to LocationAddressEQ.
func LocationAddress(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationAddress, v))
}

// LocationCity applies equality check predicate on the "location_city" field. It's identical to LocationCityEQ.
func LocationCity(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationCity, v))
}

// LocationRegion applies equality check predicate on the "location_region" field. It's identical to LocationRegionEQ.
func LocationRegion(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationRegion, v))
}

// LocationPostalCode applies equality check predicate on the "location_postal_code" field. It's identical to LocationPostalCodeEQ.
func LocationPostalCode(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationPostalCode, v))
}

// LocationLat applies equality check predicate on the "location_lat" field. It's identical to LocationLatEQ.
func LocationLat(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationLat, v))
}

// LocationLon applies equality check predicate on the "location_lon" field. It's identical to LocationLonEQ.
func LocationLon(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationLon, v))
}

// LocationStoreNumber applies equality check predicate on the "location_store_number" field. It's identical to LocationStoreNumberEQ.
func LocationStoreNumber(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationStoreNumber, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldName, v))
}

// MerchantName applies equality check predicate on the "merchant_name" field. It's identical to MerchantNameEQ.
func MerchantName(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldMerchantName, v))
}

// PaymentChannel applies equality check predicate on the "payment_channel" field. It's identical to PaymentChannelEQ.
func PaymentChannel(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentChannel, v))
}

// Pending applies equality check predicate on the "pending" field. It's identical to PendingEQ.
func Pending(v bool) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPending, v))
}

// PendingTransactionID applies equality check predicate on the "pending_transaction_id" field. It's identical to PendingTransactionIDEQ.
func PendingTransactionID(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPendingTransactionID, v))
}

// AccountOwner applies equality check predicate on the "account_owner" field. It's identical to AccountOwnerEQ.
func AccountOwner(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAccountOwner, v))
}

// TransactionID applies equality check predicate on the "transaction_id" field. It's identical to TransactionIDEQ.
func TransactionID(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionID, v))
}

// TransactionCode applies equality check predicate on the "transaction_code" field. It's identical to TransactionCodeEQ.
func TransactionCode(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionCode, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCreatedAt, v))
}

// FinancialAccountIDEQ applies the EQ predicate on the "financial_account_id" field.
func FinancialAccountIDEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFinancialAccountID, v))
}

// FinancialAccountIDNEQ applies the NEQ predicate on the "financial_account_id" field.
func FinancialAccountIDNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldFinancialAccountID, v))
}

// FinancialAccountIDIn applies the In predicate on the "financial_account_id" field.
func FinancialAccountIDIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldFinancialAccountID, vs...))
}

// FinancialAccountIDNotIn applies the NotIn predicate on the "financial_account_id" field.
func FinancialAccountIDNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldFinancialAccountID, vs...))
}

// FinancialAccountIDGT applies the GT predicate on the "financial_account_id" field.
func FinancialAccountIDGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldFinancialAccountID, v))
}

// FinancialAccountIDGTE applies the GTE predicate on the "financial_account_id" field.
func FinancialAccountIDGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldFinancialAccountID, v))
}

// FinancialAccountIDLT applies the LT predicate on the "financial_account_id" field.
func FinancialAccountIDLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldFinancialAccountID, v))
}

// FinancialAccountIDLTE applies the LTE predicate on the "financial_account_id" field.
func FinancialAccountIDLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldFinancialAccountID, v))
}

// FinancialAccountIDContains applies the Contains predicate on the "financial_account_id" field.
func FinancialAccountIDContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldFinancialAccountID, v))
}

// FinancialAccountIDHasPrefix applies the HasPrefix predicate on the "financial_account_id" field.
func FinancialAccountIDHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldFinancialAccountID, v))
}

// FinancialAccountIDHasSuffix applies the HasSuffix predicate on the "financial_account_id" field.
func FinancialAccountIDHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldFinancialAccountID, v))
}

// FinancialAccountIDEqualFold applies the EqualFold predicate on the "financial_account_id" field.
func FinancialAccountIDEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldFinancialAccountID, v))
}

// FinancialAccountIDContainsFold applies the ContainsFold predicate on the "financial_account_id" field.
func FinancialAccountIDContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldFinancialAccountID, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldAmount, v))
}

// IsoCurrencyCodeEQ applies the EQ predicate on the "iso_currency_code" field.
func IsoCurrencyCodeEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldIsoCurrencyCode, v))
}

// IsoCurrencyCodeNEQ applies the NEQ predicate on the "iso_currency_code" field.
func IsoCurrencyCodeNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldIsoCurrencyCode, v))
}

// IsoCurrencyCodeIn applies the In predicate on the "iso_currency_code" field.
func IsoCurrencyCodeIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldIsoCurrencyCode, vs...))
}

// IsoCurrencyCodeNotIn applies the NotIn predicate on the "iso_currency_code" field.
func IsoCurrencyCodeNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldIsoCurrencyCode, vs...))
}

// IsoCurrencyCodeGT applies the GT predicate on the "iso_currency_code" field.
func IsoCurrencyCodeGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldIsoCurrencyCode, v))
}

// IsoCurrencyCodeGTE applies the GTE predicate on the "iso_currency_code" field.
func IsoCurrencyCodeGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldIsoCurrencyCode, v))
}

// IsoCurrencyCodeLT applies the LT predicate on the "iso_currency_code" field.
func IsoCurrencyCodeLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldIsoCurrencyCode, v))
}

// IsoCurrencyCodeLTE applies the LTE predicate on the "iso_currency_code" field.
func IsoCurrencyCodeLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldIsoCurrencyCode, v))
}

// IsoCurrencyCodeContains applies the Contains predicate on the "iso_currency_code" field.
func IsoCurrencyCodeContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldIsoCurrencyCode, v))
}

// IsoCurrencyCodeHasPrefix applies the HasPrefix predicate on the "iso_currency_code" field.
func IsoCurrencyCodeHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldIsoCurrencyCode, v))
}

// IsoCurrencyCodeHasSuffix applies the HasSuffix predicate on the "iso_currency_code" field.
func IsoCurrencyCodeHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldIsoCurrencyCode, v))
}

// IsoCurrencyCodeEqualFold applies the EqualFold predicate on the "iso_currency_code" field.
func IsoCurrencyCodeEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldIsoCurrencyCode, v))
}

// IsoCurrencyCodeContainsFold applies the ContainsFold predicate on the "iso_currency_code" field.
func IsoCurrencyCodeContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldIsoCurrencyCode, v))
}

// UnofficialCurrencyCodeEQ applies the EQ predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldUnofficialCurrencyCode, v))
}

// UnofficialCurrencyCodeNEQ applies the NEQ predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldUnofficialCurrencyCode, v))
}

// UnofficialCurrencyCodeIn applies the In predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldUnofficialCurrencyCode, vs...))
}

// UnofficialCurrencyCodeNotIn applies the NotIn predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldUnofficialCurrencyCode, vs...))
}

// UnofficialCurrencyCodeGT applies the GT predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldUnofficialCurrencyCode, v))
}

// UnofficialCurrencyCodeGTE applies the GTE predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldUnofficialCurrencyCode, v))
}

// UnofficialCurrencyCodeLT applies the LT predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldUnofficialCurrencyCode, v))
}

// UnofficialCurrencyCodeLTE applies the LTE predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldUnofficialCurrencyCode, v))
}

// UnofficialCurrencyCodeContains applies the Contains predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldUnofficialCurrencyCode, v))
}

// UnofficialCurrencyCodeHasPrefix applies the HasPrefix predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldUnofficialCurrencyCode, v))
}

// UnofficialCurrencyCodeHasSuffix applies the HasSuffix predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldUnofficialCurrencyCode, v))
}

// UnofficialCurrencyCodeEqualFold applies the EqualFold predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldUnofficialCurrencyCode, v))
}

// UnofficialCurrencyCodeContainsFold applies the ContainsFold predicate on the "unofficial_currency_code" field.
func UnofficialCurrencyCodeContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldUnofficialCurrencyCode, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldCategory, v))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCategoryID, v))
}

// CategoryIDContains applies the Contains predicate on the "category_id" field.
func CategoryIDContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldCategoryID, v))
}

// CategoryIDHasPrefix applies the HasPrefix predicate on the "category_id" field.
func CategoryIDHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldCategoryID, v))
}

// CategoryIDHasSuffix applies the HasSuffix predicate on the "category_id" field.
func CategoryIDHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldCategoryID, v))
}

// CategoryIDIsNil applies the IsNil predicate on the "category_id" field.
func CategoryIDIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldCategoryID))
}

// CategoryIDNotNil applies the NotNil predicate on the "category_id" field.
func CategoryIDNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldCategoryID))
}

// CategoryIDEqualFold applies the EqualFold predicate on the "category_id" field.
func CategoryIDEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldCategoryID, v))
}

// CategoryIDContainsFold applies the ContainsFold predicate on the "category_id" field.
func CategoryIDContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldCategoryID, v))
}

// CheckNumberEQ applies the EQ predicate on the "check_number" field.
func CheckNumberEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCheckNumber, v))
}

// CheckNumberNEQ applies the NEQ predicate on the "check_number" field.
func CheckNumberNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCheckNumber, v))
}

// CheckNumberIn applies the In predicate on the "check_number" field.
func CheckNumberIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCheckNumber, vs...))
}

// CheckNumberNotIn applies the NotIn predicate on the "check_number" field.
func CheckNumberNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCheckNumber, vs...))
}

// CheckNumberGT applies the GT predicate on the "check_number" field.
func CheckNumberGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCheckNumber, v))
}

// CheckNumberGTE applies the GTE predicate on the "check_number" field.
func CheckNumberGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCheckNumber, v))
}

// CheckNumberLT applies the LT predicate on the "check_number" field.
func CheckNumberLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCheckNumber, v))
}

// CheckNumberLTE applies the LTE predicate on the "check_number" field.
func CheckNumberLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCheckNumber, v))
}

// CheckNumberContains applies the Contains predicate on the "check_number" field.
func CheckNumberContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldCheckNumber, v))
}

// CheckNumberHasPrefix applies the HasPrefix predicate on the "check_number" field.
func CheckNumberHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldCheckNumber, v))
}

// CheckNumberHasSuffix applies the HasSuffix predicate on the "check_number" field.
func CheckNumberHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldCheckNumber, v))
}

// CheckNumberEqualFold applies the EqualFold predicate on the "check_number" field.
func CheckNumberEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldCheckNumber, v))
}

// CheckNumberContainsFold applies the ContainsFold predicate on the "check_number" field.
func CheckNumberContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldCheckNumber, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldDate, v))
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldDate, v))
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldDate, v))
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldDate, v))
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldDate, v))
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldDate, v))
}

// DatetimeEQ applies the EQ predicate on the "datetime" field.
func DatetimeEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDatetime, v))
}

// DatetimeNEQ applies the NEQ predicate on the "datetime" field.
func DatetimeNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldDatetime, v))
}

// DatetimeIn applies the In predicate on the "datetime" field.
func DatetimeIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldDatetime, vs...))
}

// DatetimeNotIn applies the NotIn predicate on the "datetime" field.
func DatetimeNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldDatetime, vs...))
}

// DatetimeGT applies the GT predicate on the "datetime" field.
func DatetimeGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldDatetime, v))
}

// DatetimeGTE applies the GTE predicate on the "datetime" field.
func DatetimeGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldDatetime, v))
}

// DatetimeLT applies the LT predicate on the "datetime" field.
func DatetimeLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldDatetime, v))
}

// DatetimeLTE applies the LTE predicate on the "datetime" field.
func DatetimeLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldDatetime, v))
}

// DatetimeIsNil applies the IsNil predicate on the "datetime" field.
func DatetimeIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldDatetime))
}

// DatetimeNotNil applies the NotNil predicate on the "datetime" field.
func DatetimeNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldDatetime))
}

// AuthorizedDateEQ applies the EQ predicate on the "authorized_date" field.
func AuthorizedDateEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAuthorizedDate, v))
}

// AuthorizedDateNEQ applies the NEQ predicate on the "authorized_date" field.
func AuthorizedDateNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldAuthorizedDate, v))
}

// AuthorizedDateIn applies the In predicate on the "authorized_date" field.
func AuthorizedDateIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldAuthorizedDate, vs...))
}

// AuthorizedDateNotIn applies the NotIn predicate on the "authorized_date" field.
func AuthorizedDateNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldAuthorizedDate, vs...))
}

// AuthorizedDateGT applies the GT predicate on the "authorized_date" field.
func AuthorizedDateGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldAuthorizedDate, v))
}

// AuthorizedDateGTE applies the GTE predicate on the "authorized_date" field.
func AuthorizedDateGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldAuthorizedDate, v))
}

// AuthorizedDateLT applies the LT predicate on the "authorized_date" field.
func AuthorizedDateLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldAuthorizedDate, v))
}

// AuthorizedDateLTE applies the LTE predicate on the "authorized_date" field.
func AuthorizedDateLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldAuthorizedDate, v))
}

// AuthorizedDateContains applies the Contains predicate on the "authorized_date" field.
func AuthorizedDateContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldAuthorizedDate, v))
}

// AuthorizedDateHasPrefix applies the HasPrefix predicate on the "authorized_date" field.
func AuthorizedDateHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldAuthorizedDate, v))
}

// AuthorizedDateHasSuffix applies the HasSuffix predicate on the "authorized_date" field.
func AuthorizedDateHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldAuthorizedDate, v))
}

// AuthorizedDateIsNil applies the IsNil predicate on the "authorized_date" field.
func AuthorizedDateIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldAuthorizedDate))
}

// AuthorizedDateNotNil applies the NotNil predicate on the "authorized_date" field.
func AuthorizedDateNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldAuthorizedDate))
}

// AuthorizedDateEqualFold applies the EqualFold predicate on the "authorized_date" field.
func AuthorizedDateEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldAuthorizedDate, v))
}

// AuthorizedDateContainsFold applies the ContainsFold predicate on the "authorized_date" field.
func AuthorizedDateContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldAuthorizedDate, v))
}

// AuthorizedDatetimeEQ applies the EQ predicate on the "authorized_datetime" field.
func AuthorizedDatetimeEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAuthorizedDatetime, v))
}

// AuthorizedDatetimeNEQ applies the NEQ predicate on the "authorized_datetime" field.
func AuthorizedDatetimeNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldAuthorizedDatetime, v))
}

// AuthorizedDatetimeIn applies the In predicate on the "authorized_datetime" field.
func AuthorizedDatetimeIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldAuthorizedDatetime, vs...))
}

// AuthorizedDatetimeNotIn applies the NotIn predicate on the "authorized_datetime" field.
func AuthorizedDatetimeNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldAuthorizedDatetime, vs...))
}

// AuthorizedDatetimeGT applies the GT predicate on the "authorized_datetime" field.
func AuthorizedDatetimeGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldAuthorizedDatetime, v))
}

// AuthorizedDatetimeGTE applies the GTE predicate on the "authorized_datetime" field.
func AuthorizedDatetimeGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldAuthorizedDatetime, v))
}

// AuthorizedDatetimeLT applies the LT predicate on the "authorized_datetime" field.
func AuthorizedDatetimeLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldAuthorizedDatetime, v))
}

// AuthorizedDatetimeLTE applies the LTE predicate on the "authorized_datetime" field.
func AuthorizedDatetimeLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldAuthorizedDatetime, v))
}

// AuthorizedDatetimeIsNil applies the IsNil predicate on the "authorized_datetime" field.
func AuthorizedDatetimeIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldAuthorizedDatetime))
}

// AuthorizedDatetimeNotNil applies the NotNil predicate on the "authorized_datetime" field.
func AuthorizedDatetimeNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldAuthorizedDatetime))
}

// LocationAddressEQ applies the EQ predicate on the "location_address" field.
func LocationAddressEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationAddress, v))
}

// LocationAddressNEQ applies the NEQ predicate on the "location_address" field.
func LocationAddressNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldLocationAddress, v))
}

// LocationAddressIn applies the In predicate on the "location_address" field.
func LocationAddressIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldLocationAddress, vs...))
}

// LocationAddressNotIn applies the NotIn predicate on the "location_address" field.
func LocationAddressNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldLocationAddress, vs...))
}

// LocationAddressGT applies the GT predicate on the "location_address" field.
func LocationAddressGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldLocationAddress, v))
}

// LocationAddressGTE applies the GTE predicate on the "location_address" field.
func LocationAddressGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldLocationAddress, v))
}

// LocationAddressLT applies the LT predicate on the "location_address" field.
func LocationAddressLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldLocationAddress, v))
}

// LocationAddressLTE applies the LTE predicate on the "location_address" field.
func LocationAddressLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldLocationAddress, v))
}

// LocationAddressContains applies the Contains predicate on the "location_address" field.
func LocationAddressContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldLocationAddress, v))
}

// LocationAddressHasPrefix applies the HasPrefix predicate on the "location_address" field.
func LocationAddressHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldLocationAddress, v))
}

// LocationAddressHasSuffix applies the HasSuffix predicate on the "location_address" field.
func LocationAddressHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldLocationAddress, v))
}

// LocationAddressEqualFold applies the EqualFold predicate on the "location_address" field.
func LocationAddressEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldLocationAddress, v))
}

// LocationAddressContainsFold applies the ContainsFold predicate on the "location_address" field.
func LocationAddressContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldLocationAddress, v))
}

// LocationCityEQ applies the EQ predicate on the "location_city" field.
func LocationCityEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationCity, v))
}

// LocationCityNEQ applies the NEQ predicate on the "location_city" field.
func LocationCityNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldLocationCity, v))
}

// LocationCityIn applies the In predicate on the "location_city" field.
func LocationCityIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldLocationCity, vs...))
}

// LocationCityNotIn applies the NotIn predicate on the "location_city" field.
func LocationCityNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldLocationCity, vs...))
}

// LocationCityGT applies the GT predicate on the "location_city" field.
func LocationCityGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldLocationCity, v))
}

// LocationCityGTE applies the GTE predicate on the "location_city" field.
func LocationCityGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldLocationCity, v))
}

// LocationCityLT applies the LT predicate on the "location_city" field.
func LocationCityLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldLocationCity, v))
}

// LocationCityLTE applies the LTE predicate on the "location_city" field.
func LocationCityLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldLocationCity, v))
}

// LocationCityContains applies the Contains predicate on the "location_city" field.
func LocationCityContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldLocationCity, v))
}

// LocationCityHasPrefix applies the HasPrefix predicate on the "location_city" field.
func LocationCityHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldLocationCity, v))
}

// LocationCityHasSuffix applies the HasSuffix predicate on the "location_city" field.
func LocationCityHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldLocationCity, v))
}

// LocationCityEqualFold applies the EqualFold predicate on the "location_city" field.
func LocationCityEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldLocationCity, v))
}

// LocationCityContainsFold applies the ContainsFold predicate on the "location_city" field.
func LocationCityContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldLocationCity, v))
}

// LocationRegionEQ applies the EQ predicate on the "location_region" field.
func LocationRegionEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationRegion, v))
}

// LocationRegionNEQ applies the NEQ predicate on the "location_region" field.
func LocationRegionNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldLocationRegion, v))
}

// LocationRegionIn applies the In predicate on the "location_region" field.
func LocationRegionIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldLocationRegion, vs...))
}

// LocationRegionNotIn applies the NotIn predicate on the "location_region" field.
func LocationRegionNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldLocationRegion, vs...))
}

// LocationRegionGT applies the GT predicate on the "location_region" field.
func LocationRegionGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldLocationRegion, v))
}

// LocationRegionGTE applies the GTE predicate on the "location_region" field.
func LocationRegionGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldLocationRegion, v))
}

// LocationRegionLT applies the LT predicate on the "location_region" field.
func LocationRegionLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldLocationRegion, v))
}

// LocationRegionLTE applies the LTE predicate on the "location_region" field.
func LocationRegionLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldLocationRegion, v))
}

// LocationRegionContains applies the Contains predicate on the "location_region" field.
func LocationRegionContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldLocationRegion, v))
}

// LocationRegionHasPrefix applies the HasPrefix predicate on the "location_region" field.
func LocationRegionHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldLocationRegion, v))
}

// LocationRegionHasSuffix applies the HasSuffix predicate on the "location_region" field.
func LocationRegionHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldLocationRegion, v))
}

// LocationRegionEqualFold applies the EqualFold predicate on the "location_region" field.
func LocationRegionEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldLocationRegion, v))
}

// LocationRegionContainsFold applies the ContainsFold predicate on the "location_region" field.
func LocationRegionContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldLocationRegion, v))
}

// LocationPostalCodeEQ applies the EQ predicate on the "location_postal_code" field.
func LocationPostalCodeEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationPostalCode, v))
}

// LocationPostalCodeNEQ applies the NEQ predicate on the "location_postal_code" field.
func LocationPostalCodeNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldLocationPostalCode, v))
}

// LocationPostalCodeIn applies the In predicate on the "location_postal_code" field.
func LocationPostalCodeIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldLocationPostalCode, vs...))
}

// LocationPostalCodeNotIn applies the NotIn predicate on the "location_postal_code" field.
func LocationPostalCodeNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldLocationPostalCode, vs...))
}

// LocationPostalCodeGT applies the GT predicate on the "location_postal_code" field.
func LocationPostalCodeGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldLocationPostalCode, v))
}

// LocationPostalCodeGTE applies the GTE predicate on the "location_postal_code" field.
func LocationPostalCodeGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldLocationPostalCode, v))
}

// LocationPostalCodeLT applies the LT predicate on the "location_postal_code" field.
func LocationPostalCodeLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldLocationPostalCode, v))
}

// LocationPostalCodeLTE applies the LTE predicate on the "location_postal_code" field.
func LocationPostalCodeLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldLocationPostalCode, v))
}

// LocationPostalCodeContains applies the Contains predicate on the "location_postal_code" field.
func LocationPostalCodeContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldLocationPostalCode, v))
}

// LocationPostalCodeHasPrefix applies the HasPrefix predicate on the "location_postal_code" field.
func LocationPostalCodeHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldLocationPostalCode, v))
}

// LocationPostalCodeHasSuffix applies the HasSuffix predicate on the "location_postal_code" field.
func LocationPostalCodeHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldLocationPostalCode, v))
}

// LocationPostalCodeEqualFold applies the EqualFold predicate on the "location_postal_code" field.
func LocationPostalCodeEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldLocationPostalCode, v))
}

// LocationPostalCodeContainsFold applies the ContainsFold predicate on the "location_postal_code" field.
func LocationPostalCodeContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldLocationPostalCode, v))
}

// LocationLatEQ applies the EQ predicate on the "location_lat" field.
func LocationLatEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationLat, v))
}

// LocationLatNEQ applies the NEQ predicate on the "location_lat" field.
func LocationLatNEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldLocationLat, v))
}

// LocationLatIn applies the In predicate on the "location_lat" field.
func LocationLatIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldLocationLat, vs...))
}

// LocationLatNotIn applies the NotIn predicate on the "location_lat" field.
func LocationLatNotIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldLocationLat, vs...))
}

// LocationLatGT applies the GT predicate on the "location_lat" field.
func LocationLatGT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldLocationLat, v))
}

// LocationLatGTE applies the GTE predicate on the "location_lat" field.
func LocationLatGTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldLocationLat, v))
}

// LocationLatLT applies the LT predicate on the "location_lat" field.
func LocationLatLT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldLocationLat, v))
}

// LocationLatLTE applies the LTE predicate on the "location_lat" field.
func LocationLatLTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldLocationLat, v))
}

// LocationLonEQ applies the EQ predicate on the "location_lon" field.
func LocationLonEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationLon, v))
}

// LocationLonNEQ applies the NEQ predicate on the "location_lon" field.
func LocationLonNEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldLocationLon, v))
}

// LocationLonIn applies the In predicate on the "location_lon" field.
func LocationLonIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldLocationLon, vs...))
}

// LocationLonNotIn applies the NotIn predicate on the "location_lon" field.
func LocationLonNotIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldLocationLon, vs...))
}

// LocationLonGT applies the GT predicate on the "location_lon" field.
func LocationLonGT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldLocationLon, v))
}

// LocationLonGTE applies the GTE predicate on the "location_lon" field.
func LocationLonGTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldLocationLon, v))
}

// LocationLonLT applies the LT predicate on the "location_lon" field.
func LocationLonLT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldLocationLon, v))
}

// LocationLonLTE applies the LTE predicate on the "location_lon" field.
func LocationLonLTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldLocationLon, v))
}

// LocationStoreNumberEQ applies the EQ predicate on the "location_store_number" field.
func LocationStoreNumberEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldLocationStoreNumber, v))
}

// LocationStoreNumberNEQ applies the NEQ predicate on the "location_store_number" field.
func LocationStoreNumberNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldLocationStoreNumber, v))
}

// LocationStoreNumberIn applies the In predicate on the "location_store_number" field.
func LocationStoreNumberIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldLocationStoreNumber, vs...))
}

// LocationStoreNumberNotIn applies the NotIn predicate on the "location_store_number" field.
func LocationStoreNumberNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldLocationStoreNumber, vs...))
}

// LocationStoreNumberGT applies the GT predicate on the "location_store_number" field.
func LocationStoreNumberGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldLocationStoreNumber, v))
}

// LocationStoreNumberGTE applies the GTE predicate on the "location_store_number" field.
func LocationStoreNumberGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldLocationStoreNumber, v))
}

// LocationStoreNumberLT applies the LT predicate on the "location_store_number" field.
func LocationStoreNumberLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldLocationStoreNumber, v))
}

// LocationStoreNumberLTE applies the LTE predicate on the "location_store_number" field.
func LocationStoreNumberLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldLocationStoreNumber, v))
}

// LocationStoreNumberContains applies the Contains predicate on the "location_store_number" field.
func LocationStoreNumberContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldLocationStoreNumber, v))
}

// LocationStoreNumberHasPrefix applies the HasPrefix predicate on the "location_store_number" field.
func LocationStoreNumberHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldLocationStoreNumber, v))
}

// LocationStoreNumberHasSuffix applies the HasSuffix predicate on the "location_store_number" field.
func LocationStoreNumberHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldLocationStoreNumber, v))
}

// LocationStoreNumberEqualFold applies the EqualFold predicate on the "location_store_number" field.
func LocationStoreNumberEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldLocationStoreNumber, v))
}

// LocationStoreNumberContainsFold applies the ContainsFold predicate on the "location_store_number" field.
func LocationStoreNumberContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldLocationStoreNumber, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldName, v))
}

// MerchantNameEQ applies the EQ predicate on the "merchant_name" field.
func MerchantNameEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldMerchantName, v))
}

// MerchantNameNEQ applies the NEQ predicate on the "merchant_name" field.
func MerchantNameNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldMerchantName, v))
}

// MerchantNameIn applies the In predicate on the "merchant_name" field.
func MerchantNameIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldMerchantName, vs...))
}

// MerchantNameNotIn applies the NotIn predicate on the "merchant_name" field.
func MerchantNameNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldMerchantName, vs...))
}

// MerchantNameGT applies the GT predicate on the "merchant_name" field.
func MerchantNameGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldMerchantName, v))
}

// MerchantNameGTE applies the GTE predicate on the "merchant_name" field.
func MerchantNameGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldMerchantName, v))
}

// MerchantNameLT applies the LT predicate on the "merchant_name" field.
func MerchantNameLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldMerchantName, v))
}

// MerchantNameLTE applies the LTE predicate on the "merchant_name" field.
func MerchantNameLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldMerchantName, v))
}

// MerchantNameContains applies the Contains predicate on the "merchant_name" field.
func MerchantNameContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldMerchantName, v))
}

// MerchantNameHasPrefix applies the HasPrefix predicate on the "merchant_name" field.
func MerchantNameHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldMerchantName, v))
}

// MerchantNameHasSuffix applies the HasSuffix predicate on the "merchant_name" field.
func MerchantNameHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldMerchantName, v))
}

// MerchantNameEqualFold applies the EqualFold predicate on the "merchant_name" field.
func MerchantNameEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldMerchantName, v))
}

// MerchantNameContainsFold applies the ContainsFold predicate on the "merchant_name" field.
func MerchantNameContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldMerchantName, v))
}

// PaymentChannelEQ applies the EQ predicate on the "payment_channel" field.
func PaymentChannelEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentChannel, v))
}

// PaymentChannelNEQ applies the NEQ predicate on the "payment_channel" field.
func PaymentChannelNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentChannel, v))
}

// PaymentChannelIn applies the In predicate on the "payment_channel" field.
func PaymentChannelIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentChannel, vs...))
}

// PaymentChannelNotIn applies the NotIn predicate on the "payment_channel" field.
func PaymentChannelNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentChannel, vs...))
}

// PaymentChannelGT applies the GT predicate on the "payment_channel" field.
func PaymentChannelGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentChannel, v))
}

// PaymentChannelGTE applies the GTE predicate on the "payment_channel" field.
func PaymentChannelGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentChannel, v))
}

// PaymentChannelLT applies the LT predicate on the "payment_channel" field.
func PaymentChannelLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentChannel, v))
}

// PaymentChannelLTE applies the LTE predicate on the "payment_channel" field.
func PaymentChannelLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentChannel, v))
}

// PaymentChannelContains applies the Contains predicate on the "payment_channel" field.
func PaymentChannelContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPaymentChannel, v))
}

// PaymentChannelHasPrefix applies the HasPrefix predicate on the "payment_channel" field.
func PaymentChannelHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPaymentChannel, v))
}

// PaymentChannelHasSuffix applies the HasSuffix predicate on the "payment_channel" field.
func PaymentChannelHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPaymentChannel, v))
}

// PaymentChannelEqualFold applies the EqualFold predicate on the "payment_channel" field.
func PaymentChannelEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPaymentChannel, v))
}

// PaymentChannelContainsFold applies the ContainsFold predicate on the "payment_channel" field.
func PaymentChannelContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPaymentChannel, v))
}

// PendingEQ applies the EQ predicate on the "pending" field.
func PendingEQ(v bool) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPending, v))
}

// PendingNEQ applies the NEQ predicate on the "pending" field.
func PendingNEQ(v bool) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPending, v))
}

// PendingTransactionIDEQ applies the EQ predicate on the "pending_transaction_id" field.
func PendingTransactionIDEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPendingTransactionID, v))
}

// PendingTransactionIDNEQ applies the NEQ predicate on the "pending_transaction_id" field.
func PendingTransactionIDNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPendingTransactionID, v))
}

// PendingTransactionIDIn applies the In predicate on the "pending_transaction_id" field.
func PendingTransactionIDIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPendingTransactionID, vs...))
}

// PendingTransactionIDNotIn applies the NotIn predicate on the "pending_transaction_id" field.
func PendingTransactionIDNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPendingTransactionID, vs...))
}

// PendingTransactionIDGT applies the GT predicate on the "pending_transaction_id" field.
func PendingTransactionIDGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPendingTransactionID, v))
}

// PendingTransactionIDGTE applies the GTE predicate on the "pending_transaction_id" field.
func PendingTransactionIDGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPendingTransactionID, v))
}

// PendingTransactionIDLT applies the LT predicate on the "pending_transaction_id" field.
func PendingTransactionIDLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPendingTransactionID, v))
}

// PendingTransactionIDLTE applies the LTE predicate on the "pending_transaction_id" field.
func PendingTransactionIDLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPendingTransactionID, v))
}

// PendingTransactionIDContains applies the Contains predicate on the "pending_transaction_id" field.
func PendingTransactionIDContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPendingTransactionID, v))
}

// PendingTransactionIDHasPrefix applies the HasPrefix predicate on the "pending_transaction_id" field.
func PendingTransactionIDHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPendingTransactionID, v))
}

// PendingTransactionIDHasSuffix applies the HasSuffix predicate on the "pending_transaction_id" field.
func PendingTransactionIDHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPendingTransactionID, v))
}

// PendingTransactionIDEqualFold applies the EqualFold predicate on the "pending_transaction_id" field.
func PendingTransactionIDEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPendingTransactionID, v))
}

// PendingTransactionIDContainsFold applies the ContainsFold predicate on the "pending_transaction_id" field.
func PendingTransactionIDContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPendingTransactionID, v))
}

// AccountOwnerEQ applies the EQ predicate on the "account_owner" field.
func AccountOwnerEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAccountOwner, v))
}

// AccountOwnerNEQ applies the NEQ predicate on the "account_owner" field.
func AccountOwnerNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldAccountOwner, v))
}

// AccountOwnerIn applies the In predicate on the "account_owner" field.
func AccountOwnerIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldAccountOwner, vs...))
}

// AccountOwnerNotIn applies the NotIn predicate on the "account_owner" field.
func AccountOwnerNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldAccountOwner, vs...))
}

// AccountOwnerGT applies the GT predicate on the "account_owner" field.
func AccountOwnerGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldAccountOwner, v))
}

// AccountOwnerGTE applies the GTE predicate on the "account_owner" field.
func AccountOwnerGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldAccountOwner, v))
}

// AccountOwnerLT applies the LT predicate on the "account_owner" field.
func AccountOwnerLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldAccountOwner, v))
}

// AccountOwnerLTE applies the LTE predicate on the "account_owner" field.
func AccountOwnerLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldAccountOwner, v))
}

// AccountOwnerContains applies the Contains predicate on the "account_owner" field.
func AccountOwnerContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldAccountOwner, v))
}

// AccountOwnerHasPrefix applies the HasPrefix predicate on the "account_owner" field.
func AccountOwnerHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldAccountOwner, v))
}

// AccountOwnerHasSuffix applies the HasSuffix predicate on the "account_owner" field.
func AccountOwnerHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldAccountOwner, v))
}

// AccountOwnerEqualFold applies the EqualFold predicate on the "account_owner" field.
func AccountOwnerEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldAccountOwner, v))
}

// AccountOwnerContainsFold applies the ContainsFold predicate on the "account_owner" field.
func AccountOwnerContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldAccountOwner, v))
}

// TransactionIDEQ applies the EQ predicate on the "transaction_id" field.
func TransactionIDEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionID, v))
}

// TransactionIDNEQ applies the NEQ predicate on the "transaction_id" field.
func TransactionIDNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTransactionID, v))
}

// TransactionIDIn applies the In predicate on the "transaction_id" field.
func TransactionIDIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTransactionID, vs...))
}

// TransactionIDNotIn applies the NotIn predicate on the "transaction_id" field.
func TransactionIDNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTransactionID, vs...))
}

// TransactionIDGT applies the GT predicate on the "transaction_id" field.
func TransactionIDGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTransactionID, v))
}

// TransactionIDGTE applies the GTE predicate on the "transaction_id" field.
func TransactionIDGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTransactionID, v))
}

// TransactionIDLT applies the LT predicate on the "transaction_id" field.
func TransactionIDLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTransactionID, v))
}

// TransactionIDLTE applies the LTE predicate on the "transaction_id" field.
func TransactionIDLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTransactionID, v))
}

// TransactionIDContains applies the Contains predicate on the "transaction_id" field.
func TransactionIDContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldTransactionID, v))
}

// TransactionIDHasPrefix applies the HasPrefix predicate on the "transaction_id" field.
func TransactionIDHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldTransactionID, v))
}

// TransactionIDHasSuffix applies the HasSuffix predicate on the "transaction_id" field.
func TransactionIDHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldTransactionID, v))
}

// TransactionIDEqualFold applies the EqualFold predicate on the "transaction_id" field.
func TransactionIDEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldTransactionID, v))
}

// TransactionIDContainsFold applies the ContainsFold predicate on the "transaction_id" field.
func TransactionIDContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldTransactionID, v))
}

// TransactionCodeEQ applies the EQ predicate on the "transaction_code" field.
func TransactionCodeEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionCode, v))
}

// TransactionCodeNEQ applies the NEQ predicate on the "transaction_code" field.
func TransactionCodeNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTransactionCode, v))
}

// TransactionCodeIn applies the In predicate on the "transaction_code" field.
func TransactionCodeIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTransactionCode, vs...))
}

// TransactionCodeNotIn applies the NotIn predicate on the "transaction_code" field.
func TransactionCodeNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTransactionCode, vs...))
}

// TransactionCodeGT applies the GT predicate on the "transaction_code" field.
func TransactionCodeGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTransactionCode, v))
}

// TransactionCodeGTE applies the GTE predicate on the "transaction_code" field.
func TransactionCodeGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTransactionCode, v))
}

// TransactionCodeLT applies the LT predicate on the "transaction_code" field.
func TransactionCodeLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTransactionCode, v))
}

// TransactionCodeLTE applies the LTE predicate on the "transaction_code" field.
func TransactionCodeLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTransactionCode, v))
}

// TransactionCodeContains applies the Contains predicate on the "transaction_code" field.
func TransactionCodeContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldTransactionCode, v))
}

// TransactionCodeHasPrefix applies the HasPrefix predicate on the "transaction_code" field.
func TransactionCodeHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldTransactionCode, v))
}

// TransactionCodeHasSuffix applies the HasSuffix predicate on the "transaction_code" field.
func TransactionCodeHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldTransactionCode, v))
}

// TransactionCodeEqualFold applies the EqualFold predicate on the "transaction_code" field.
func TransactionCodeEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldTransactionCode, v))
}

// TransactionCodeContainsFold applies the ContainsFold predicate on the "transaction_code" field.
func TransactionCodeContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldTransactionCode, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCreatedAt, v))
}

// HasInstitutionAccount applies the HasEdge predicate on the "institution_account" edge.
func HasInstitutionAccount() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InstitutionAccountTable, InstitutionAccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstitutionAccountWith applies the HasEdge predicate on the "institution_account" edge with a given conditions (other predicates).
func HasInstitutionAccountWith(preds ...predicate.PlaidInstitutionAccount) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstitutionAccountInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InstitutionAccountTable, InstitutionAccountColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransactionCategories applies the HasEdge predicate on the "transaction_categories" edge.
func HasTransactionCategories() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TransactionCategoriesTable, TransactionCategoriesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionCategoriesWith applies the HasEdge predicate on the "transaction_categories" edge with a given conditions (other predicates).
func HasTransactionCategoriesWith(preds ...predicate.SpendingCategory) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TransactionCategoriesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TransactionCategoriesTable, TransactionCategoriesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		p(s.Not())
	})
}
