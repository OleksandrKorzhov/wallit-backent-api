// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wallit/ent/plaidinstitution"
	"wallit/ent/plaiditem"
	"wallit/ent/predicate"
	"wallit/ent/transactionsync"
	"wallit/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaidItemUpdate is the builder for updating PlaidItem entities.
type PlaidItemUpdate struct {
	config
	hooks    []Hook
	mutation *PlaidItemMutation
}

// Where appends a list predicates to the PlaidItemUpdate builder.
func (piu *PlaidItemUpdate) Where(ps ...predicate.PlaidItem) *PlaidItemUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetItemID sets the "item_id" field.
func (piu *PlaidItemUpdate) SetItemID(s string) *PlaidItemUpdate {
	piu.mutation.SetItemID(s)
	return piu
}

// SetAccessToken sets the "access_token" field.
func (piu *PlaidItemUpdate) SetAccessToken(s string) *PlaidItemUpdate {
	piu.mutation.SetAccessToken(s)
	return piu
}

// SetCreatedAt sets the "created_at" field.
func (piu *PlaidItemUpdate) SetCreatedAt(t time.Time) *PlaidItemUpdate {
	piu.mutation.SetCreatedAt(t)
	return piu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piu *PlaidItemUpdate) SetNillableCreatedAt(t *time.Time) *PlaidItemUpdate {
	if t != nil {
		piu.SetCreatedAt(*t)
	}
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *PlaidItemUpdate) SetUpdatedAt(t time.Time) *PlaidItemUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (piu *PlaidItemUpdate) SetNillableUpdatedAt(t *time.Time) *PlaidItemUpdate {
	if t != nil {
		piu.SetUpdatedAt(*t)
	}
	return piu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (piu *PlaidItemUpdate) SetOwnerID(id int) *PlaidItemUpdate {
	piu.mutation.SetOwnerID(id)
	return piu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (piu *PlaidItemUpdate) SetNillableOwnerID(id *int) *PlaidItemUpdate {
	if id != nil {
		piu = piu.SetOwnerID(*id)
	}
	return piu
}

// SetOwner sets the "owner" edge to the User entity.
func (piu *PlaidItemUpdate) SetOwner(u *User) *PlaidItemUpdate {
	return piu.SetOwnerID(u.ID)
}

// AddTransactionSyncIDs adds the "transaction_syncs" edge to the TransactionSync entity by IDs.
func (piu *PlaidItemUpdate) AddTransactionSyncIDs(ids ...int) *PlaidItemUpdate {
	piu.mutation.AddTransactionSyncIDs(ids...)
	return piu
}

// AddTransactionSyncs adds the "transaction_syncs" edges to the TransactionSync entity.
func (piu *PlaidItemUpdate) AddTransactionSyncs(t ...*TransactionSync) *PlaidItemUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piu.AddTransactionSyncIDs(ids...)
}

// SetInstitutionID sets the "institution" edge to the PlaidInstitution entity by ID.
func (piu *PlaidItemUpdate) SetInstitutionID(id int) *PlaidItemUpdate {
	piu.mutation.SetInstitutionID(id)
	return piu
}

// SetNillableInstitutionID sets the "institution" edge to the PlaidInstitution entity by ID if the given value is not nil.
func (piu *PlaidItemUpdate) SetNillableInstitutionID(id *int) *PlaidItemUpdate {
	if id != nil {
		piu = piu.SetInstitutionID(*id)
	}
	return piu
}

// SetInstitution sets the "institution" edge to the PlaidInstitution entity.
func (piu *PlaidItemUpdate) SetInstitution(p *PlaidInstitution) *PlaidItemUpdate {
	return piu.SetInstitutionID(p.ID)
}

// Mutation returns the PlaidItemMutation object of the builder.
func (piu *PlaidItemUpdate) Mutation() *PlaidItemMutation {
	return piu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (piu *PlaidItemUpdate) ClearOwner() *PlaidItemUpdate {
	piu.mutation.ClearOwner()
	return piu
}

// ClearTransactionSyncs clears all "transaction_syncs" edges to the TransactionSync entity.
func (piu *PlaidItemUpdate) ClearTransactionSyncs() *PlaidItemUpdate {
	piu.mutation.ClearTransactionSyncs()
	return piu
}

// RemoveTransactionSyncIDs removes the "transaction_syncs" edge to TransactionSync entities by IDs.
func (piu *PlaidItemUpdate) RemoveTransactionSyncIDs(ids ...int) *PlaidItemUpdate {
	piu.mutation.RemoveTransactionSyncIDs(ids...)
	return piu
}

// RemoveTransactionSyncs removes "transaction_syncs" edges to TransactionSync entities.
func (piu *PlaidItemUpdate) RemoveTransactionSyncs(t ...*TransactionSync) *PlaidItemUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piu.RemoveTransactionSyncIDs(ids...)
}

// ClearInstitution clears the "institution" edge to the PlaidInstitution entity.
func (piu *PlaidItemUpdate) ClearInstitution() *PlaidItemUpdate {
	piu.mutation.ClearInstitution()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PlaidItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PlaidItemMutation](ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PlaidItemUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PlaidItemUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PlaidItemUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *PlaidItemUpdate) check() error {
	if v, ok := piu.mutation.ItemID(); ok {
		if err := plaiditem.ItemIDValidator(v); err != nil {
			return &ValidationError{Name: "item_id", err: fmt.Errorf(`ent: validator failed for field "PlaidItem.item_id": %w`, err)}
		}
	}
	if v, ok := piu.mutation.AccessToken(); ok {
		if err := plaiditem.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "PlaidItem.access_token": %w`, err)}
		}
	}
	return nil
}

func (piu *PlaidItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plaiditem.Table,
			Columns: plaiditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plaiditem.FieldID,
			},
		},
	}
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.ItemID(); ok {
		_spec.SetField(plaiditem.FieldItemID, field.TypeString, value)
	}
	if value, ok := piu.mutation.AccessToken(); ok {
		_spec.SetField(plaiditem.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := piu.mutation.CreatedAt(); ok {
		_spec.SetField(plaiditem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(plaiditem.FieldUpdatedAt, field.TypeTime, value)
	}
	if piu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plaiditem.OwnerTable,
			Columns: []string{plaiditem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plaiditem.OwnerTable,
			Columns: []string{plaiditem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.TransactionSyncsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaiditem.TransactionSyncsTable,
			Columns: []string{plaiditem.TransactionSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactionsync.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedTransactionSyncsIDs(); len(nodes) > 0 && !piu.mutation.TransactionSyncsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaiditem.TransactionSyncsTable,
			Columns: []string{plaiditem.TransactionSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactionsync.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.TransactionSyncsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaiditem.TransactionSyncsTable,
			Columns: []string{plaiditem.TransactionSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactionsync.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plaiditem.InstitutionTable,
			Columns: []string{plaiditem.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plaiditem.InstitutionTable,
			Columns: []string{plaiditem.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plaiditem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PlaidItemUpdateOne is the builder for updating a single PlaidItem entity.
type PlaidItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaidItemMutation
}

// SetItemID sets the "item_id" field.
func (piuo *PlaidItemUpdateOne) SetItemID(s string) *PlaidItemUpdateOne {
	piuo.mutation.SetItemID(s)
	return piuo
}

// SetAccessToken sets the "access_token" field.
func (piuo *PlaidItemUpdateOne) SetAccessToken(s string) *PlaidItemUpdateOne {
	piuo.mutation.SetAccessToken(s)
	return piuo
}

// SetCreatedAt sets the "created_at" field.
func (piuo *PlaidItemUpdateOne) SetCreatedAt(t time.Time) *PlaidItemUpdateOne {
	piuo.mutation.SetCreatedAt(t)
	return piuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piuo *PlaidItemUpdateOne) SetNillableCreatedAt(t *time.Time) *PlaidItemUpdateOne {
	if t != nil {
		piuo.SetCreatedAt(*t)
	}
	return piuo
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *PlaidItemUpdateOne) SetUpdatedAt(t time.Time) *PlaidItemUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (piuo *PlaidItemUpdateOne) SetNillableUpdatedAt(t *time.Time) *PlaidItemUpdateOne {
	if t != nil {
		piuo.SetUpdatedAt(*t)
	}
	return piuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (piuo *PlaidItemUpdateOne) SetOwnerID(id int) *PlaidItemUpdateOne {
	piuo.mutation.SetOwnerID(id)
	return piuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (piuo *PlaidItemUpdateOne) SetNillableOwnerID(id *int) *PlaidItemUpdateOne {
	if id != nil {
		piuo = piuo.SetOwnerID(*id)
	}
	return piuo
}

// SetOwner sets the "owner" edge to the User entity.
func (piuo *PlaidItemUpdateOne) SetOwner(u *User) *PlaidItemUpdateOne {
	return piuo.SetOwnerID(u.ID)
}

// AddTransactionSyncIDs adds the "transaction_syncs" edge to the TransactionSync entity by IDs.
func (piuo *PlaidItemUpdateOne) AddTransactionSyncIDs(ids ...int) *PlaidItemUpdateOne {
	piuo.mutation.AddTransactionSyncIDs(ids...)
	return piuo
}

// AddTransactionSyncs adds the "transaction_syncs" edges to the TransactionSync entity.
func (piuo *PlaidItemUpdateOne) AddTransactionSyncs(t ...*TransactionSync) *PlaidItemUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piuo.AddTransactionSyncIDs(ids...)
}

// SetInstitutionID sets the "institution" edge to the PlaidInstitution entity by ID.
func (piuo *PlaidItemUpdateOne) SetInstitutionID(id int) *PlaidItemUpdateOne {
	piuo.mutation.SetInstitutionID(id)
	return piuo
}

// SetNillableInstitutionID sets the "institution" edge to the PlaidInstitution entity by ID if the given value is not nil.
func (piuo *PlaidItemUpdateOne) SetNillableInstitutionID(id *int) *PlaidItemUpdateOne {
	if id != nil {
		piuo = piuo.SetInstitutionID(*id)
	}
	return piuo
}

// SetInstitution sets the "institution" edge to the PlaidInstitution entity.
func (piuo *PlaidItemUpdateOne) SetInstitution(p *PlaidInstitution) *PlaidItemUpdateOne {
	return piuo.SetInstitutionID(p.ID)
}

// Mutation returns the PlaidItemMutation object of the builder.
func (piuo *PlaidItemUpdateOne) Mutation() *PlaidItemMutation {
	return piuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (piuo *PlaidItemUpdateOne) ClearOwner() *PlaidItemUpdateOne {
	piuo.mutation.ClearOwner()
	return piuo
}

// ClearTransactionSyncs clears all "transaction_syncs" edges to the TransactionSync entity.
func (piuo *PlaidItemUpdateOne) ClearTransactionSyncs() *PlaidItemUpdateOne {
	piuo.mutation.ClearTransactionSyncs()
	return piuo
}

// RemoveTransactionSyncIDs removes the "transaction_syncs" edge to TransactionSync entities by IDs.
func (piuo *PlaidItemUpdateOne) RemoveTransactionSyncIDs(ids ...int) *PlaidItemUpdateOne {
	piuo.mutation.RemoveTransactionSyncIDs(ids...)
	return piuo
}

// RemoveTransactionSyncs removes "transaction_syncs" edges to TransactionSync entities.
func (piuo *PlaidItemUpdateOne) RemoveTransactionSyncs(t ...*TransactionSync) *PlaidItemUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piuo.RemoveTransactionSyncIDs(ids...)
}

// ClearInstitution clears the "institution" edge to the PlaidInstitution entity.
func (piuo *PlaidItemUpdateOne) ClearInstitution() *PlaidItemUpdateOne {
	piuo.mutation.ClearInstitution()
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PlaidItemUpdateOne) Select(field string, fields ...string) *PlaidItemUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PlaidItem entity.
func (piuo *PlaidItemUpdateOne) Save(ctx context.Context) (*PlaidItem, error) {
	return withHooks[*PlaidItem, PlaidItemMutation](ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PlaidItemUpdateOne) SaveX(ctx context.Context) *PlaidItem {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PlaidItemUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PlaidItemUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *PlaidItemUpdateOne) check() error {
	if v, ok := piuo.mutation.ItemID(); ok {
		if err := plaiditem.ItemIDValidator(v); err != nil {
			return &ValidationError{Name: "item_id", err: fmt.Errorf(`ent: validator failed for field "PlaidItem.item_id": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.AccessToken(); ok {
		if err := plaiditem.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "PlaidItem.access_token": %w`, err)}
		}
	}
	return nil
}

func (piuo *PlaidItemUpdateOne) sqlSave(ctx context.Context) (_node *PlaidItem, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plaiditem.Table,
			Columns: plaiditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plaiditem.FieldID,
			},
		},
	}
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlaidItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plaiditem.FieldID)
		for _, f := range fields {
			if !plaiditem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plaiditem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.ItemID(); ok {
		_spec.SetField(plaiditem.FieldItemID, field.TypeString, value)
	}
	if value, ok := piuo.mutation.AccessToken(); ok {
		_spec.SetField(plaiditem.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := piuo.mutation.CreatedAt(); ok {
		_spec.SetField(plaiditem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(plaiditem.FieldUpdatedAt, field.TypeTime, value)
	}
	if piuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plaiditem.OwnerTable,
			Columns: []string{plaiditem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plaiditem.OwnerTable,
			Columns: []string{plaiditem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.TransactionSyncsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaiditem.TransactionSyncsTable,
			Columns: []string{plaiditem.TransactionSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactionsync.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedTransactionSyncsIDs(); len(nodes) > 0 && !piuo.mutation.TransactionSyncsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaiditem.TransactionSyncsTable,
			Columns: []string{plaiditem.TransactionSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactionsync.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.TransactionSyncsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaiditem.TransactionSyncsTable,
			Columns: []string{plaiditem.TransactionSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactionsync.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plaiditem.InstitutionTable,
			Columns: []string{plaiditem.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   plaiditem.InstitutionTable,
			Columns: []string{plaiditem.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlaidItem{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plaiditem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
