// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wallit/ent/spendingcategory"
	"wallit/ent/transaction"
	"wallit/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpendingCategoryCreate is the builder for creating a SpendingCategory entity.
type SpendingCategoryCreate struct {
	config
	mutation *SpendingCategoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (scc *SpendingCategoryCreate) SetName(s string) *SpendingCategoryCreate {
	scc.mutation.SetName(s)
	return scc
}

// SetCategoryID sets the "category_id" field.
func (scc *SpendingCategoryCreate) SetCategoryID(s string) *SpendingCategoryCreate {
	scc.mutation.SetCategoryID(s)
	return scc
}

// SetCreatedAt sets the "created_at" field.
func (scc *SpendingCategoryCreate) SetCreatedAt(t time.Time) *SpendingCategoryCreate {
	scc.mutation.SetCreatedAt(t)
	return scc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scc *SpendingCategoryCreate) SetNillableCreatedAt(t *time.Time) *SpendingCategoryCreate {
	if t != nil {
		scc.SetCreatedAt(*t)
	}
	return scc
}

// AddCategoryTransactionIDs adds the "category_transactions" edge to the Transaction entity by IDs.
func (scc *SpendingCategoryCreate) AddCategoryTransactionIDs(ids ...int) *SpendingCategoryCreate {
	scc.mutation.AddCategoryTransactionIDs(ids...)
	return scc
}

// AddCategoryTransactions adds the "category_transactions" edges to the Transaction entity.
func (scc *SpendingCategoryCreate) AddCategoryTransactions(t ...*Transaction) *SpendingCategoryCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return scc.AddCategoryTransactionIDs(ids...)
}

// AddInterestedUserIDs adds the "interested_users" edge to the User entity by IDs.
func (scc *SpendingCategoryCreate) AddInterestedUserIDs(ids ...int) *SpendingCategoryCreate {
	scc.mutation.AddInterestedUserIDs(ids...)
	return scc
}

// AddInterestedUsers adds the "interested_users" edges to the User entity.
func (scc *SpendingCategoryCreate) AddInterestedUsers(u ...*User) *SpendingCategoryCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return scc.AddInterestedUserIDs(ids...)
}

// Mutation returns the SpendingCategoryMutation object of the builder.
func (scc *SpendingCategoryCreate) Mutation() *SpendingCategoryMutation {
	return scc.mutation
}

// Save creates the SpendingCategory in the database.
func (scc *SpendingCategoryCreate) Save(ctx context.Context) (*SpendingCategory, error) {
	scc.defaults()
	return withHooks[*SpendingCategory, SpendingCategoryMutation](ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *SpendingCategoryCreate) SaveX(ctx context.Context) *SpendingCategory {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *SpendingCategoryCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *SpendingCategoryCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *SpendingCategoryCreate) defaults() {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		v := spendingcategory.DefaultCreatedAt()
		scc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *SpendingCategoryCreate) check() error {
	if _, ok := scc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SpendingCategory.name"`)}
	}
	if _, ok := scc.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category_id", err: errors.New(`ent: missing required field "SpendingCategory.category_id"`)}
	}
	if _, ok := scc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SpendingCategory.created_at"`)}
	}
	return nil
}

func (scc *SpendingCategoryCreate) sqlSave(ctx context.Context) (*SpendingCategory, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *SpendingCategoryCreate) createSpec() (*SpendingCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &SpendingCategory{config: scc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: spendingcategory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: spendingcategory.FieldID,
			},
		}
	)
	if value, ok := scc.mutation.Name(); ok {
		_spec.SetField(spendingcategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := scc.mutation.CategoryID(); ok {
		_spec.SetField(spendingcategory.FieldCategoryID, field.TypeString, value)
		_node.CategoryID = value
	}
	if value, ok := scc.mutation.CreatedAt(); ok {
		_spec.SetField(spendingcategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := scc.mutation.CategoryTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.CategoryTransactionsTable,
			Columns: spendingcategory.CategoryTransactionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.InterestedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   spendingcategory.InterestedUsersTable,
			Columns: spendingcategory.InterestedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SpendingCategoryCreateBulk is the builder for creating many SpendingCategory entities in bulk.
type SpendingCategoryCreateBulk struct {
	config
	builders []*SpendingCategoryCreate
}

// Save creates the SpendingCategory entities in the database.
func (sccb *SpendingCategoryCreateBulk) Save(ctx context.Context) ([]*SpendingCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*SpendingCategory, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpendingCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *SpendingCategoryCreateBulk) SaveX(ctx context.Context) []*SpendingCategory {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *SpendingCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *SpendingCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
