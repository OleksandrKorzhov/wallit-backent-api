// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wallit/ent/discountoffer"
	"wallit/ent/merchant"
	"wallit/ent/notification"
	"wallit/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiscountOfferCreate is the builder for creating a DiscountOffer entity.
type DiscountOfferCreate struct {
	config
	mutation *DiscountOfferMutation
	hooks    []Hook
}

// SetAmount sets the "amount" field.
func (doc *DiscountOfferCreate) SetAmount(i int) *DiscountOfferCreate {
	doc.mutation.SetAmount(i)
	return doc
}

// SetType sets the "type" field.
func (doc *DiscountOfferCreate) SetType(d discountoffer.Type) *DiscountOfferCreate {
	doc.mutation.SetType(d)
	return doc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (doc *DiscountOfferCreate) SetNillableType(d *discountoffer.Type) *DiscountOfferCreate {
	if d != nil {
		doc.SetType(*d)
	}
	return doc
}

// SetCurrency sets the "currency" field.
func (doc *DiscountOfferCreate) SetCurrency(s string) *DiscountOfferCreate {
	doc.mutation.SetCurrency(s)
	return doc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (doc *DiscountOfferCreate) SetNillableCurrency(s *string) *DiscountOfferCreate {
	if s != nil {
		doc.SetCurrency(*s)
	}
	return doc
}

// SetDescription sets the "description" field.
func (doc *DiscountOfferCreate) SetDescription(s string) *DiscountOfferCreate {
	doc.mutation.SetDescription(s)
	return doc
}

// SetMerchantSpecificIdentification sets the "merchant_specific_identification" field.
func (doc *DiscountOfferCreate) SetMerchantSpecificIdentification(s string) *DiscountOfferCreate {
	doc.mutation.SetMerchantSpecificIdentification(s)
	return doc
}

// SetCreatedAt sets the "created_at" field.
func (doc *DiscountOfferCreate) SetCreatedAt(t time.Time) *DiscountOfferCreate {
	doc.mutation.SetCreatedAt(t)
	return doc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (doc *DiscountOfferCreate) SetNillableCreatedAt(t *time.Time) *DiscountOfferCreate {
	if t != nil {
		doc.SetCreatedAt(*t)
	}
	return doc
}

// SetExpiresAt sets the "expires_at" field.
func (doc *DiscountOfferCreate) SetExpiresAt(t time.Time) *DiscountOfferCreate {
	doc.mutation.SetExpiresAt(t)
	return doc
}

// SetOwnerMerchantID sets the "owner_merchant" edge to the Merchant entity by ID.
func (doc *DiscountOfferCreate) SetOwnerMerchantID(id int) *DiscountOfferCreate {
	doc.mutation.SetOwnerMerchantID(id)
	return doc
}

// SetOwnerMerchant sets the "owner_merchant" edge to the Merchant entity.
func (doc *DiscountOfferCreate) SetOwnerMerchant(m *Merchant) *DiscountOfferCreate {
	return doc.SetOwnerMerchantID(m.ID)
}

// AddDiscountEligibleUserIDs adds the "discount_eligible_users" edge to the User entity by IDs.
func (doc *DiscountOfferCreate) AddDiscountEligibleUserIDs(ids ...int) *DiscountOfferCreate {
	doc.mutation.AddDiscountEligibleUserIDs(ids...)
	return doc
}

// AddDiscountEligibleUsers adds the "discount_eligible_users" edges to the User entity.
func (doc *DiscountOfferCreate) AddDiscountEligibleUsers(u ...*User) *DiscountOfferCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return doc.AddDiscountEligibleUserIDs(ids...)
}

// SetDiscountOfferNotificationID sets the "discount_offer_notification" edge to the Notification entity by ID.
func (doc *DiscountOfferCreate) SetDiscountOfferNotificationID(id int) *DiscountOfferCreate {
	doc.mutation.SetDiscountOfferNotificationID(id)
	return doc
}

// SetNillableDiscountOfferNotificationID sets the "discount_offer_notification" edge to the Notification entity by ID if the given value is not nil.
func (doc *DiscountOfferCreate) SetNillableDiscountOfferNotificationID(id *int) *DiscountOfferCreate {
	if id != nil {
		doc = doc.SetDiscountOfferNotificationID(*id)
	}
	return doc
}

// SetDiscountOfferNotification sets the "discount_offer_notification" edge to the Notification entity.
func (doc *DiscountOfferCreate) SetDiscountOfferNotification(n *Notification) *DiscountOfferCreate {
	return doc.SetDiscountOfferNotificationID(n.ID)
}

// Mutation returns the DiscountOfferMutation object of the builder.
func (doc *DiscountOfferCreate) Mutation() *DiscountOfferMutation {
	return doc.mutation
}

// Save creates the DiscountOffer in the database.
func (doc *DiscountOfferCreate) Save(ctx context.Context) (*DiscountOffer, error) {
	doc.defaults()
	return withHooks[*DiscountOffer, DiscountOfferMutation](ctx, doc.sqlSave, doc.mutation, doc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (doc *DiscountOfferCreate) SaveX(ctx context.Context) *DiscountOffer {
	v, err := doc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (doc *DiscountOfferCreate) Exec(ctx context.Context) error {
	_, err := doc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (doc *DiscountOfferCreate) ExecX(ctx context.Context) {
	if err := doc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (doc *DiscountOfferCreate) defaults() {
	if _, ok := doc.mutation.GetType(); !ok {
		v := discountoffer.DefaultType
		doc.mutation.SetType(v)
	}
	if _, ok := doc.mutation.CreatedAt(); !ok {
		v := discountoffer.DefaultCreatedAt()
		doc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (doc *DiscountOfferCreate) check() error {
	if _, ok := doc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "DiscountOffer.amount"`)}
	}
	if v, ok := doc.mutation.Amount(); ok {
		if err := discountoffer.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "DiscountOffer.amount": %w`, err)}
		}
	}
	if _, ok := doc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "DiscountOffer.type"`)}
	}
	if v, ok := doc.mutation.GetType(); ok {
		if err := discountoffer.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "DiscountOffer.type": %w`, err)}
		}
	}
	if _, ok := doc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "DiscountOffer.description"`)}
	}
	if v, ok := doc.mutation.Description(); ok {
		if err := discountoffer.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "DiscountOffer.description": %w`, err)}
		}
	}
	if _, ok := doc.mutation.MerchantSpecificIdentification(); !ok {
		return &ValidationError{Name: "merchant_specific_identification", err: errors.New(`ent: missing required field "DiscountOffer.merchant_specific_identification"`)}
	}
	if v, ok := doc.mutation.MerchantSpecificIdentification(); ok {
		if err := discountoffer.MerchantSpecificIdentificationValidator(v); err != nil {
			return &ValidationError{Name: "merchant_specific_identification", err: fmt.Errorf(`ent: validator failed for field "DiscountOffer.merchant_specific_identification": %w`, err)}
		}
	}
	if _, ok := doc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DiscountOffer.created_at"`)}
	}
	if _, ok := doc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "DiscountOffer.expires_at"`)}
	}
	if _, ok := doc.mutation.OwnerMerchantID(); !ok {
		return &ValidationError{Name: "owner_merchant", err: errors.New(`ent: missing required edge "DiscountOffer.owner_merchant"`)}
	}
	if len(doc.mutation.DiscountEligibleUsersIDs()) == 0 {
		return &ValidationError{Name: "discount_eligible_users", err: errors.New(`ent: missing required edge "DiscountOffer.discount_eligible_users"`)}
	}
	return nil
}

func (doc *DiscountOfferCreate) sqlSave(ctx context.Context) (*DiscountOffer, error) {
	if err := doc.check(); err != nil {
		return nil, err
	}
	_node, _spec := doc.createSpec()
	if err := sqlgraph.CreateNode(ctx, doc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	doc.mutation.id = &_node.ID
	doc.mutation.done = true
	return _node, nil
}

func (doc *DiscountOfferCreate) createSpec() (*DiscountOffer, *sqlgraph.CreateSpec) {
	var (
		_node = &DiscountOffer{config: doc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: discountoffer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discountoffer.FieldID,
			},
		}
	)
	if value, ok := doc.mutation.Amount(); ok {
		_spec.SetField(discountoffer.FieldAmount, field.TypeInt, value)
		_node.Amount = value
	}
	if value, ok := doc.mutation.GetType(); ok {
		_spec.SetField(discountoffer.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := doc.mutation.Currency(); ok {
		_spec.SetField(discountoffer.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := doc.mutation.Description(); ok {
		_spec.SetField(discountoffer.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := doc.mutation.MerchantSpecificIdentification(); ok {
		_spec.SetField(discountoffer.FieldMerchantSpecificIdentification, field.TypeString, value)
		_node.MerchantSpecificIdentification = value
	}
	if value, ok := doc.mutation.CreatedAt(); ok {
		_spec.SetField(discountoffer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := doc.mutation.ExpiresAt(); ok {
		_spec.SetField(discountoffer.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if nodes := doc.mutation.OwnerMerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountoffer.OwnerMerchantTable,
			Columns: []string{discountoffer.OwnerMerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.merchant_discount_offers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.DiscountEligibleUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discountoffer.DiscountEligibleUsersTable,
			Columns: discountoffer.DiscountEligibleUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.DiscountOfferNotificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   discountoffer.DiscountOfferNotificationTable,
			Columns: []string{discountoffer.DiscountOfferNotificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.notification_notification_discount_offer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DiscountOfferCreateBulk is the builder for creating many DiscountOffer entities in bulk.
type DiscountOfferCreateBulk struct {
	config
	builders []*DiscountOfferCreate
}

// Save creates the DiscountOffer entities in the database.
func (docb *DiscountOfferCreateBulk) Save(ctx context.Context) ([]*DiscountOffer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(docb.builders))
	nodes := make([]*DiscountOffer, len(docb.builders))
	mutators := make([]Mutator, len(docb.builders))
	for i := range docb.builders {
		func(i int, root context.Context) {
			builder := docb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiscountOfferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, docb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, docb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, docb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (docb *DiscountOfferCreateBulk) SaveX(ctx context.Context) []*DiscountOffer {
	v, err := docb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (docb *DiscountOfferCreateBulk) Exec(ctx context.Context) error {
	_, err := docb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (docb *DiscountOfferCreateBulk) ExecX(ctx context.Context) {
	if err := docb.Exec(ctx); err != nil {
		panic(err)
	}
}
