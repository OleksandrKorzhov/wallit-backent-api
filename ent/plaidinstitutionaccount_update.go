// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"wallit/ent/plaidinstitution"
	"wallit/ent/plaidinstitutionaccount"
	"wallit/ent/predicate"
	"wallit/ent/transaction"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaidInstitutionAccountUpdate is the builder for updating PlaidInstitutionAccount entities.
type PlaidInstitutionAccountUpdate struct {
	config
	hooks    []Hook
	mutation *PlaidInstitutionAccountMutation
}

// Where appends a list predicates to the PlaidInstitutionAccountUpdate builder.
func (piau *PlaidInstitutionAccountUpdate) Where(ps ...predicate.PlaidInstitutionAccount) *PlaidInstitutionAccountUpdate {
	piau.mutation.Where(ps...)
	return piau
}

// SetAccountID sets the "account_id" field.
func (piau *PlaidInstitutionAccountUpdate) SetAccountID(s string) *PlaidInstitutionAccountUpdate {
	piau.mutation.SetAccountID(s)
	return piau
}

// SetBalanceAvailable sets the "balance_available" field.
func (piau *PlaidInstitutionAccountUpdate) SetBalanceAvailable(f float64) *PlaidInstitutionAccountUpdate {
	piau.mutation.ResetBalanceAvailable()
	piau.mutation.SetBalanceAvailable(f)
	return piau
}

// AddBalanceAvailable adds f to the "balance_available" field.
func (piau *PlaidInstitutionAccountUpdate) AddBalanceAvailable(f float64) *PlaidInstitutionAccountUpdate {
	piau.mutation.AddBalanceAvailable(f)
	return piau
}

// SetBalanceCurrent sets the "balance_current" field.
func (piau *PlaidInstitutionAccountUpdate) SetBalanceCurrent(f float64) *PlaidInstitutionAccountUpdate {
	piau.mutation.ResetBalanceCurrent()
	piau.mutation.SetBalanceCurrent(f)
	return piau
}

// AddBalanceCurrent adds f to the "balance_current" field.
func (piau *PlaidInstitutionAccountUpdate) AddBalanceCurrent(f float64) *PlaidInstitutionAccountUpdate {
	piau.mutation.AddBalanceCurrent(f)
	return piau
}

// SetBalanceIsoCurrencyCode sets the "balance_iso_currency_code" field.
func (piau *PlaidInstitutionAccountUpdate) SetBalanceIsoCurrencyCode(s string) *PlaidInstitutionAccountUpdate {
	piau.mutation.SetBalanceIsoCurrencyCode(s)
	return piau
}

// SetMask sets the "mask" field.
func (piau *PlaidInstitutionAccountUpdate) SetMask(s string) *PlaidInstitutionAccountUpdate {
	piau.mutation.SetMask(s)
	return piau
}

// SetName sets the "name" field.
func (piau *PlaidInstitutionAccountUpdate) SetName(s string) *PlaidInstitutionAccountUpdate {
	piau.mutation.SetName(s)
	return piau
}

// SetOfficialName sets the "official_name" field.
func (piau *PlaidInstitutionAccountUpdate) SetOfficialName(s string) *PlaidInstitutionAccountUpdate {
	piau.mutation.SetOfficialName(s)
	return piau
}

// SetNillableOfficialName sets the "official_name" field if the given value is not nil.
func (piau *PlaidInstitutionAccountUpdate) SetNillableOfficialName(s *string) *PlaidInstitutionAccountUpdate {
	if s != nil {
		piau.SetOfficialName(*s)
	}
	return piau
}

// ClearOfficialName clears the value of the "official_name" field.
func (piau *PlaidInstitutionAccountUpdate) ClearOfficialName() *PlaidInstitutionAccountUpdate {
	piau.mutation.ClearOfficialName()
	return piau
}

// SetType sets the "type" field.
func (piau *PlaidInstitutionAccountUpdate) SetType(s string) *PlaidInstitutionAccountUpdate {
	piau.mutation.SetType(s)
	return piau
}

// SetParentInstitutionID sets the "parent_institution" edge to the PlaidInstitution entity by ID.
func (piau *PlaidInstitutionAccountUpdate) SetParentInstitutionID(id int) *PlaidInstitutionAccountUpdate {
	piau.mutation.SetParentInstitutionID(id)
	return piau
}

// SetNillableParentInstitutionID sets the "parent_institution" edge to the PlaidInstitution entity by ID if the given value is not nil.
func (piau *PlaidInstitutionAccountUpdate) SetNillableParentInstitutionID(id *int) *PlaidInstitutionAccountUpdate {
	if id != nil {
		piau = piau.SetParentInstitutionID(*id)
	}
	return piau
}

// SetParentInstitution sets the "parent_institution" edge to the PlaidInstitution entity.
func (piau *PlaidInstitutionAccountUpdate) SetParentInstitution(p *PlaidInstitution) *PlaidInstitutionAccountUpdate {
	return piau.SetParentInstitutionID(p.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (piau *PlaidInstitutionAccountUpdate) AddTransactionIDs(ids ...int) *PlaidInstitutionAccountUpdate {
	piau.mutation.AddTransactionIDs(ids...)
	return piau
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (piau *PlaidInstitutionAccountUpdate) AddTransactions(t ...*Transaction) *PlaidInstitutionAccountUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piau.AddTransactionIDs(ids...)
}

// Mutation returns the PlaidInstitutionAccountMutation object of the builder.
func (piau *PlaidInstitutionAccountUpdate) Mutation() *PlaidInstitutionAccountMutation {
	return piau.mutation
}

// ClearParentInstitution clears the "parent_institution" edge to the PlaidInstitution entity.
func (piau *PlaidInstitutionAccountUpdate) ClearParentInstitution() *PlaidInstitutionAccountUpdate {
	piau.mutation.ClearParentInstitution()
	return piau
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (piau *PlaidInstitutionAccountUpdate) ClearTransactions() *PlaidInstitutionAccountUpdate {
	piau.mutation.ClearTransactions()
	return piau
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (piau *PlaidInstitutionAccountUpdate) RemoveTransactionIDs(ids ...int) *PlaidInstitutionAccountUpdate {
	piau.mutation.RemoveTransactionIDs(ids...)
	return piau
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (piau *PlaidInstitutionAccountUpdate) RemoveTransactions(t ...*Transaction) *PlaidInstitutionAccountUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piau.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piau *PlaidInstitutionAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PlaidInstitutionAccountMutation](ctx, piau.sqlSave, piau.mutation, piau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piau *PlaidInstitutionAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := piau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piau *PlaidInstitutionAccountUpdate) Exec(ctx context.Context) error {
	_, err := piau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piau *PlaidInstitutionAccountUpdate) ExecX(ctx context.Context) {
	if err := piau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piau *PlaidInstitutionAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plaidinstitutionaccount.Table,
			Columns: plaidinstitutionaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plaidinstitutionaccount.FieldID,
			},
		},
	}
	if ps := piau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piau.mutation.AccountID(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldAccountID, field.TypeString, value)
	}
	if value, ok := piau.mutation.BalanceAvailable(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldBalanceAvailable, field.TypeFloat64, value)
	}
	if value, ok := piau.mutation.AddedBalanceAvailable(); ok {
		_spec.AddField(plaidinstitutionaccount.FieldBalanceAvailable, field.TypeFloat64, value)
	}
	if value, ok := piau.mutation.BalanceCurrent(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldBalanceCurrent, field.TypeFloat64, value)
	}
	if value, ok := piau.mutation.AddedBalanceCurrent(); ok {
		_spec.AddField(plaidinstitutionaccount.FieldBalanceCurrent, field.TypeFloat64, value)
	}
	if value, ok := piau.mutation.BalanceIsoCurrencyCode(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldBalanceIsoCurrencyCode, field.TypeString, value)
	}
	if value, ok := piau.mutation.Mask(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldMask, field.TypeString, value)
	}
	if value, ok := piau.mutation.Name(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldName, field.TypeString, value)
	}
	if value, ok := piau.mutation.OfficialName(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldOfficialName, field.TypeString, value)
	}
	if piau.mutation.OfficialNameCleared() {
		_spec.ClearField(plaidinstitutionaccount.FieldOfficialName, field.TypeString)
	}
	if value, ok := piau.mutation.GetType(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldType, field.TypeString, value)
	}
	if piau.mutation.ParentInstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plaidinstitutionaccount.ParentInstitutionTable,
			Columns: []string{plaidinstitutionaccount.ParentInstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piau.mutation.ParentInstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plaidinstitutionaccount.ParentInstitutionTable,
			Columns: []string{plaidinstitutionaccount.ParentInstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piau.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitutionaccount.TransactionsTable,
			Columns: []string{plaidinstitutionaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piau.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !piau.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitutionaccount.TransactionsTable,
			Columns: []string{plaidinstitutionaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piau.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitutionaccount.TransactionsTable,
			Columns: []string{plaidinstitutionaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plaidinstitutionaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piau.mutation.done = true
	return n, nil
}

// PlaidInstitutionAccountUpdateOne is the builder for updating a single PlaidInstitutionAccount entity.
type PlaidInstitutionAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaidInstitutionAccountMutation
}

// SetAccountID sets the "account_id" field.
func (piauo *PlaidInstitutionAccountUpdateOne) SetAccountID(s string) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.SetAccountID(s)
	return piauo
}

// SetBalanceAvailable sets the "balance_available" field.
func (piauo *PlaidInstitutionAccountUpdateOne) SetBalanceAvailable(f float64) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.ResetBalanceAvailable()
	piauo.mutation.SetBalanceAvailable(f)
	return piauo
}

// AddBalanceAvailable adds f to the "balance_available" field.
func (piauo *PlaidInstitutionAccountUpdateOne) AddBalanceAvailable(f float64) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.AddBalanceAvailable(f)
	return piauo
}

// SetBalanceCurrent sets the "balance_current" field.
func (piauo *PlaidInstitutionAccountUpdateOne) SetBalanceCurrent(f float64) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.ResetBalanceCurrent()
	piauo.mutation.SetBalanceCurrent(f)
	return piauo
}

// AddBalanceCurrent adds f to the "balance_current" field.
func (piauo *PlaidInstitutionAccountUpdateOne) AddBalanceCurrent(f float64) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.AddBalanceCurrent(f)
	return piauo
}

// SetBalanceIsoCurrencyCode sets the "balance_iso_currency_code" field.
func (piauo *PlaidInstitutionAccountUpdateOne) SetBalanceIsoCurrencyCode(s string) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.SetBalanceIsoCurrencyCode(s)
	return piauo
}

// SetMask sets the "mask" field.
func (piauo *PlaidInstitutionAccountUpdateOne) SetMask(s string) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.SetMask(s)
	return piauo
}

// SetName sets the "name" field.
func (piauo *PlaidInstitutionAccountUpdateOne) SetName(s string) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.SetName(s)
	return piauo
}

// SetOfficialName sets the "official_name" field.
func (piauo *PlaidInstitutionAccountUpdateOne) SetOfficialName(s string) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.SetOfficialName(s)
	return piauo
}

// SetNillableOfficialName sets the "official_name" field if the given value is not nil.
func (piauo *PlaidInstitutionAccountUpdateOne) SetNillableOfficialName(s *string) *PlaidInstitutionAccountUpdateOne {
	if s != nil {
		piauo.SetOfficialName(*s)
	}
	return piauo
}

// ClearOfficialName clears the value of the "official_name" field.
func (piauo *PlaidInstitutionAccountUpdateOne) ClearOfficialName() *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.ClearOfficialName()
	return piauo
}

// SetType sets the "type" field.
func (piauo *PlaidInstitutionAccountUpdateOne) SetType(s string) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.SetType(s)
	return piauo
}

// SetParentInstitutionID sets the "parent_institution" edge to the PlaidInstitution entity by ID.
func (piauo *PlaidInstitutionAccountUpdateOne) SetParentInstitutionID(id int) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.SetParentInstitutionID(id)
	return piauo
}

// SetNillableParentInstitutionID sets the "parent_institution" edge to the PlaidInstitution entity by ID if the given value is not nil.
func (piauo *PlaidInstitutionAccountUpdateOne) SetNillableParentInstitutionID(id *int) *PlaidInstitutionAccountUpdateOne {
	if id != nil {
		piauo = piauo.SetParentInstitutionID(*id)
	}
	return piauo
}

// SetParentInstitution sets the "parent_institution" edge to the PlaidInstitution entity.
func (piauo *PlaidInstitutionAccountUpdateOne) SetParentInstitution(p *PlaidInstitution) *PlaidInstitutionAccountUpdateOne {
	return piauo.SetParentInstitutionID(p.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (piauo *PlaidInstitutionAccountUpdateOne) AddTransactionIDs(ids ...int) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.AddTransactionIDs(ids...)
	return piauo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (piauo *PlaidInstitutionAccountUpdateOne) AddTransactions(t ...*Transaction) *PlaidInstitutionAccountUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piauo.AddTransactionIDs(ids...)
}

// Mutation returns the PlaidInstitutionAccountMutation object of the builder.
func (piauo *PlaidInstitutionAccountUpdateOne) Mutation() *PlaidInstitutionAccountMutation {
	return piauo.mutation
}

// ClearParentInstitution clears the "parent_institution" edge to the PlaidInstitution entity.
func (piauo *PlaidInstitutionAccountUpdateOne) ClearParentInstitution() *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.ClearParentInstitution()
	return piauo
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (piauo *PlaidInstitutionAccountUpdateOne) ClearTransactions() *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.ClearTransactions()
	return piauo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (piauo *PlaidInstitutionAccountUpdateOne) RemoveTransactionIDs(ids ...int) *PlaidInstitutionAccountUpdateOne {
	piauo.mutation.RemoveTransactionIDs(ids...)
	return piauo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (piauo *PlaidInstitutionAccountUpdateOne) RemoveTransactions(t ...*Transaction) *PlaidInstitutionAccountUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piauo.RemoveTransactionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piauo *PlaidInstitutionAccountUpdateOne) Select(field string, fields ...string) *PlaidInstitutionAccountUpdateOne {
	piauo.fields = append([]string{field}, fields...)
	return piauo
}

// Save executes the query and returns the updated PlaidInstitutionAccount entity.
func (piauo *PlaidInstitutionAccountUpdateOne) Save(ctx context.Context) (*PlaidInstitutionAccount, error) {
	return withHooks[*PlaidInstitutionAccount, PlaidInstitutionAccountMutation](ctx, piauo.sqlSave, piauo.mutation, piauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piauo *PlaidInstitutionAccountUpdateOne) SaveX(ctx context.Context) *PlaidInstitutionAccount {
	node, err := piauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piauo *PlaidInstitutionAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := piauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piauo *PlaidInstitutionAccountUpdateOne) ExecX(ctx context.Context) {
	if err := piauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piauo *PlaidInstitutionAccountUpdateOne) sqlSave(ctx context.Context) (_node *PlaidInstitutionAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plaidinstitutionaccount.Table,
			Columns: plaidinstitutionaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plaidinstitutionaccount.FieldID,
			},
		},
	}
	id, ok := piauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlaidInstitutionAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plaidinstitutionaccount.FieldID)
		for _, f := range fields {
			if !plaidinstitutionaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plaidinstitutionaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piauo.mutation.AccountID(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldAccountID, field.TypeString, value)
	}
	if value, ok := piauo.mutation.BalanceAvailable(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldBalanceAvailable, field.TypeFloat64, value)
	}
	if value, ok := piauo.mutation.AddedBalanceAvailable(); ok {
		_spec.AddField(plaidinstitutionaccount.FieldBalanceAvailable, field.TypeFloat64, value)
	}
	if value, ok := piauo.mutation.BalanceCurrent(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldBalanceCurrent, field.TypeFloat64, value)
	}
	if value, ok := piauo.mutation.AddedBalanceCurrent(); ok {
		_spec.AddField(plaidinstitutionaccount.FieldBalanceCurrent, field.TypeFloat64, value)
	}
	if value, ok := piauo.mutation.BalanceIsoCurrencyCode(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldBalanceIsoCurrencyCode, field.TypeString, value)
	}
	if value, ok := piauo.mutation.Mask(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldMask, field.TypeString, value)
	}
	if value, ok := piauo.mutation.Name(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldName, field.TypeString, value)
	}
	if value, ok := piauo.mutation.OfficialName(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldOfficialName, field.TypeString, value)
	}
	if piauo.mutation.OfficialNameCleared() {
		_spec.ClearField(plaidinstitutionaccount.FieldOfficialName, field.TypeString)
	}
	if value, ok := piauo.mutation.GetType(); ok {
		_spec.SetField(plaidinstitutionaccount.FieldType, field.TypeString, value)
	}
	if piauo.mutation.ParentInstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plaidinstitutionaccount.ParentInstitutionTable,
			Columns: []string{plaidinstitutionaccount.ParentInstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piauo.mutation.ParentInstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plaidinstitutionaccount.ParentInstitutionTable,
			Columns: []string{plaidinstitutionaccount.ParentInstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plaidinstitution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piauo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitutionaccount.TransactionsTable,
			Columns: []string{plaidinstitutionaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piauo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !piauo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitutionaccount.TransactionsTable,
			Columns: []string{plaidinstitutionaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piauo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plaidinstitutionaccount.TransactionsTable,
			Columns: []string{plaidinstitutionaccount.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlaidInstitutionAccount{config: piauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plaidinstitutionaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piauo.mutation.done = true
	return _node, nil
}
