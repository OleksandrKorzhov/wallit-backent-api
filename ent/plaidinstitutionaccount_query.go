// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"wallit/ent/plaidinstitution"
	"wallit/ent/plaidinstitutionaccount"
	"wallit/ent/predicate"
	"wallit/ent/transaction"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaidInstitutionAccountQuery is the builder for querying PlaidInstitutionAccount entities.
type PlaidInstitutionAccountQuery struct {
	config
	ctx                   *QueryContext
	order                 []OrderFunc
	inters                []Interceptor
	predicates            []predicate.PlaidInstitutionAccount
	withParentInstitution *PlaidInstitutionQuery
	withTransactions      *TransactionQuery
	withFKs               bool
	modifiers             []func(*sql.Selector)
	loadTotal             []func(context.Context, []*PlaidInstitutionAccount) error
	withNamedTransactions map[string]*TransactionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlaidInstitutionAccountQuery builder.
func (piaq *PlaidInstitutionAccountQuery) Where(ps ...predicate.PlaidInstitutionAccount) *PlaidInstitutionAccountQuery {
	piaq.predicates = append(piaq.predicates, ps...)
	return piaq
}

// Limit the number of records to be returned by this query.
func (piaq *PlaidInstitutionAccountQuery) Limit(limit int) *PlaidInstitutionAccountQuery {
	piaq.ctx.Limit = &limit
	return piaq
}

// Offset to start from.
func (piaq *PlaidInstitutionAccountQuery) Offset(offset int) *PlaidInstitutionAccountQuery {
	piaq.ctx.Offset = &offset
	return piaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (piaq *PlaidInstitutionAccountQuery) Unique(unique bool) *PlaidInstitutionAccountQuery {
	piaq.ctx.Unique = &unique
	return piaq
}

// Order specifies how the records should be ordered.
func (piaq *PlaidInstitutionAccountQuery) Order(o ...OrderFunc) *PlaidInstitutionAccountQuery {
	piaq.order = append(piaq.order, o...)
	return piaq
}

// QueryParentInstitution chains the current query on the "parent_institution" edge.
func (piaq *PlaidInstitutionAccountQuery) QueryParentInstitution() *PlaidInstitutionQuery {
	query := (&PlaidInstitutionClient{config: piaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plaidinstitutionaccount.Table, plaidinstitutionaccount.FieldID, selector),
			sqlgraph.To(plaidinstitution.Table, plaidinstitution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, plaidinstitutionaccount.ParentInstitutionTable, plaidinstitutionaccount.ParentInstitutionColumn),
		)
		fromU = sqlgraph.SetNeighbors(piaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransactions chains the current query on the "transactions" edge.
func (piaq *PlaidInstitutionAccountQuery) QueryTransactions() *TransactionQuery {
	query := (&TransactionClient{config: piaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plaidinstitutionaccount.Table, plaidinstitutionaccount.FieldID, selector),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plaidinstitutionaccount.TransactionsTable, plaidinstitutionaccount.TransactionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(piaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlaidInstitutionAccount entity from the query.
// Returns a *NotFoundError when no PlaidInstitutionAccount was found.
func (piaq *PlaidInstitutionAccountQuery) First(ctx context.Context) (*PlaidInstitutionAccount, error) {
	nodes, err := piaq.Limit(1).All(setContextOp(ctx, piaq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{plaidinstitutionaccount.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (piaq *PlaidInstitutionAccountQuery) FirstX(ctx context.Context) *PlaidInstitutionAccount {
	node, err := piaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlaidInstitutionAccount ID from the query.
// Returns a *NotFoundError when no PlaidInstitutionAccount ID was found.
func (piaq *PlaidInstitutionAccountQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = piaq.Limit(1).IDs(setContextOp(ctx, piaq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{plaidinstitutionaccount.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (piaq *PlaidInstitutionAccountQuery) FirstIDX(ctx context.Context) int {
	id, err := piaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlaidInstitutionAccount entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlaidInstitutionAccount entity is found.
// Returns a *NotFoundError when no PlaidInstitutionAccount entities are found.
func (piaq *PlaidInstitutionAccountQuery) Only(ctx context.Context) (*PlaidInstitutionAccount, error) {
	nodes, err := piaq.Limit(2).All(setContextOp(ctx, piaq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{plaidinstitutionaccount.Label}
	default:
		return nil, &NotSingularError{plaidinstitutionaccount.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (piaq *PlaidInstitutionAccountQuery) OnlyX(ctx context.Context) *PlaidInstitutionAccount {
	node, err := piaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlaidInstitutionAccount ID in the query.
// Returns a *NotSingularError when more than one PlaidInstitutionAccount ID is found.
// Returns a *NotFoundError when no entities are found.
func (piaq *PlaidInstitutionAccountQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = piaq.Limit(2).IDs(setContextOp(ctx, piaq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{plaidinstitutionaccount.Label}
	default:
		err = &NotSingularError{plaidinstitutionaccount.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (piaq *PlaidInstitutionAccountQuery) OnlyIDX(ctx context.Context) int {
	id, err := piaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlaidInstitutionAccounts.
func (piaq *PlaidInstitutionAccountQuery) All(ctx context.Context) ([]*PlaidInstitutionAccount, error) {
	ctx = setContextOp(ctx, piaq.ctx, "All")
	if err := piaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlaidInstitutionAccount, *PlaidInstitutionAccountQuery]()
	return withInterceptors[[]*PlaidInstitutionAccount](ctx, piaq, qr, piaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (piaq *PlaidInstitutionAccountQuery) AllX(ctx context.Context) []*PlaidInstitutionAccount {
	nodes, err := piaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlaidInstitutionAccount IDs.
func (piaq *PlaidInstitutionAccountQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = setContextOp(ctx, piaq.ctx, "IDs")
	if err := piaq.Select(plaidinstitutionaccount.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (piaq *PlaidInstitutionAccountQuery) IDsX(ctx context.Context) []int {
	ids, err := piaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (piaq *PlaidInstitutionAccountQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, piaq.ctx, "Count")
	if err := piaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, piaq, querierCount[*PlaidInstitutionAccountQuery](), piaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (piaq *PlaidInstitutionAccountQuery) CountX(ctx context.Context) int {
	count, err := piaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (piaq *PlaidInstitutionAccountQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, piaq.ctx, "Exist")
	switch _, err := piaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (piaq *PlaidInstitutionAccountQuery) ExistX(ctx context.Context) bool {
	exist, err := piaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlaidInstitutionAccountQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (piaq *PlaidInstitutionAccountQuery) Clone() *PlaidInstitutionAccountQuery {
	if piaq == nil {
		return nil
	}
	return &PlaidInstitutionAccountQuery{
		config:                piaq.config,
		ctx:                   piaq.ctx.Clone(),
		order:                 append([]OrderFunc{}, piaq.order...),
		inters:                append([]Interceptor{}, piaq.inters...),
		predicates:            append([]predicate.PlaidInstitutionAccount{}, piaq.predicates...),
		withParentInstitution: piaq.withParentInstitution.Clone(),
		withTransactions:      piaq.withTransactions.Clone(),
		// clone intermediate query.
		sql:  piaq.sql.Clone(),
		path: piaq.path,
	}
}

// WithParentInstitution tells the query-builder to eager-load the nodes that are connected to
// the "parent_institution" edge. The optional arguments are used to configure the query builder of the edge.
func (piaq *PlaidInstitutionAccountQuery) WithParentInstitution(opts ...func(*PlaidInstitutionQuery)) *PlaidInstitutionAccountQuery {
	query := (&PlaidInstitutionClient{config: piaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piaq.withParentInstitution = query
	return piaq
}

// WithTransactions tells the query-builder to eager-load the nodes that are connected to
// the "transactions" edge. The optional arguments are used to configure the query builder of the edge.
func (piaq *PlaidInstitutionAccountQuery) WithTransactions(opts ...func(*TransactionQuery)) *PlaidInstitutionAccountQuery {
	query := (&TransactionClient{config: piaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piaq.withTransactions = query
	return piaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AccountID string `json:"account_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlaidInstitutionAccount.Query().
//		GroupBy(plaidinstitutionaccount.FieldAccountID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (piaq *PlaidInstitutionAccountQuery) GroupBy(field string, fields ...string) *PlaidInstitutionAccountGroupBy {
	piaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlaidInstitutionAccountGroupBy{build: piaq}
	grbuild.flds = &piaq.ctx.Fields
	grbuild.label = plaidinstitutionaccount.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AccountID string `json:"account_id,omitempty"`
//	}
//
//	client.PlaidInstitutionAccount.Query().
//		Select(plaidinstitutionaccount.FieldAccountID).
//		Scan(ctx, &v)
func (piaq *PlaidInstitutionAccountQuery) Select(fields ...string) *PlaidInstitutionAccountSelect {
	piaq.ctx.Fields = append(piaq.ctx.Fields, fields...)
	sbuild := &PlaidInstitutionAccountSelect{PlaidInstitutionAccountQuery: piaq}
	sbuild.label = plaidinstitutionaccount.Label
	sbuild.flds, sbuild.scan = &piaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlaidInstitutionAccountSelect configured with the given aggregations.
func (piaq *PlaidInstitutionAccountQuery) Aggregate(fns ...AggregateFunc) *PlaidInstitutionAccountSelect {
	return piaq.Select().Aggregate(fns...)
}

func (piaq *PlaidInstitutionAccountQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range piaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, piaq); err != nil {
				return err
			}
		}
	}
	for _, f := range piaq.ctx.Fields {
		if !plaidinstitutionaccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if piaq.path != nil {
		prev, err := piaq.path(ctx)
		if err != nil {
			return err
		}
		piaq.sql = prev
	}
	return nil
}

func (piaq *PlaidInstitutionAccountQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlaidInstitutionAccount, error) {
	var (
		nodes       = []*PlaidInstitutionAccount{}
		withFKs     = piaq.withFKs
		_spec       = piaq.querySpec()
		loadedTypes = [2]bool{
			piaq.withParentInstitution != nil,
			piaq.withTransactions != nil,
		}
	)
	if piaq.withParentInstitution != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, plaidinstitutionaccount.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlaidInstitutionAccount).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlaidInstitutionAccount{config: piaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(piaq.modifiers) > 0 {
		_spec.Modifiers = piaq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, piaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := piaq.withParentInstitution; query != nil {
		if err := piaq.loadParentInstitution(ctx, query, nodes, nil,
			func(n *PlaidInstitutionAccount, e *PlaidInstitution) { n.Edges.ParentInstitution = e }); err != nil {
			return nil, err
		}
	}
	if query := piaq.withTransactions; query != nil {
		if err := piaq.loadTransactions(ctx, query, nodes,
			func(n *PlaidInstitutionAccount) { n.Edges.Transactions = []*Transaction{} },
			func(n *PlaidInstitutionAccount, e *Transaction) {
				n.Edges.Transactions = append(n.Edges.Transactions, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range piaq.withNamedTransactions {
		if err := piaq.loadTransactions(ctx, query, nodes,
			func(n *PlaidInstitutionAccount) { n.appendNamedTransactions(name) },
			func(n *PlaidInstitutionAccount, e *Transaction) { n.appendNamedTransactions(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range piaq.loadTotal {
		if err := piaq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (piaq *PlaidInstitutionAccountQuery) loadParentInstitution(ctx context.Context, query *PlaidInstitutionQuery, nodes []*PlaidInstitutionAccount, init func(*PlaidInstitutionAccount), assign func(*PlaidInstitutionAccount, *PlaidInstitution)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PlaidInstitutionAccount)
	for i := range nodes {
		if nodes[i].plaid_institution_accounts == nil {
			continue
		}
		fk := *nodes[i].plaid_institution_accounts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(plaidinstitution.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plaid_institution_accounts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (piaq *PlaidInstitutionAccountQuery) loadTransactions(ctx context.Context, query *TransactionQuery, nodes []*PlaidInstitutionAccount, init func(*PlaidInstitutionAccount), assign func(*PlaidInstitutionAccount, *Transaction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PlaidInstitutionAccount)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.InValues(plaidinstitutionaccount.TransactionsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plaid_institution_account_transactions
		if fk == nil {
			return fmt.Errorf(`foreign-key "plaid_institution_account_transactions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plaid_institution_account_transactions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (piaq *PlaidInstitutionAccountQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := piaq.querySpec()
	if len(piaq.modifiers) > 0 {
		_spec.Modifiers = piaq.modifiers
	}
	_spec.Node.Columns = piaq.ctx.Fields
	if len(piaq.ctx.Fields) > 0 {
		_spec.Unique = piaq.ctx.Unique != nil && *piaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, piaq.driver, _spec)
}

func (piaq *PlaidInstitutionAccountQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plaidinstitutionaccount.Table,
			Columns: plaidinstitutionaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plaidinstitutionaccount.FieldID,
			},
		},
		From:   piaq.sql,
		Unique: true,
	}
	if unique := piaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := piaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plaidinstitutionaccount.FieldID)
		for i := range fields {
			if fields[i] != plaidinstitutionaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := piaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := piaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := piaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := piaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (piaq *PlaidInstitutionAccountQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(piaq.driver.Dialect())
	t1 := builder.Table(plaidinstitutionaccount.Table)
	columns := piaq.ctx.Fields
	if len(columns) == 0 {
		columns = plaidinstitutionaccount.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if piaq.sql != nil {
		selector = piaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if piaq.ctx.Unique != nil && *piaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range piaq.predicates {
		p(selector)
	}
	for _, p := range piaq.order {
		p(selector)
	}
	if offset := piaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := piaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedTransactions tells the query-builder to eager-load the nodes that are connected to the "transactions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (piaq *PlaidInstitutionAccountQuery) WithNamedTransactions(name string, opts ...func(*TransactionQuery)) *PlaidInstitutionAccountQuery {
	query := (&TransactionClient{config: piaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if piaq.withNamedTransactions == nil {
		piaq.withNamedTransactions = make(map[string]*TransactionQuery)
	}
	piaq.withNamedTransactions[name] = query
	return piaq
}

// PlaidInstitutionAccountGroupBy is the group-by builder for PlaidInstitutionAccount entities.
type PlaidInstitutionAccountGroupBy struct {
	selector
	build *PlaidInstitutionAccountQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (piagb *PlaidInstitutionAccountGroupBy) Aggregate(fns ...AggregateFunc) *PlaidInstitutionAccountGroupBy {
	piagb.fns = append(piagb.fns, fns...)
	return piagb
}

// Scan applies the selector query and scans the result into the given value.
func (piagb *PlaidInstitutionAccountGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, piagb.build.ctx, "GroupBy")
	if err := piagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaidInstitutionAccountQuery, *PlaidInstitutionAccountGroupBy](ctx, piagb.build, piagb, piagb.build.inters, v)
}

func (piagb *PlaidInstitutionAccountGroupBy) sqlScan(ctx context.Context, root *PlaidInstitutionAccountQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(piagb.fns))
	for _, fn := range piagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*piagb.flds)+len(piagb.fns))
		for _, f := range *piagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*piagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := piagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlaidInstitutionAccountSelect is the builder for selecting fields of PlaidInstitutionAccount entities.
type PlaidInstitutionAccountSelect struct {
	*PlaidInstitutionAccountQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pias *PlaidInstitutionAccountSelect) Aggregate(fns ...AggregateFunc) *PlaidInstitutionAccountSelect {
	pias.fns = append(pias.fns, fns...)
	return pias
}

// Scan applies the selector query and scans the result into the given value.
func (pias *PlaidInstitutionAccountSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pias.ctx, "Select")
	if err := pias.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaidInstitutionAccountQuery, *PlaidInstitutionAccountSelect](ctx, pias.PlaidInstitutionAccountQuery, pias, pias.inters, v)
}

func (pias *PlaidInstitutionAccountSelect) sqlScan(ctx context.Context, root *PlaidInstitutionAccountQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pias.fns))
	for _, fn := range pias.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pias.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pias.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
