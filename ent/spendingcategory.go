// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wallit/ent/spendingcategory"

	"entgo.io/ent/dialect/sql"
)

// SpendingCategory is the model entity for the SpendingCategory schema.
type SpendingCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID string `json:"category_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpendingCategoryQuery when eager-loading is set.
	Edges SpendingCategoryEdges `json:"edges"`
}

// SpendingCategoryEdges holds the relations/edges for other nodes in the graph.
type SpendingCategoryEdges struct {
	// CategoryTransactions holds the value of the category_transactions edge.
	CategoryTransactions []*Transaction `json:"category_transactions,omitempty"`
	// InterestedUsers holds the value of the interested_users edge.
	InterestedUsers []*User `json:"interested_users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCategoryTransactions map[string][]*Transaction
	namedInterestedUsers      map[string][]*User
}

// CategoryTransactionsOrErr returns the CategoryTransactions value or an error if the edge
// was not loaded in eager-loading.
func (e SpendingCategoryEdges) CategoryTransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[0] {
		return e.CategoryTransactions, nil
	}
	return nil, &NotLoadedError{edge: "category_transactions"}
}

// InterestedUsersOrErr returns the InterestedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e SpendingCategoryEdges) InterestedUsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.InterestedUsers, nil
	}
	return nil, &NotLoadedError{edge: "interested_users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpendingCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spendingcategory.FieldID:
			values[i] = new(sql.NullInt64)
		case spendingcategory.FieldName, spendingcategory.FieldCategoryID:
			values[i] = new(sql.NullString)
		case spendingcategory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SpendingCategory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpendingCategory fields.
func (sc *SpendingCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spendingcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int(value.Int64)
		case spendingcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sc.Name = value.String
			}
		case spendingcategory.FieldCategoryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				sc.CategoryID = value.String
			}
		case spendingcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryCategoryTransactions queries the "category_transactions" edge of the SpendingCategory entity.
func (sc *SpendingCategory) QueryCategoryTransactions() *TransactionQuery {
	return NewSpendingCategoryClient(sc.config).QueryCategoryTransactions(sc)
}

// QueryInterestedUsers queries the "interested_users" edge of the SpendingCategory entity.
func (sc *SpendingCategory) QueryInterestedUsers() *UserQuery {
	return NewSpendingCategoryClient(sc.config).QueryInterestedUsers(sc)
}

// Update returns a builder for updating this SpendingCategory.
// Note that you need to call SpendingCategory.Unwrap() before calling this method if this SpendingCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *SpendingCategory) Update() *SpendingCategoryUpdateOne {
	return NewSpendingCategoryClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the SpendingCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *SpendingCategory) Unwrap() *SpendingCategory {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpendingCategory is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *SpendingCategory) String() string {
	var builder strings.Builder
	builder.WriteString("SpendingCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("name=")
	builder.WriteString(sc.Name)
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(sc.CategoryID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCategoryTransactions returns the CategoryTransactions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sc *SpendingCategory) NamedCategoryTransactions(name string) ([]*Transaction, error) {
	if sc.Edges.namedCategoryTransactions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sc.Edges.namedCategoryTransactions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sc *SpendingCategory) appendNamedCategoryTransactions(name string, edges ...*Transaction) {
	if sc.Edges.namedCategoryTransactions == nil {
		sc.Edges.namedCategoryTransactions = make(map[string][]*Transaction)
	}
	if len(edges) == 0 {
		sc.Edges.namedCategoryTransactions[name] = []*Transaction{}
	} else {
		sc.Edges.namedCategoryTransactions[name] = append(sc.Edges.namedCategoryTransactions[name], edges...)
	}
}

// NamedInterestedUsers returns the InterestedUsers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sc *SpendingCategory) NamedInterestedUsers(name string) ([]*User, error) {
	if sc.Edges.namedInterestedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sc.Edges.namedInterestedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sc *SpendingCategory) appendNamedInterestedUsers(name string, edges ...*User) {
	if sc.Edges.namedInterestedUsers == nil {
		sc.Edges.namedInterestedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		sc.Edges.namedInterestedUsers[name] = []*User{}
	} else {
		sc.Edges.namedInterestedUsers[name] = append(sc.Edges.namedInterestedUsers[name], edges...)
	}
}

// SpendingCategories is a parsable slice of SpendingCategory.
type SpendingCategories []*SpendingCategory

func (sc SpendingCategories) config(cfg config) {
	for _i := range sc {
		sc[_i].config = cfg
	}
}
