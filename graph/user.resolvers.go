package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"wallit/ent"
	"wallit/ent/user"
	"wallit/ent/usernotificationchannelpreferences"
	"wallit/graph/model"
)

// ExchangeAuthTokenForUserProfile is the resolver for the exchangeAuthTokenForUserProfile field.
func (r *mutationResolver) ExchangeAuthTokenForUserProfile(ctx context.Context, input model.ExchangeAuthTokenForUserProfileInput) (*ent.User, error) {
	//return nil, errors.New("Test error")

	return r.userService.GetOrCreateProfileWithIdentityProviderId(
		ctx,
		input.IdentityProviderID,
	)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input *ent.UpdateUserInput) (*ent.User, error) {
	return r.userService.Update(ctx, id, input)
}

// SetSpendingCategories is the resolver for the setSpendingCategories field.
func (r *mutationResolver) SetSpendingCategories(ctx context.Context, userID int, spendingCategoryIDs []int) (*ent.User, error) {
	client := ent.FromContext(ctx)

	return r.userService.
		WithTransactionClient(client).
		SetSpendingCategories(ctx, userID, spendingCategoryIDs)
}

// SetNotificationChannels is the resolver for the setNotificationChannels field.
func (r *mutationResolver) SetNotificationChannels(ctx context.Context, userID int, notificationChannel []usernotificationchannelpreferences.Chanel) (*ent.User, error) {
	client := ent.FromContext(ctx)

	return r.userService.
		WithTransactionClient(client).
		SetNotificationChannels(ctx, userID, notificationChannel)
}

// SetOfferFrequency is the resolver for the setOfferFrequency field.
func (r *mutationResolver) SetOfferFrequency(ctx context.Context, userID int, frequency user.OfferFrequency) (*ent.User, error) {
	return r.userService.SetOfferFrequency(ctx, userID, frequency)
}

// SpendingCategories is the resolver for the spendingCategories field.
func (r *queryResolver) SpendingCategories(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, where *ent.SpendingCategoryWhereInput) (*ent.SpendingCategoryConnection, error) {
	return r.db.SpendingCategory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		ent.WithSpendingCategoryFilter(where.Filter),
		//ent.WithSpendingCategoryOrder(orderBy)
	)
}

// NotificationChannels is the resolver for the notificationChannels field.
func (r *queryResolver) NotificationChannels(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, where *ent.UserNotificationChannelPreferencesWhereInput) (*ent.UserNotificationChannelPreferencesConnection, error) {
	return r.db.UserNotificationChannelPreferences.Query().
		Paginate(
			ctx,
			after,
			first,
			before,
			last,
			ent.WithUserNotificationChannelPreferencesFilter(where.Filter),
		)
}
