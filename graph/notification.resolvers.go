package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"log"
	"wallit/ent"
)

// MarkNotificationsAsCheckedInApp is the resolver for the markNotificationsAsCheckedInApp field.
func (r *mutationResolver) MarkNotificationsAsCheckedInApp(ctx context.Context, ids []int) (bool, error) {
	return true, r.notificationService.MarkAsCheckedInApp(ctx, ids...)
}

// Notifications is the resolver for the notifications field.
func (r *queryResolver) Notifications(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.NotificationOrder, where *ent.NotificationWhereInput) (*ent.NotificationConnection, error) {
	return r.db.Notification.Query().
		Paginate(
			ctx,
			after,
			first,
			before,
			last,
			ent.WithNotificationFilter(where.Filter),
			ent.WithNotificationOrder(orderBy),
		)
}

// Notification is the resolver for the notification field.
func (r *subscriptionResolver) Notification(ctx context.Context, ownerID int) (<-chan *ent.Notification, error) {
	go func() {
		<-ctx.Done()

		log.Printf("Subscription to notifications is close by the client for %v recipient. Removing the recipient", ownerID)
		r.notificationService.RemoveNotificationRecipient(ownerID)
	}()

	channel := r.notificationService.NewNotificationRecipient(ownerID)

	return channel, nil
}

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
