package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"log"
	"wallit/ent"
	"wallit/graph/model"
)

// CreateLinkToken is the resolver for the createLinkToken field.
func (r *mutationResolver) CreateLinkToken(ctx context.Context, input model.CreateLinkTokenParams) (*model.LinkTokenHost, error) {
	token, err := r.plaid.CreateLinkToken(input.UserID)

	tokenHost := &model.LinkTokenHost{
		LinkToken: token,
	}

	return tokenHost, err
}

// ExchangePublicToken is the resolver for the exchangePublicToken field.
func (r *mutationResolver) ExchangePublicToken(ctx context.Context, input model.ExchangePublicTokenParams) (string, error) {
	client := ent.FromContext(ctx)
	txPlaid := r.plaid.WithTransactionClient(client)

	res, err := txPlaid.ExchangePublicTokenIntoAccessToken(ctx, input.PublicToken)
	if err != nil {
		return "", err
	}

	// @TODO: use transactions
	plaidItem, err := r.userService.
		WithTransactionClient(client).
		SaveItemAccessToken(ctx, input.UserID, res.GetItemId(), res.GetAccessToken())
	if err != nil {
		return "", err
	}

	itemInfo, err := txPlaid.GetItemInfo(ctx, plaidItem.AccessToken)
	if err != nil {
		log.Printf("error getting item info: %v", err)
		return "", err
	}

	institution, err := txPlaid.GetInstitutionInfoById(ctx, itemInfo.Item.GetInstitutionId())
	if err != nil {
		log.Printf("failed to get info about institution: %v", err)
		return "", err
	}

	// @TODO: move to plaid service
	institutionRecord, err := client.PlaidInstitution.Create().
		SetInstitutionID(institution.Institution.GetInstitutionId()).
		SetName(institution.Institution.GetName()).
		SetPlaidItemID(plaidItem.ID).
		Save(ctx)
	if err != nil {
		log.Printf("failed to create institution record: %v", err)
		return "", err
	}

	accountsInfo, err := txPlaid.GetAccountsInfo(ctx, plaidItem.AccessToken)
	if err != nil {
		log.Printf("error getting accounts associated with the item: %v", err)
		return "", err
	}

	// @TODO: move to plaid service
	accounts := accountsInfo.GetAccounts()
	createAccountRecordsBulk := make([]*ent.PlaidInstitutionAccountCreate, len(accounts))
	for i, a := range accounts {
		balance := a.GetBalances()
		createAccountRecordsBulk[i] = client.PlaidInstitutionAccount.Create().
			SetAccountID(a.GetAccountId()).
			SetBalanceAvailable(balance.GetAvailable()).
			SetBalanceCurrent(balance.GetCurrent()).
			SetBalanceIsoCurrencyCode(balance.GetIsoCurrencyCode()).
			SetMask(a.GetMask()).
			SetName(a.GetName()).
			SetOfficialName(a.GetOfficialName()).
			SetType(string(a.GetType())).
			SetParentInstitution(institutionRecord)
	}

	if err := client.PlaidInstitutionAccount.CreateBulk(createAccountRecordsBulk...).Exec(ctx); err != nil {
		log.Printf("failed to create account records: %v", err)
		return "", err
	}

	err = txPlaid.SyncTransactions(ctx, plaidItem.ItemID)
	if err != nil {
		log.Printf("error synsync transactions after plaid item creation: %v", err)
		return "", err
	}

	return "OK", nil
}

// PlaidItems is the resolver for the plaidItems field.
func (r *queryResolver) PlaidItems(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, where *ent.PlaidItemWhereInput) (*ent.PlaidItemConnection, error) {
	return r.db.PlaidItem.Query().
		Paginate(
			ctx,
			before,
			first,
			after,
			last,
			ent.WithPlaidItemFilter(where.Filter),
		)
}

// Transactions is the resolver for the transactions field.
func (r *queryResolver) Transactions(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.TransactionOrder, where *ent.TransactionWhereInput) (*ent.TransactionConnection, error) {
	return r.db.Transaction.Query().
		Paginate(
			ctx,
			after,
			first,
			before,
			last,
			ent.WithTransactionOrder(orderBy),
			ent.WithTransactionFilter(where.Filter),
		)
}

// PlaidInstitutionAccounts is the resolver for the plaidInstitutionAccounts field.
func (r *queryResolver) PlaidInstitutionAccounts(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, where *ent.PlaidInstitutionAccountWhereInput) (*ent.PlaidInstitutionAccountConnection, error) {
	return r.db.PlaidInstitutionAccount.Query().
		Paginate(
			ctx,
			after,
			first,
			before,
			last,
			ent.WithPlaidInstitutionAccountFilter(where.Filter),
		)
}

// PlaidInstitutions is the resolver for the plaidInstitutions field.
func (r *queryResolver) PlaidInstitutions(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, where *ent.PlaidInstitutionWhereInput) (*ent.PlaidInstitutionConnection, error) {
	return r.db.PlaidInstitution.Query().
		Paginate(
			ctx,
			after,
			first,
			before,
			last,
			ent.WithPlaidInstitutionFilter(where.Filter),
		)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
